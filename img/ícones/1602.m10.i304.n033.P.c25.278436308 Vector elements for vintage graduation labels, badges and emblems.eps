%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 1602.m10.i304.n033.P.c25.278436308 Vector elements for vintage graduation labels, badges and emblems.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For:  
%%CreationDate: 19.02.16
%%BoundingBox: 0 0 387 387
%%HiResBoundingBox: 0 0 386.2537 386.7410
%%CropBox: 0 0 386.2537 386.7410
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.0 x111 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">baseball_labels</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-02-19T16:46:44+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-02-19T16:46:44+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-02-19T16:46:44+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AQ1jzz5//ACo88ajoVldt&#xA;caLBMZLHTryssBtZTziEZJDJxVuJ4MBUHbFXqfkr/nJTyXrXpW2tBtCv2opaY87Vm9pgBw/2YAHi&#xA;cVes21zb3MCXFtKk8EoDRTRsHRlPQqy1BGKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2Kqdxc21tC01zKkEK05SSMEUVNBUtQdcVQiX9zdGllbsIj1ubgNEv+xjIEjfSFB/mxVfIdZjoYxb&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e724650a-bc9e-407e-b33a-5650b926d17e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e724650a-bc9e-407e-b33a-5650b926d17e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:41051271-bd56-49ed-94b4-faf962d9f5b4</stRef:instanceID>
            <stRef:documentID>xmp.did:41051271-bd56-49ed-94b4-faf962d9f5b4</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:49f5aed3-9f57-c747-81d8-825062695e08</stEvt:instanceID>
                  <stEvt:when>2015-09-25T15:23:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2f17e0a3-50be-7c47-b9ca-27c49acbf287</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:27:40+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2a30ee13-b97c-fe48-9da0-a884076cf819</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:54:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b893f768-fe5c-ba45-8877-09ac362c0436</stEvt:instanceID>
                  <stEvt:when>2015-10-03T17:26:55+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6325c653-0cfe-7c48-8ed6-e72bbe216650</stEvt:instanceID>
                  <stEvt:when>2015-10-05T09:20:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ea579fea-020a-459e-8f58-eac12c8c86f6</stEvt:instanceID>
                  <stEvt:when>2015-12-30T14:03:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4755b3cb-9788-45cc-92f2-8222b48c26a5</stEvt:instanceID>
                  <stEvt:when>2016-01-04T11:18:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9347800c-159b-485e-9ece-e12cb1c5b52f</stEvt:instanceID>
                  <stEvt:when>2016-01-30T12:10:47+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c463976e-30cf-49c9-8299-72af296da477</stEvt:instanceID>
                  <stEvt:when>2016-02-01T13:57:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ef1496fa-2e19-4038-920d-50879e136d2d</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:28:57+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0e986875-ba66-4d23-aa4d-c94e0096006c</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:31:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:420450e9-0e29-47c0-823c-aa44c61de338</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:56:46+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:88e138da-69f5-49df-98ab-be3108d3fd79</stEvt:instanceID>
                  <stEvt:when>2016-02-16T17:55:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:77821261-0334-404a-acbe-d4e21e41ff82</stEvt:instanceID>
                  <stEvt:when>2016-02-18T13:08:25+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:41051271-bd56-49ed-94b4-faf962d9f5b4</stEvt:instanceID>
                  <stEvt:when>2016-02-19T15:45:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e724650a-bc9e-407e-b33a-5650b926d17e</stEvt:instanceID>
                  <stEvt:when>2016-02-19T16:46:44+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>169</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>80</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>57</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -386.741 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 386.741 li
386.254 386.741 li
386.254 0 li
cp
clp
44.8524 255.867 mo
47.6992 253.969 54.9112 253.969 54.9112 253.969 cv
54.7213 252.261 li
54.7213 252.261 59.4661 252.83 62.5026 255.487 cv
65.5393 258.144 67.4371 260.612 67.4371 260.612 cv
67.4371 260.612 61.9332 258.144 53.3929 259.473 cv
44.8524 260.801 37.8303 264.787 37.8303 264.787 cv
37.8303 264.787 42.0055 257.765 44.8524 255.867 cv
cp
50.3562 268.013 mo
49.2175 269.532 li
49.2175 269.532 60.6048 267.823 63.8312 265.356 cv
67.0576 262.889 70.6635 262.32 70.6635 262.32 cv
70.6635 262.32 67.2474 256.057 61.7435 253.02 cv
56.2396 249.984 51.3051 250.363 51.3051 250.363 cv
52.4439 251.881 li
52.4439 251.881 46.1809 251.502 42.5749 255.487 cv
38.969 259.473 33.8447 266.115 33.8447 266.115 cv
33.8447 266.115 38.2098 267.634 40.6771 268.013 cv
43.1443 268.393 50.3562 268.013 50.3562 268.013 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.2 .2 .2 rgb
f
116.781 319.735 mo
117.237 306.201 111.577 291.159 100.887 282.604 cv
100.882 282.6 96.7336 279.278 101.164 278.447 cv
101.164 278.447 108.369 279.279 113.357 290.363 cv
117.413 299.375 119.073 310.03 116.781 319.735 cv
cp
96.051 278.148 mo
95.5101 279.112 94.2304 279.39 93.135 279.257 cv
89.714 278.841 88.7752 274.765 92.5345 274.314 cv
94.7346 274.05 97.38 275.779 96.051 278.148 cv
cp
31.4959 319.611 mo
30.5839 314.701 30.3666 309.674 31.0085 304.716 cv
31.2507 302.847 32.9256 291.35 35.5047 292.598 cv
36.239 292.953 36.6092 293.823 36.6079 294.639 cv
36.6038 297.074 35.629 299.664 35.0747 302.011 cv
31.6939 316.33 34.9655 329.788 41.3645 342.698 cv
37.493 334.887 33.1363 328.44 31.4959 319.611 cv
cp
119.059 294.204 mo
114.315 272.189 90.781 270.481 90.781 270.481 cv
90.781 270.481 82.4303 271.24 80.3427 272.189 cv
80.0747 272.31 79.8101 272.426 79.552 272.535 cv
78.7772 273.817 77.8862 275.301 77.4959 275.984 cv
77.1952 276.511 76.8975 276.823 76.6452 277.014 cv
76.955 277.074 77.2659 277.125 77.5656 277.223 cv
77.8971 277.306 78.2132 277.436 78.5297 277.559 cv
78.8402 277.697 79.146 277.842 79.4384 278.012 cv
79.7313 278.179 80.0153 278.362 80.283 278.565 cv
80.5539 278.764 80.8089 278.983 81.0564 279.208 cv
81.3015 279.443 81.5287 279.672 81.7547 279.954 cv
81.2377 280.377 li
81.0446 280.172 80.8041 279.96 80.5696 279.768 cv
80.3271 279.58 80.0794 279.398 79.8191 279.237 cv
79.5604 279.073 79.2938 278.924 79.0225 278.787 cv
78.751 278.648 78.4699 278.534 78.1875 278.427 cv
77.8998 278.335 77.615 278.234 77.3194 278.177 cv
77.0287 278.1 76.7289 278.073 76.4337 278.03 cv
76.133 278.023 75.8847 277.975 75.5489 277.998 cv
75.0679 278.015 li
74.6307 278.062 li
74.0148 278.127 73.4014 278.24 72.7925 278.371 cv
72.503 278.437 72.2139 278.507 71.9256 278.58 cv
71.8022 279.211 li
71.8022 279.211 71.7446 278.999 71.6661 278.651 cv
71.4364 278.711 71.2064 278.772 70.9782 278.841 cv
70.3794 279.023 69.7854 279.225 69.2001 279.449 cv
68.9078 279.562 68.617 279.678 68.3301 279.802 cv
68.0454 279.924 67.7523 280.056 67.4885 280.18 cv
67.0615 280.381 li
66.749 280.037 li
66.5033 279.767 66.1866 279.475 65.8821 279.213 cv
65.5733 278.945 65.2452 278.698 64.913 278.457 cv
64.2432 277.983 63.5301 277.573 62.793 277.219 cv
62.4158 277.04 62.0797 276.896 61.6589 276.75 cv
61.445 276.668 61.2918 276.625 61.1094 276.577 cv
60.9237 276.541 60.7369 276.504 60.5386 276.487 cv
59.753 276.405 58.9131 276.443 58.0819 276.515 cv
56.4128 276.681 54.7346 276.991 53.0686 277.351 cv
51.3992 277.706 49.7384 278.12 48.0758 278.548 cv
49.6532 277.866 51.2747 277.292 52.9171 276.773 cv
54.565 276.272 56.2355 275.823 57.9671 275.566 cv
58.8348 275.446 59.7131 275.341 60.6357 275.413 cv
60.865 275.425 61.1005 275.462 61.336 275.501 cv
61.5711 275.551 61.83 275.622 62.0182 275.689 cv
62.4116 275.808 62.8721 275.983 63.2735 276.159 cv
64.0966 276.511 64.8721 276.963 65.6075 277.467 cv
65.972 277.724 66.3311 277.989 66.6726 278.279 cv
66.9041 278.475 67.1244 278.675 67.3447 278.888 cv
67.8175 278.674 68.2871 278.482 68.767 278.301 cv
69.3829 278.073 70.0072 277.869 70.638 277.684 cv
70.9028 277.608 71.17 277.539 71.4379 277.472 cv
71.3266 276.792 71.2328 275.994 71.2328 275.225 cv
71.2328 274.418 71.3016 273.441 71.3805 272.583 cv
70.4738 272.378 li
70.4738 272.378 54.1519 267.444 43.3341 275.984 cv
32.5162 284.525 27.7715 296.671 27.5817 314.511 cv
27.3919 332.351 43.7137 352.279 45.2319 355.316 cv
46.7503 358.352 49.4073 361.958 53.5826 362.907 cv
56.4562 363.56 60.3184 363.674 63.0661 363.867 cv
61.6586 361.547 60.5937 358.363 60.2252 353.987 cv
60.3418 355.371 61.1775 356.94 61.7939 358.142 cv
62.826 360.156 64.0892 362.361 66.0187 363.641 cv
67.9068 364.893 70.3502 365.123 72.5405 365.427 cv
77.1609 366.07 82.1056 366.34 86.5694 364.736 cv
89.1465 363.81 91.4229 362.219 93.1141 360.058 cv
95.3467 357.205 96.6523 353.381 97.9561 350.046 cv
98.9711 347.449 99.9199 344.824 100.792 342.176 cv
100.808 342.127 100.824 342.079 100.84 342.031 cv
97.9062 355.441 94.6664 361.547 93.1593 363.838 cv
93.814 363.861 94.3714 363.927 94.7666 364.046 cv
96.6644 364.615 101.789 366.513 110.899 348.673 cv
120.008 330.833 123.804 316.219 119.059 294.204 cv
cp
f
78.4765 266.641 mo
78.7854 266.055 79.1354 265.391 79.2052 264.724 cv
79.2257 264.529 79.054 264.333 79.2381 264.216 cv
79.4636 264.073 79.886 264.311 80.1708 264.402 cv
80.2178 264.417 80.261 264.428 80.2991 264.432 cv
80.7962 264.492 81.3792 264.352 81.8778 264.307 cv
81.9764 264.298 82.0787 264.29 82.1718 264.324 cv
82.4305 264.418 82.4724 264.796 82.3205 265.025 cv
82.1684 265.255 81.8996 265.372 81.6486 265.484 cv
79.4558 266.469 77.4565 268.119 76.5812 270.358 cv
76.9868 269.014 77.8286 267.87 78.4765 266.641 cv
cp
74.8389 264.787 mo
75.598 266.305 75.0286 266.115 74.0797 268.772 cv
73.3262 270.882 72.4537 275.501 72.1261 277.316 cv
72.9152 277.148 73.7148 277.02 74.5257 276.96 cv
75.0473 276.924 li
75.5286 276.922 li
75.7332 276.915 75.9732 276.937 76.2124 276.962 cv
76.6434 274.991 77.5961 270.946 78.4448 269.532 cv
79.5835 267.634 83.3793 265.546 83.7589 264.597 cv
84.1385 263.648 82.2406 263.269 80.9121 263.458 cv
79.5835 263.648 77.8755 263.079 76.1673 261.94 cv
74.4593 260.801 71.8022 261.56 71.8022 261.56 cv
71.8022 261.56 74.0797 263.269 74.8389 264.787 cv
cp
f
285.989 8.7189 mo
291.27 9.7061 297.431 10.8577 304.032 12.0916 cv
310.638 13.294 317.685 14.5766 324.732 15.8591 cv
331.787 17.1009 338.841 18.3426 345.454 19.5068 cv
352.073 20.6393 358.251 21.6964 363.546 22.6025 cv
368.847 23.4799 373.264 24.211 376.356 24.7228 cv
379.45 25.2188 381.219 25.5022 381.219 25.5022 cv
381.219 25.5022 379.462 25.1545 376.387 24.5462 cv
373.31 23.9537 368.914 23.1072 363.638 22.0915 cv
358.357 21.1046 352.196 19.9531 345.595 18.7193 cv
338.989 17.5171 331.942 16.2347 324.895 14.9524 cv
317.84 13.7108 310.786 12.4693 304.173 11.3054 cv
297.554 10.1729 291.376 9.116 286.081 8.21 cv
280.78 7.3324 276.363 6.601 273.271 6.0891 cv
270.177 5.5929 268.408 5.3094 268.408 5.3094 cv
268.408 5.3094 270.165 5.6568 273.24 6.2649 cv
276.317 6.8573 280.714 7.7035 285.989 8.7189 cv
cp
f
314.717 71.811 mo
329.525 76.6573 li
329.525 76.6573 328.448 83.3882 328.448 85.5421 cv
328.448 87.6959 329.256 89.5806 329.256 89.5806 cv
341.641 78.5419 li
314.717 71.811 li
cp
f
319.025 91.4653 mo
293.717 82.042 li
232.869 90.3883 li
233.677 101.696 li
230.984 104.927 li
319.025 91.4653 li
cp
f
381.914 66.9397 mo
381.849 66.9611 381.783 66.979 381.719 66.9945 cv
381.112 67.143 380.504 67.2915 379.897 67.4399 cv
378.383 67.8099 376.866 68.1804 375.323 68.3927 cv
370.748 69.0219 366.146 69.7853 361.569 70.5313 cv
359.503 70.8681 357.438 71.205 355.372 71.5417 cv
343.021 84.0917 li
342.998 83.9927 342.984 83.9342 342.984 83.9342 cv
342.984 83.9342 342.994 83.9978 343.009 84.1044 cv
341.147 85.9966 li
341.014 85.2903 340.905 84.847 340.905 84.847 cv
340.905 84.847 340.981 85.3309 341.053 86.0915 cv
339.239 87.9353 li
339.21 87.7449 339.181 87.5517 339.151 87.3803 cv
338.985 86.4011 338.825 85.7598 338.825 85.7598 cv
338.825 85.7598 338.929 86.4129 339.009 87.3983 cv
339.027 87.6213 339.043 87.8658 339.058 88.1189 cv
338.679 88.5037 li
339.073 88.4446 li
339.111 89.2347 339.125 90.1199 339.085 91.0086 cv
339.028 92.3175 338.86 93.6152 338.694 94.5793 cv
338.565 95.3359 338.442 95.8757 338.395 96.0755 cv
337.292 96.5496 li
337.322 96.2861 337.356 95.9605 337.387 95.5894 cv
337.47 94.5903 337.525 93.253 337.467 91.9215 cv
337.409 90.5891 337.24 89.2717 337.072 88.2932 cv
337.007 87.9098 336.943 87.5807 336.889 87.3191 cv
340.294 84.0654 li
351.397 73.3192 li
362.494 62.566 li
371.081 54.1428 li
371.764 54.882 372.447 55.6213 373.13 56.3606 cv
372.004 55.4852 li
357.547 69.6531 li
374.355 57.6878 li
374.87 58.2445 375.384 58.8012 375.898 59.3578 cv
377.087 60.6462 378.277 61.9346 379.467 63.2229 cv
379.961 63.7571 382.55 65.9507 382.437 66.4918 cv
382.388 66.7305 382.156 66.8597 381.914 66.9397 cv
cp
359.489 85.451 mo
359.324 86.4154 359.168 87.0362 359.168 87.0362 cv
359.344 87.0725 li
358.062 87.6236 li
358.098 87.3331 358.142 86.9356 358.181 86.461 cv
358.204 86.188 358.224 85.8861 358.241 85.5695 cv
359.5 85.3806 li
359.496 85.4027 359.492 85.4292 359.489 85.451 cv
cp
357.409 86.3638 mo
357.245 87.3283 357.089 87.9491 357.089 87.9491 cv
357.235 87.9791 li
355.985 88.5161 li
356.021 88.2273 356.064 87.8381 356.102 87.3738 cv
356.139 86.9333 356.168 86.4202 356.186 85.8776 cv
357.517 85.678 li
357.482 85.9185 357.446 86.152 357.409 86.3638 cv
cp
355.33 87.2766 mo
355.165 88.2411 355.009 88.8619 355.009 88.8619 cv
355.125 88.8857 li
353.908 89.4088 li
353.943 89.1219 353.985 88.7405 354.022 88.2866 cv
354.073 87.6862 354.109 86.9578 354.12 86.1876 cv
355.52 85.9776 li
355.46 86.4467 355.396 86.8928 355.33 87.2766 cv
cp
353.25 88.1894 mo
353.086 89.1539 352.93 89.7747 352.93 89.7747 cv
353.015 89.7923 li
351.831 90.3014 li
351.866 90.0165 351.907 89.6429 351.943 89.1995 cv
352.006 88.4434 352.052 87.4932 352.046 86.4987 cv
353.512 86.2788 li
353.437 86.9821 353.345 87.6421 353.25 88.1894 cv
cp
351.171 89.1023 mo
351.007 90.0667 350.85 90.6876 350.85 90.6876 cv
350.906 90.699 li
349.754 91.1939 li
349.788 90.9115 349.828 90.5453 349.863 90.1123 cv
349.939 89.2058 349.987 88.0193 349.952 86.8127 cv
351.493 86.5817 li
351.413 87.5155 351.292 88.3986 351.171 89.1023 cv
cp
349.091 90.0151 mo
348.927 90.9796 348.771 91.6004 348.771 91.6004 cv
348.796 91.6056 li
347.677 92.0866 li
347.711 91.8068 347.75 91.4477 347.784 91.0252 cv
347.867 90.0262 347.922 88.6888 347.864 87.3573 cv
347.861 87.2803 347.854 87.2049 347.85 87.1281 cv
349.454 86.8875 li
349.383 88.0417 349.238 89.1605 349.091 90.0151 cv
cp
347.403 87.3573 mo
347.346 88.6662 347.178 89.9638 347.012 90.928 cv
346.85 91.8775 346.697 92.4908 346.692 92.5097 cv
345.6 92.9792 li
345.633 92.7022 345.671 92.3502 345.704 91.938 cv
345.788 90.939 345.843 89.6017 345.785 88.2702 cv
345.773 87.9932 345.754 87.7185 345.733 87.4456 cv
347.407 87.1945 li
347.405 87.249 347.405 87.3029 347.403 87.3573 cv
cp
345.324 88.2702 mo
345.266 89.5791 345.098 90.8767 344.932 91.8408 cv
344.786 92.6999 344.647 93.2832 344.618 93.4012 cv
343.523 93.8717 li
343.555 93.5979 343.592 93.2526 343.625 92.8509 cv
343.708 91.8519 343.763 90.5145 343.705 89.183 cv
343.685 88.7013 343.646 88.2279 343.601 87.7654 cv
345.342 87.5042 li
345.339 87.7586 345.335 88.0139 345.324 88.2702 cv
cp
343.244 89.183 mo
343.187 90.4919 343.019 91.7895 342.853 92.7537 cv
342.714 93.5719 342.581 94.1383 342.544 94.2926 cv
341.446 94.7644 li
341.478 94.4938 341.513 94.155 341.546 93.7637 cv
341.629 92.7646 341.684 91.4274 341.626 90.0958 cv
341.596 89.4061 341.536 88.723 341.462 88.0863 cv
343.264 87.816 li
343.268 88.2645 343.264 88.7218 343.244 89.183 cv
cp
341.165 90.0958 mo
341.108 91.4047 340.94 92.7023 340.774 93.6665 cv
340.639 94.4538 340.512 95.0055 340.469 95.184 cv
339.369 95.657 li
339.4 95.39 339.435 95.0574 339.466 94.6765 cv
339.549 93.6775 339.604 92.3402 339.546 91.0086 cv
339.507 90.0981 339.414 89.2028 339.306 88.4096 cv
341.177 88.129 li
341.195 88.7571 341.194 89.4269 341.165 90.0958 cv
cp
337.006 91.9215 mo
336.948 93.2304 336.781 94.528 336.615 95.4921 cv
336.491 96.2179 336.372 96.7485 336.321 96.967 cv
335.215 97.4423 li
335.244 97.1822 335.277 96.8646 335.307 96.5022 cv
335.391 95.5032 335.445 94.1659 335.387 92.8343 cv
335.33 91.502 335.16 90.1846 334.992 89.206 cv
334.989 89.1837 334.985 89.1641 334.981 89.1421 cv
336.837 87.369 li
336.867 87.6267 336.899 87.9458 336.929 88.3112 cv
337.011 89.2959 337.064 90.6134 337.006 91.9215 cv
cp
334.926 92.8343 mo
334.869 94.1432 334.701 95.4409 334.535 96.405 cv
334.415 97.1108 334.299 97.6295 334.246 97.8585 cv
333.137 98.335 li
333.167 98.0784 333.199 97.7686 333.228 97.415 cv
333.311 96.416 333.366 95.0787 333.308 93.7472 cv
333.266 92.7743 333.164 91.8126 333.047 90.9817 cv
333.133 90.8998 333.231 90.8136 333.312 90.7355 cv
334.709 89.4021 li
334.852 89.2653 li
334.932 90.2456 334.984 91.5432 334.926 92.8343 cv
cp
332.847 93.7472 mo
332.789 95.0561 332.622 96.3537 332.456 97.3178 cv
332.339 98.0047 332.227 98.512 332.171 98.7501 cv
331.06 99.2277 li
331.089 98.9748 331.12 98.6726 331.148 98.3279 cv
331.232 97.3289 331.287 95.9915 331.228 94.66 cv
331.196 93.9016 331.125 93.156 331.041 92.467 cv
331.283 92.3422 331.517 92.2086 331.739 92.0629 cv
332.14 91.798 332.499 91.487 332.835 91.1783 cv
332.872 91.9697 332.886 92.8566 332.847 93.7472 cv
cp
329.427 91.3461 mo
327.807 91.64 325.425 90.2499 323.924 89.6651 cv
321.667 88.7852 319.409 87.9053 317.152 87.0254 cv
311.985 85.0118 306.819 82.9983 301.653 80.9847 cv
275.3 70.912 li
262.118 65.8897 li
248.906 60.9452 li
235.694 56.0009 li
233.032 55.0247 li
229.747 53.7503 li
230.638 54.1471 li
222.506 51.1652 li
221.967 50.517 221.496 49.7764 221.144 48.9989 cv
220.966 48.6024 220.813 48.1847 220.719 47.7691 cv
220.62 47.3366 220.571 46.9071 220.533 46.4617 cv
220.439 45.2184 220.425 43.9656 220.445 42.7127 cv
344.127 78.4048 li
339.247 82.9334 li
337.238 84.8214 335.186 86.6486 333.155 88.4847 cv
332.663 88.9305 332.309 89.5122 331.819 89.962 cv
331.543 90.2163 331.228 90.4242 330.914 90.6309 cv
330.451 90.9357 329.972 91.2472 329.427 91.3461 cv
cp
330.767 94.66 mo
330.71 95.9689 330.542 97.2666 330.376 98.2307 cv
330.262 98.8986 330.154 99.3954 330.097 99.6416 cv
328.983 100.12 li
329.011 99.8713 329.041 99.5766 329.069 99.2407 cv
329.152 98.2417 329.207 96.9044 329.149 95.5728 cv
329.111 94.6918 329.022 93.8268 328.919 93.0526 cv
329.186 93.0427 329.449 93.0179 329.703 92.9631 cv
330.082 92.8816 330.439 92.7559 330.776 92.6019 cv
330.796 93.2569 330.798 93.9575 330.767 94.66 cv
cp
328.688 95.5728 mo
328.631 96.8817 328.463 98.1793 328.297 99.1435 cv
328.186 99.7924 328.08 100.28 328.022 100.533 cv
326.906 101.013 li
326.933 100.768 326.962 100.481 326.989 100.154 cv
327.073 99.1545 327.128 97.8172 327.069 96.4857 cv
327.012 95.1533 326.842 93.8359 326.675 92.8573 cv
326.653 92.7317 326.632 92.612 326.611 92.4982 cv
327.342 92.7776 li
327.229 92.7242 li
327.746 92.9783 328.09 93.0185 328.517 93.058 cv
328.572 93.061 328.624 93.0549 328.678 93.0558 cv
328.714 93.8345 328.727 94.7014 328.688 95.5728 cv
cp
219.676 79.0804 mo
219.676 72.6981 li
220.327 73.3923 220.971 74.0935 221.638 74.7727 cv
222.179 75.3435 222.749 75.889 223.306 76.4447 cv
223.862 77.0027 224.434 77.545 225.009 78.0856 cv
225.841 78.8708 226.695 79.6361 227.567 80.3851 cv
228.007 87.7561 li
228.057 88.5935 li
219.676 79.0804 li
cp
218.902 67.102 mo
219.805 66.7576 220.711 66.42 221.611 66.0661 cv
223.339 65.373 225.058 64.6497 226.745 63.8261 cv
226.841 66.2777 226.942 68.7289 227.071 71.178 cv
227.512 79.469 li
227.528 79.7433 li
226.961 78.9447 226.382 78.1566 225.786 77.3829 cv
225.307 76.7568 224.825 76.1324 224.325 75.5237 cv
223.829 74.9126 223.343 74.2915 222.83 73.6956 cv
221.824 72.4848 220.795 71.2951 219.745 70.1242 cv
219.004 69.2694 218.231 68.4424 217.46 67.6145 cv
218.902 67.102 li
cp
384.594 66.5531 mo
384.525 66.2546 384.402 66.0327 384.278 65.8582 cv
384.026 65.5116 383.761 65.2886 383.496 65.0855 cv
383.246 64.8988 383.008 64.7474 382.732 64.5933 cv
371.091 54.1338 li
373.527 51.7439 li
373.805 51.4715 li
373.425 51.4475 li
370.284 51.2496 li
370.202 47.7393 li
381.757 34.387 li
378.796 34.6562 li
379.065 32.7716 li
345.949 69.9263 li
345.949 69.9263 345.41 71.5417 345.41 73.9649 cv
345.41 76.388 345.41 76.388 345.41 76.388 cv
370.156 47.7923 li
370.074 51.3489 li
370.072 51.4439 li
370.171 51.4542 li
373.014 51.7491 li
361.901 61.9245 li
350.571 72.4255 li
344.531 78.0299 li
344.346 76.6411 343.896 72.803 344.333 71.2725 cv
344.56 70.4792 344.736 69.839 344.867 69.352 cv
383.103 26.0406 li
343.784 67.9456 li
208.795 31.6126 li
267.062 4.7709 li
207.909 31.0052 li
208.099 31.4253 li
208.099 31.4253 207.561 35.1948 208.099 37.0793 cv
208.638 38.964 210.253 39.7717 210.253 39.7717 cv
220.372 42.6919 li
220.294 43.9496 220.25 45.2103 220.287 46.4766 cv
220.305 46.9215 220.334 47.3835 220.421 47.8244 cv
220.509 48.2832 220.652 48.7123 220.824 49.136 cv
221.174 49.98 221.631 50.7632 222.202 51.4919 cv
222.232 51.5307 li
222.29 51.554 li
235.362 56.8608 li
248.453 62.0744 li
289.52 80.3483 li
288.675 80.418 287.828 80.4806 286.983 80.5519 cv
284.2 80.7786 281.419 81.0202 278.642 81.2882 cv
273.085 81.8093 267.532 82.3657 261.984 82.967 cv
256.434 83.5427 250.893 84.2015 245.348 84.8291 cv
240.091 85.4692 234.831 86.0888 229.579 86.7699 cv
228.937 79.3647 li
228.167 71.0977 li
227.909 68.3422 227.62 65.5888 227.323 62.8362 cv
227.031 60.0831 226.744 57.3296 226.407 54.5798 cv
226.475 57.3493 226.591 60.1153 226.704 62.8814 cv
226.715 63.1782 226.731 63.4746 226.743 63.7713 cv
224.885 64.0704 223.059 64.4711 221.242 64.9017 cv
220.302 65.1311 219.368 65.3769 218.431 65.6158 cv
215.641 66.3963 li
214.315 66.7674 li
215.255 67.8233 li
215.505 68.1042 215.753 68.3879 216.001 68.6708 cv
216.715 79.6189 li
230.177 95.5039 li
229.638 90.3883 li
228.067 88.6052 li
228.927 88.516 li
234.477 87.9398 240.019 87.2858 245.563 86.6589 cv
251.102 85.9852 256.645 85.3426 262.178 84.6171 cv
267.714 83.917 273.245 83.1722 278.772 82.3919 cv
281.536 82.0093 284.297 81.6003 287.056 81.1763 cv
288.802 80.913 290.547 80.6394 292.292 80.3646 cv
294.335 80.0981 li
300.992 82.6954 li
326.494 92.4533 li
326.507 92.5866 326.52 92.7256 326.532 92.8754 cv
326.613 93.8601 326.667 95.1776 326.608 96.4857 cv
326.551 97.7945 326.383 99.0922 326.217 100.056 cv
326.11 100.686 326.007 101.165 325.948 101.425 cv
324.828 101.906 li
324.855 101.665 324.884 101.385 324.91 101.066 cv
324.993 100.067 325.048 98.7301 324.99 97.3985 cv
324.933 96.0661 324.763 94.7487 324.595 93.7702 cv
324.429 92.791 324.269 92.1497 324.269 92.1497 cv
324.269 92.1497 324.372 92.8027 324.452 93.7882 cv
324.534 94.7729 324.587 96.0904 324.529 97.3985 cv
324.472 98.7074 324.304 100.005 324.138 100.969 cv
324.034 101.58 323.933 102.052 323.873 102.316 cv
322.751 102.799 li
322.777 102.562 322.805 102.289 322.83 101.979 cv
322.914 100.98 322.969 99.6429 322.91 98.3113 cv
322.853 96.979 322.684 95.6616 322.516 94.683 cv
322.349 93.7038 322.189 93.0625 322.189 93.0625 cv
322.189 93.0625 322.293 93.7156 322.373 94.7011 cv
322.454 95.6858 322.508 97.0033 322.449 98.3113 cv
322.392 99.6202 322.224 100.918 322.058 101.882 cv
321.957 102.477 321.859 102.939 321.798 103.208 cv
320.674 103.691 li
320.699 103.459 320.726 103.193 320.751 102.892 cv
320.834 101.893 320.889 100.556 320.831 99.2242 cv
320.774 97.8918 320.604 96.5744 320.436 95.5959 cv
320.27 94.6167 320.11 93.9754 320.11 93.9754 cv
320.11 93.9754 320.213 94.6284 320.293 95.6139 cv
320.375 96.5986 320.428 97.9161 320.37 99.2242 cv
320.313 100.533 320.145 101.831 319.979 102.795 cv
319.88 103.376 319.784 103.828 319.724 104.1 cv
318.597 104.584 li
318.621 104.356 318.647 104.097 318.671 103.805 cv
318.755 102.806 318.81 101.469 318.751 100.137 cv
318.694 98.8047 318.525 97.4873 318.357 96.5087 cv
318.19 95.5295 318.03 94.8882 318.03 94.8882 cv
318.03 94.8882 318.134 95.5413 318.214 96.5267 cv
318.296 97.5115 318.349 98.829 318.29 100.137 cv
318.233 101.446 318.065 102.744 317.899 103.708 cv
317.803 104.275 317.71 104.718 317.649 104.991 cv
316.519 105.477 li
316.544 105.254 316.569 105.001 316.592 104.718 cv
316.675 103.719 316.73 102.381 316.672 101.05 cv
316.615 99.7175 316.445 98.4001 316.277 97.4216 cv
316.111 96.4424 315.951 95.8011 315.951 95.8011 cv
315.951 95.8011 316.055 96.4541 316.134 97.4396 cv
316.216 98.4243 316.269 99.7418 316.211 101.05 cv
316.154 102.359 315.986 103.656 315.82 104.62 cv
315.725 105.174 315.635 105.608 315.574 105.883 cv
314.442 106.369 li
314.466 106.151 314.49 105.905 314.512 105.631 cv
314.596 104.632 314.651 103.294 314.592 101.963 cv
314.535 100.63 314.366 99.3129 314.198 98.3344 cv
314.031 97.3552 313.871 96.7138 313.871 96.7138 cv
313.871 96.7138 313.975 97.3669 314.055 98.3524 cv
314.137 99.3371 314.19 100.655 314.131 101.963 cv
314.074 103.272 313.906 104.569 313.74 105.533 cv
313.648 106.073 313.56 106.499 313.499 106.774 cv
312.365 107.262 li
312.388 107.049 312.411 106.809 312.433 106.543 cv
312.516 105.544 312.571 104.207 312.513 102.876 cv
312.456 101.543 312.286 100.226 312.118 99.2472 cv
311.952 98.268 311.792 97.6267 311.792 97.6267 cv
311.792 97.6267 311.896 98.2798 311.975 99.2652 cv
312.057 100.25 312.11 101.567 312.052 102.876 cv
311.995 104.184 311.827 105.482 311.661 106.446 cv
311.571 106.971 311.485 107.39 311.424 107.666 cv
310.288 108.155 li
310.31 107.947 310.332 107.713 310.353 107.456 cv
310.437 106.457 310.492 105.12 310.434 103.788 cv
310.376 102.456 310.207 101.139 310.039 100.16 cv
309.872 99.1808 309.712 98.5395 309.712 98.5395 cv
309.712 98.5395 309.816 99.1926 309.896 100.178 cv
309.978 101.163 310.031 102.48 309.973 103.788 cv
309.915 105.097 309.747 106.395 309.581 107.359 cv
309.494 107.87 309.41 108.281 309.35 108.558 cv
308.21 109.047 li
308.232 108.845 308.254 108.617 308.274 108.369 cv
308.357 107.37 308.412 106.033 308.354 104.701 cv
308.297 103.369 308.127 102.051 307.959 101.073 cv
307.793 100.094 307.633 99.4524 307.633 99.4524 cv
307.633 99.4524 307.737 100.105 307.816 101.091 cv
307.898 102.076 307.951 103.393 307.893 104.701 cv
307.836 106.01 307.668 107.308 307.502 108.272 cv
307.417 108.769 307.335 109.173 307.275 109.449 cv
306.133 109.94 li
306.154 109.742 306.175 109.522 306.194 109.282 cv
306.278 108.283 306.333 106.946 306.275 105.614 cv
306.217 104.282 306.048 102.964 305.88 101.986 cv
305.714 101.007 305.554 100.365 305.554 100.365 cv
305.554 100.365 305.657 101.018 305.737 102.004 cv
305.819 102.989 305.872 104.306 305.814 105.614 cv
305.756 106.923 305.589 108.221 305.422 109.185 cv
305.34 109.668 305.26 110.065 305.2 110.341 cv
304.056 110.833 li
304.076 110.64 304.096 110.427 304.115 110.195 cv
304.198 109.196 304.253 107.858 304.195 106.527 cv
304.138 105.195 303.968 103.877 303.801 102.899 cv
303.634 101.919 303.474 101.278 303.474 101.278 cv
303.474 101.278 303.578 101.931 303.658 102.917 cv
303.739 103.901 303.792 105.219 303.734 106.527 cv
303.677 107.836 303.509 109.133 303.343 110.098 cv
303.263 110.57 303.184 110.958 303.125 111.233 cv
301.978 111.726 li
301.997 111.538 302.017 111.332 302.035 111.108 cv
302.119 110.108 302.174 108.771 302.116 107.44 cv
302.058 106.107 301.889 104.79 301.721 103.811 cv
301.555 102.832 301.395 102.191 301.395 102.191 cv
301.395 102.191 301.498 102.844 301.578 103.829 cv
301.66 104.814 301.713 106.132 301.655 107.44 cv
301.597 108.749 301.43 110.046 301.263 111.01 cv
301.185 111.471 301.109 111.851 301.05 112.125 cv
299.901 112.619 li
299.919 112.436 299.938 112.238 299.956 112.02 cv
300.039 111.021 300.094 109.684 300.036 108.353 cv
299.979 107.02 299.809 105.703 299.642 104.724 cv
299.475 103.745 299.315 103.104 299.315 103.104 cv
299.315 103.104 299.419 103.757 299.499 104.742 cv
299.58 105.727 299.633 107.045 299.575 108.353 cv
299.518 109.661 299.35 110.959 299.184 111.923 cv
299.107 112.373 299.033 112.744 298.975 113.016 cv
297.823 113.511 li
297.841 113.334 297.859 113.143 297.877 112.933 cv
297.96 111.934 298.015 110.597 297.957 109.265 cv
297.9 107.933 297.73 106.616 297.562 105.637 cv
297.396 104.658 297.236 104.017 297.236 104.017 cv
297.236 104.017 297.339 104.67 297.419 105.655 cv
297.501 106.64 297.554 107.957 297.496 109.265 cv
297.438 110.574 297.271 111.872 297.104 112.836 cv
297.03 113.275 296.957 113.638 296.9 113.908 cv
295.746 114.404 li
295.763 114.232 295.781 114.048 295.797 113.846 cv
295.881 112.847 295.935 111.51 295.877 110.178 cv
295.82 108.846 295.65 107.529 295.483 106.55 cv
295.316 105.571 295.156 104.929 295.156 104.929 cv
295.156 104.929 295.26 105.582 295.34 106.568 cv
295.421 107.553 295.474 108.87 295.416 110.178 cv
295.359 111.487 295.191 112.785 295.025 113.749 cv
294.952 114.177 294.882 114.532 294.825 114.8 cv
293.668 115.297 li
293.685 115.13 293.702 114.953 293.718 114.759 cv
293.801 113.76 293.856 112.423 293.798 111.091 cv
293.741 109.759 293.571 108.441 293.403 107.463 cv
293.237 106.484 293.077 105.842 293.077 105.842 cv
293.077 105.842 293.18 106.495 293.26 107.481 cv
293.342 108.465 293.395 109.783 293.337 111.091 cv
293.28 112.4 293.112 113.698 292.946 114.662 cv
292.875 115.078 292.806 115.425 292.75 115.691 cv
291.591 116.19 li
291.607 116.028 291.623 115.858 291.638 115.672 cv
291.722 114.673 291.776 113.335 291.718 112.004 cv
291.661 110.672 291.491 109.354 291.324 108.376 cv
291.157 107.396 290.997 106.755 290.997 106.755 cv
290.997 106.755 291.101 107.408 291.181 108.394 cv
291.262 109.378 291.315 110.696 291.257 112.004 cv
291.2 113.313 291.032 114.61 290.866 115.575 cv
290.797 115.98 290.73 116.32 290.675 116.583 cv
289.513 117.083 li
289.529 116.927 289.544 116.763 289.559 116.585 cv
289.642 115.586 289.697 114.248 289.639 112.917 cv
289.582 111.584 289.412 110.267 289.244 109.288 cv
289.078 108.309 288.918 107.668 288.918 107.668 cv
288.918 107.668 289.021 108.321 289.101 109.307 cv
289.183 110.291 289.236 111.609 289.178 112.917 cv
289.12 114.226 288.953 115.523 288.786 116.487 cv
288.719 116.882 288.654 117.215 288.6 117.475 cv
287.436 117.975 li
287.45 117.825 287.465 117.668 287.479 117.497 cv
287.563 116.498 287.617 115.161 287.559 113.829 cv
287.502 112.497 287.332 111.18 287.165 110.201 cv
286.998 109.222 286.838 108.581 286.838 108.581 cv
286.838 108.581 286.942 109.234 287.022 110.219 cv
287.103 111.204 287.156 112.521 287.098 113.829 cv
287.041 115.138 286.873 116.436 286.707 117.4 cv
286.642 117.784 286.578 118.109 286.525 118.367 cv
285.358 118.868 li
285.372 118.724 285.386 118.573 285.4 118.41 cv
285.483 117.411 285.538 116.074 285.48 114.742 cv
285.423 113.41 285.253 112.093 285.085 111.114 cv
284.919 110.135 284.759 109.494 284.759 109.494 cv
284.759 109.494 284.862 110.147 284.942 111.132 cv
285.024 112.117 285.077 113.434 285.019 114.742 cv
284.961 116.051 284.794 117.349 284.628 118.313 cv
284.564 118.685 284.502 119.005 284.45 119.258 cv
283.281 119.761 li
283.294 119.623 283.307 119.479 283.32 119.323 cv
283.404 118.324 283.459 116.987 283.4 115.655 cv
283.343 114.323 283.174 113.006 283.006 112.027 cv
282.839 111.048 282.679 110.406 282.679 110.406 cv
282.679 110.406 282.783 111.06 282.863 112.045 cv
282.944 113.03 282.997 114.347 282.939 115.655 cv
282.882 116.964 282.714 118.262 282.548 119.226 cv
282.487 119.587 282.426 119.9 282.375 120.15 cv
281.203 120.654 li
281.216 120.521 281.229 120.384 281.241 120.236 cv
281.324 119.237 281.379 117.9 281.321 116.568 cv
281.264 115.236 281.094 113.918 280.926 112.94 cv
280.76 111.961 280.6 111.319 280.6 111.319 cv
280.6 111.319 280.703 111.972 280.783 112.958 cv
280.865 113.942 280.918 115.26 280.86 116.568 cv
280.803 117.877 280.635 119.175 280.469 120.139 cv
280.409 120.491 280.35 120.795 280.299 121.042 cv
279.126 121.547 li
279.138 121.42 279.15 121.289 279.161 121.149 cv
279.245 120.15 279.3 118.813 279.241 117.481 cv
279.184 116.149 279.015 114.831 278.847 113.853 cv
278.68 112.873 278.52 112.232 278.52 112.232 cv
278.52 112.232 278.624 112.885 278.704 113.871 cv
278.785 114.855 278.839 116.173 278.78 117.481 cv
278.723 118.79 278.555 120.088 278.389 121.052 cv
278.331 121.394 278.274 121.691 278.224 121.934 cv
277.048 122.439 li
277.06 122.319 277.071 122.194 277.082 122.062 cv
277.165 121.063 277.22 119.725 277.162 118.394 cv
277.105 117.061 276.935 115.744 276.767 114.766 cv
276.601 113.786 276.441 113.145 276.441 113.145 cv
276.441 113.145 276.544 113.798 276.624 114.784 cv
276.706 115.768 276.759 117.086 276.701 118.394 cv
276.644 119.703 276.476 121 276.31 121.964 cv
276.253 122.298 276.198 122.586 276.149 122.826 cv
274.971 123.332 li
274.982 123.218 274.992 123.099 275.002 122.975 cv
275.086 121.976 275.141 120.638 275.082 119.307 cv
275.025 117.974 274.856 116.657 274.688 115.678 cv
274.521 114.699 274.361 114.058 274.361 114.058 cv
274.361 114.058 274.465 114.711 274.545 115.696 cv
274.626 116.681 274.68 117.999 274.621 119.307 cv
274.564 120.616 274.396 121.913 274.23 122.877 cv
274.175 123.201 274.121 123.482 274.074 123.718 cv
272.893 124.225 li
272.903 124.117 272.913 124.005 272.923 123.887 cv
273.006 122.888 273.061 121.551 273.003 120.219 cv
272.946 118.887 272.776 117.57 272.608 116.591 cv
272.442 115.612 272.282 114.971 272.282 114.971 cv
272.282 114.971 272.385 115.624 272.465 116.609 cv
272.547 117.594 272.6 118.911 272.542 120.219 cv
272.485 121.528 272.317 122.826 272.151 123.79 cv
272.097 124.105 272.045 124.378 271.998 124.61 cv
270.815 125.118 li
270.825 125.016 270.834 124.911 270.843 124.8 cv
270.927 123.801 270.982 122.464 270.923 121.132 cv
270.866 119.8 270.697 118.482 270.529 117.504 cv
270.362 116.525 270.203 115.883 270.203 115.883 cv
270.203 115.883 270.306 116.536 270.386 117.522 cv
270.467 118.507 270.521 119.824 270.462 121.132 cv
270.405 122.441 270.237 123.739 270.071 124.703 cv
270.019 125.008 269.969 125.274 269.923 125.501 cv
268.738 126.011 li
268.747 125.914 268.755 125.817 268.764 125.713 cv
268.847 124.714 268.902 123.377 268.844 122.045 cv
268.787 120.713 268.617 119.395 268.449 118.417 cv
268.283 117.438 268.123 116.796 268.123 116.796 cv
268.123 116.796 268.227 117.449 268.306 118.435 cv
268.388 119.42 268.441 120.737 268.383 122.045 cv
268.326 123.354 268.158 124.652 267.992 125.616 cv
267.941 125.912 267.892 126.17 267.848 126.393 cv
266.66 126.904 li
266.668 126.813 266.677 126.723 266.684 126.626 cv
266.768 125.627 266.823 124.289 266.764 122.958 cv
266.707 121.626 266.538 120.308 266.37 119.33 cv
266.204 118.35 266.044 117.709 266.044 117.709 cv
266.044 117.709 266.147 118.362 266.227 119.348 cv
266.309 120.332 266.362 121.65 266.303 122.958 cv
266.246 124.267 266.078 125.564 265.912 126.529 cv
265.863 126.815 265.816 127.067 265.772 127.285 cv
264.582 127.797 li
264.59 127.712 264.598 127.629 264.605 127.539 cv
264.688 126.54 264.743 125.202 264.685 123.871 cv
264.628 122.538 264.458 121.221 264.29 120.243 cv
264.124 119.263 263.964 118.622 263.964 118.622 cv
263.964 118.622 264.068 119.275 264.147 120.26 cv
264.229 121.245 264.282 122.563 264.224 123.871 cv
264.167 125.18 263.999 126.477 263.833 127.441 cv
263.786 127.719 263.74 127.963 263.697 128.177 cv
263.293 128.351 li
263.143 128.59 262.745 128.465 262.174 128.083 cv
262.321 127.24 262.485 125.95 262.485 124.312 cv
262.485 121.351 260.6 118.12 260.6 118.12 cv
247.677 103.85 li
241.215 104.389 li
237.984 105.196 li
237.984 105.196 257.639 128.889 259.254 131.312 cv
260.87 133.736 263.831 131.851 263.831 131.851 cv
367.757 85.5421 li
361.026 86.3498 li
360.139 86.7309 li
360.176 86.4391 360.221 86.0332 360.261 85.5482 cv
360.268 85.4601 360.274 85.3566 360.28 85.2635 cv
381.757 82.042 li
378.796 79.3496 li
379.917 69.4863 li
380.469 69.3449 381.022 69.1981 381.578 69.0361 cv
381.863 68.9497 382.145 68.871 382.437 68.7693 cv
382.883 68.6166 li
383.396 68.4098 li
383.602 68.2905 384.091 68.1354 384.435 67.5531 cv
384.518 67.4206 384.572 67.2248 384.61 67.0575 cv
384.626 66.8911 384.624 66.7022 384.594 66.5531 cv
cp
f
301.464 99.4502 mo
299.759 100.162 297.985 100.87 296.204 101.64 cv
294.419 102.401 292.606 103.174 290.793 103.947 cv
288.988 104.739 287.184 105.531 285.407 106.311 cv
283.628 107.085 281.896 107.89 280.21 108.646 cv
276.844 110.174 273.717 111.633 271.051 112.916 cv
268.379 114.185 266.184 115.315 264.632 116.072 cv
263.088 116.846 262.216 117.312 262.216 117.312 cv
262.216 117.312 263.152 116.995 264.774 116.4 cv
266.388 115.788 268.715 114.962 271.47 113.884 cv
274.23 112.819 277.435 111.54 280.853 110.133 cv
282.558 109.422 284.331 108.711 286.113 107.944 cv
287.898 107.184 289.712 106.411 291.525 105.638 cv
293.33 104.846 295.134 104.054 296.911 103.275 cv
298.691 102.504 300.422 101.696 302.109 100.941 cv
305.475 99.4147 308.601 97.9545 311.267 96.6714 cv
313.94 95.4031 316.134 94.2709 317.686 93.5137 cv
319.23 92.7393 320.102 92.273 320.102 92.273 cv
320.102 92.273 319.165 92.5892 317.543 93.1842 cv
315.929 93.7963 313.601 94.6202 310.847 95.6993 cv
308.086 96.7637 304.881 98.0421 301.464 99.4502 cv
cp
f
289.442 245.968 mo
267.417 245.968 248.953 242.863 243.844 238.673 cv
243.417 238.983 243.079 239.265 242.821 239.504 cv
245.807 244.238 265.534 247.895 289.442 247.895 cv
315.414 247.895 336.469 243.58 336.469 238.257 cv
336.469 237.935 336.384 237.616 336.231 237.302 cv
333.853 242.168 313.814 245.968 289.442 245.968 cv
cp
f
357.762 176.132 mo
358.306 176.193 358.94 176.286 359.575 176.469 cv
359.883 176.571 360.207 176.678 360.464 176.844 cv
360.537 176.878 360.583 176.93 360.642 176.971 cv
360.719 177.03 li
360.82 177.123 li
360.965 177.251 361.068 177.363 361.185 177.486 cv
362.119 178.482 362.59 179.768 362.841 180.767 cv
362.969 181.266 363.046 181.694 363.097 181.995 cv
363.118 182.133 363.135 182.24 363.147 182.32 cv
363.622 187.093 363.316 194.596 363.172 197.432 cv
364.658 197.824 365.564 199.54 366.066 201.494 cv
386.254 197.294 li
386.254 197.294 386.254 195.2 369.801 184.43 cv
368.428 183.532 366.847 182.557 365.12 181.531 cv
365.112 181.506 365.104 181.486 365.095 181.459 cv
364.977 181.138 364.805 180.681 364.555 180.143 cv
364.306 179.606 363.978 178.986 363.54 178.37 cv
363.107 177.754 362.543 177.152 361.902 176.677 cv
361.742 176.559 361.563 176.433 361.413 176.343 cv
361.296 176.27 li
361.233 176.232 361.193 176.214 361.14 176.186 cv
361.04 176.139 360.941 176.077 360.842 176.05 cv
360.446 175.895 360.067 175.848 359.705 175.797 cv
358.982 175.727 358.326 175.754 357.768 175.794 cv
356.652 175.88 355.928 176.028 355.928 176.028 cv
355.928 176.028 356.67 176.016 357.762 176.132 cv
cp
f
308.315 157.703 mo
308.315 155.6 li
355.382 179.002 li
308.315 157.703 li
cp
360.669 197.868 mo
360.834 197.781 360.993 197.707 361.15 197.643 cv
361.216 194.341 361.389 183.177 360.758 180.659 cv
360.494 179.604 359.93 178.798 359.315 178.191 cv
339.398 167.059 308.477 152.422 308.477 152.422 cv
308.477 152.422 297.409 157.807 269.888 165.585 cv
242.367 173.362 183.137 187.123 183.137 187.123 cv
195.701 197.294 237.581 212.55 237.581 212.55 cv
237.581 212.55 236.683 202.379 237.281 197.892 cv
237.88 193.405 244.76 187.422 254.632 184.43 cv
264.503 181.439 288.96 173.382 314.161 177.849 cv
332.906 181.172 342.579 195.2 342.579 195.2 cv
341.682 206.567 li
357.587 203.258 li
357.795 201.05 358.679 198.923 360.669 197.868 cv
cp
f
362.745 201.352 mo
362.745 201.352 362.837 202.27 362.963 203.879 cv
363.049 205.106 363.186 206.735 363.321 208.662 cv
363.417 208.656 363.513 208.644 363.61 208.639 cv
363.925 208.622 366.108 209.333 366.038 209.694 cv
366.1 209.373 366.144 208.956 366.165 208.473 cv
366.324 204.814 365.177 197.395 360.749 199.952 cv
357.24 201.979 357.77 206.763 358.335 210.105 cv
358.914 209.194 360.117 208.952 361.19 208.835 cv
361.667 208.782 362.147 208.755 362.626 208.719 cv
362.64 206.772 362.676 205.124 362.684 203.887 cv
362.71 202.275 362.745 201.352 362.745 201.352 cv
cp
f
363.807 216.854 mo
365.533 217.331 366.204 217.877 366.204 217.877 cv
365.833 211.565 li
365.833 211.565 364.832 210.794 363.435 210.405 cv
363.438 210.451 363.441 210.496 363.444 210.542 cv
363.568 212.45 363.691 214.581 363.807 216.854 cv
cp
f
362.621 210.235 mo
361.258 210.048 359.668 210.339 358.283 211.936 cv
358.159 217.753 li
358.159 217.753 360.688 216.63 362.649 216.664 cv
362.626 214.474 362.616 212.417 362.621 210.568 cv
362.62 210.455 362.621 210.347 362.621 210.235 cv
cp
f
366.156 227.431 mo
366.14 225.932 366.89 221.678 366.08 220.352 cv
366.08 220.352 365.338 219.142 363.893 218.562 cv
363.915 219.027 363.938 219.495 363.96 219.969 cv
364.034 221.694 364.11 223.476 364.188 225.287 cv
364.253 227.099 364.319 228.939 364.385 230.78 cv
364.434 232.621 364.483 234.462 364.532 236.274 cv
364.589 238.085 364.602 239.87 364.637 241.596 cv
364.695 245.049 364.718 248.272 364.711 251.036 cv
364.717 253.8 364.658 256.104 364.646 257.717 cv
364.62 259.33 364.585 260.252 364.585 260.252 cv
364.585 260.252 364.493 259.334 364.366 257.726 cv
364.254 256.117 364.051 253.82 363.884 251.062 cv
363.705 248.304 363.527 245.085 363.369 241.636 cv
363.296 239.911 363.198 238.129 363.141 236.317 cv
363.077 234.505 363.011 232.665 362.945 230.825 cv
362.896 228.984 362.847 227.143 362.798 225.331 cv
362.763 223.518 362.728 221.734 362.694 220.008 cv
362.685 219.422 362.677 218.845 362.669 218.273 cv
361.471 218.175 359.965 218.562 358.159 219.981 cv
357.523 220.481 358.315 226.278 358.334 227.055 cv
358.476 232.81 358.618 238.565 358.76 244.319 cv
358.891 249.658 359.164 255.021 358.916 260.342 cv
358.815 262.499 358.731 264.749 359.616 266.719 cv
360.025 267.629 360.625 268.438 361.139 269.293 cv
363.564 273.33 363.989 278.217 364.354 282.912 cv
368.135 270.263 366.468 256.488 366.328 243.472 cv
366.271 238.125 366.214 232.778 366.156 227.431 cv
cp
f
247.837 194.779 mo
244.682 198.723 242.578 201.352 243.104 210.292 cv
243.104 210.292 242.052 200.038 243.104 197.671 cv
244.156 195.304 248.626 191.623 253.885 189.783 cv
259.144 187.942 263.088 187.416 263.088 187.416 cv
263.088 187.416 250.992 190.834 247.837 194.779 cv
cp
333.826 191.1 mo
333.372 199.03 331.778 226.91 331.778 228.025 cv
331.778 229.162 330.123 196.524 329.706 188.281 cv
323.855 184.621 315.565 180.82 305.486 179.943 cv
284.845 178.148 268.99 183.832 259.119 185.926 cv
249.247 188.02 242.068 193.106 240.572 195.798 cv
239.076 198.49 239.376 204.174 239.376 204.174 cv
242.068 237.977 li
242.068 237.977 245.658 232.293 263.606 230.797 cv
281.554 229.302 300.999 240.669 300.999 240.669 cv
300.999 240.669 301.298 239.472 311.768 234.985 cv
322.238 230.498 336.596 233.49 336.596 233.49 cv
339.289 195.798 li
339.289 195.798 337.358 193.74 333.826 191.1 cv
cp
f
215.471 318.112 mo
215.41 318.525 215.411 318.951 215.378 319.38 cv
215.36 319.81 215.393 320.247 215.399 320.688 cv
215.433 321.127 215.502 321.569 215.553 322.014 cv
215.864 323.342 li
216.281 324.59 li
216.45 325.004 216.61 325.426 216.788 325.83 cv
217.151 326.631 217.544 327.402 217.96 328.129 cv
218.15 328.46 218.344 328.779 218.54 329.092 cv
218.114 328.55 217.687 327.974 217.272 327.357 cv
216.818 326.681 216.383 325.961 215.98 325.209 cv
215.773 324.835 215.607 324.448 215.415 324.064 cv
215.233 323.675 215.082 323.25 214.914 322.845 cv
214.772 322.458 214.664 322.03 214.537 321.625 cv
214.441 321.209 214.376 320.786 214.294 320.369 cv
214.258 319.946 214.216 319.525 214.19 319.107 cv
214.196 318.689 214.182 318.274 214.204 317.867 cv
214.254 317.052 214.354 316.265 214.501 315.527 cv
214.648 314.789 214.828 314.097 215.025 313.468 cv
215.418 312.209 215.86 311.195 216.193 310.499 cv
216.529 309.803 216.758 309.424 216.758 309.424 cv
216.758 309.424 216.51 309.791 216.139 310.471 cv
215.769 311.151 215.275 312.145 214.814 313.396 cv
214.583 314.021 214.365 314.711 214.178 315.454 cv
213.99 316.198 213.848 316.996 213.753 317.832 cv
213.71 318.25 213.702 318.679 213.675 319.112 cv
213.679 319.546 213.7 319.987 213.717 320.431 cv
213.78 320.871 213.825 321.32 213.905 321.765 cv
214.019 322.206 214.105 322.643 214.245 323.093 cv
214.394 323.511 214.518 323.928 214.688 324.346 cv
214.867 324.76 215.027 325.189 215.222 325.586 cv
215.6 326.388 216.013 327.157 216.448 327.88 cv
216.606 328.143 216.768 328.393 216.93 328.644 cv
216.535 328.155 216.139 327.642 215.753 327.091 cv
215.281 326.42 214.828 325.703 214.41 324.951 cv
213.994 324.203 213.626 323.43 213.295 322.589 cv
213.126 322.201 213.029 321.771 212.891 321.364 cv
212.765 320.951 212.715 320.521 212.623 320.102 cv
212.558 319.68 212.538 319.253 212.492 318.834 cv
212.49 318.411 212.488 317.994 212.487 317.584 cv
212.522 317.174 212.543 316.769 212.588 316.375 cv
212.651 315.983 212.695 315.595 212.77 315.224 cv
212.919 314.479 213.099 313.783 213.298 313.148 cv
213.697 311.88 214.15 310.861 214.494 310.163 cv
214.839 309.464 215.075 309.086 215.075 309.086 cv
215.075 309.086 214.82 309.452 214.439 310.134 cv
214.061 310.816 213.554 311.815 213.087 313.076 cv
212.854 313.707 212.636 314.403 212.447 315.152 cv
212.351 315.527 212.287 315.92 212.202 316.318 cv
212.136 316.719 212.093 317.133 212.036 317.554 cv
212.013 317.977 211.989 318.409 211.977 318.846 cv
212.001 319.283 212.001 319.729 212.048 320.175 cv
212.12 320.618 212.152 321.073 212.263 321.516 cv
212.386 321.956 212.464 322.406 212.629 322.845 cv
212.908 323.678 213.262 324.536 213.659 325.342 cv
214.053 326.145 214.486 326.911 214.94 327.63 cv
215.064 327.827 215.191 328.012 215.316 328.201 cv
214.954 327.765 214.592 327.311 214.238 326.826 cv
213.748 326.159 213.276 325.445 212.844 324.693 cv
212.407 323.943 212.023 323.179 211.679 322.334 cv
211.35 321.531 211.103 320.687 210.955 319.837 cv
210.861 319.415 210.856 318.983 210.801 318.561 cv
210.768 318.138 210.787 317.716 210.776 317.302 cv
210.796 316.888 210.834 316.482 210.862 316.082 cv
210.923 315.686 210.982 315.298 211.04 314.921 cv
211.19 314.171 211.369 313.468 211.571 312.829 cv
211.976 311.551 212.441 310.526 212.794 309.826 cv
213.148 309.125 213.392 308.747 213.392 308.747 cv
213.392 308.747 213.13 309.113 212.74 309.797 cv
212.351 310.481 211.833 311.485 211.36 312.756 cv
211.124 313.392 210.907 314.095 210.717 314.851 cv
210.638 315.234 210.558 315.627 210.476 316.028 cv
210.426 316.435 210.366 316.852 210.326 317.277 cv
210.314 317.705 210.274 318.141 210.287 318.582 cv
210.32 319.022 210.305 319.474 210.38 319.921 cv
210.492 320.82 210.705 321.721 211.016 322.597 cv
211.307 323.432 211.685 324.3 212.1 325.099 cv
212.51 325.902 212.963 326.665 213.435 327.381 cv
213.525 327.518 213.618 327.645 213.709 327.778 cv
213.378 327.39 213.047 326.989 212.726 326.56 cv
212.465 326.233 212.225 325.885 211.983 325.53 cv
211.731 325.181 211.506 324.811 211.281 324.436 cv
211.041 324.066 210.842 323.68 210.639 323.293 cv
210.425 322.916 210.248 322.495 210.066 322.08 cv
209.864 321.663 209.752 321.271 209.609 320.844 cv
209.449 320.432 209.384 319.998 209.288 319.573 cv
209.117 318.72 209.065 317.857 209.07 317.022 cv
209.069 316.604 209.121 316.194 209.143 315.792 cv
209.189 315.391 209.257 315.001 209.31 314.619 cv
209.393 314.242 209.474 313.876 209.552 313.521 cv
209.652 313.172 209.749 312.834 209.842 312.509 cv
210.253 311.221 210.731 310.192 211.094 309.489 cv
211.458 308.786 211.709 308.408 211.709 308.408 cv
211.709 308.408 211.44 308.773 211.04 309.46 cv
210.642 310.146 210.111 311.155 209.632 312.437 cv
209.514 312.757 209.407 313.097 209.287 313.447 cv
209.19 313.803 209.089 314.172 208.986 314.551 cv
208.912 314.937 208.824 315.333 208.756 315.741 cv
208.713 316.152 208.64 316.572 208.619 317.003 cv
208.571 317.864 208.58 318.764 208.716 319.667 cv
208.793 320.117 208.842 320.579 208.987 321.021 cv
209.106 321.456 209.23 321.94 209.406 322.35 cv
209.567 322.773 209.72 323.197 209.93 323.618 cv
210.124 324.04 210.318 324.463 210.544 324.855 cv
210.76 325.255 210.975 325.652 211.217 326.025 cv
211.45 326.405 211.682 326.78 211.934 327.13 cv
211.98 327.198 212.028 327.26 212.074 327.326 cv
212.051 327.3 212.028 327.277 212.006 327.25 cv
211.735 326.948 211.473 326.628 211.217 326.295 cv
210.95 325.969 210.694 325.626 210.449 325.27 cv
210.191 324.921 209.949 324.557 209.721 324.179 cv
209.475 323.809 209.257 323.427 209.054 323.037 cv
208.834 322.659 208.638 322.249 208.456 321.826 cv
208.367 321.623 208.257 321.398 208.185 321.214 cv
207.971 320.585 li
207.81 320.171 207.712 319.74 207.624 319.31 cv
207.429 318.454 207.367 317.583 207.364 316.742 cv
207.364 315.9 207.458 315.086 207.585 314.319 cv
207.655 313.937 207.746 313.569 207.822 313.211 cv
207.923 312.858 208.02 312.517 208.114 312.19 cv
208.327 311.543 208.549 310.958 208.77 310.449 cv
208.994 309.941 209.207 309.506 209.393 309.153 cv
209.767 308.447 210.026 308.069 210.026 308.069 cv
210.026 308.069 209.749 308.434 209.339 309.122 cv
209.135 309.467 208.9 309.893 208.65 310.393 cv
208.404 310.895 208.151 311.473 207.903 312.117 cv
207.792 312.444 207.676 312.784 207.556 313.137 cv
207.462 313.497 207.351 313.867 207.26 314.253 cv
207.093 315.028 206.955 315.859 206.913 316.729 cv
206.873 317.598 206.893 318.508 207.053 319.415 cv
207.124 319.871 207.205 320.329 207.353 320.774 cv
207.548 321.45 li
207.631 321.694 207.715 321.884 207.799 322.103 cv
207.958 322.529 208.135 322.953 208.351 323.376 cv
208.548 323.804 208.759 324.219 208.992 324.611 cv
209.211 325.015 209.443 325.406 209.692 325.779 cv
209.925 326.155 210.169 326.516 210.423 326.861 cv
210.182 326.593 209.94 326.321 209.71 326.029 cv
209.439 325.702 209.169 325.366 208.918 325.009 cv
208.656 324.66 208.397 324.301 208.164 323.923 cv
207.916 323.551 207.677 323.173 207.471 322.781 cv
207.248 322.398 207.034 322.001 206.849 321.573 cv
206.558 320.946 li
206.483 320.761 206.411 320.532 206.336 320.327 cv
206.114 319.696 li
205.962 319.048 li
205.915 318.832 205.858 318.618 205.819 318.402 cv
205.792 318.184 205.766 317.967 205.74 317.751 cv
205.67 317.32 205.668 316.889 205.66 316.464 cv
205.643 315.615 205.735 314.792 205.859 314.02 cv
205.993 313.247 206.184 312.529 206.385 311.872 cv
206.601 311.219 206.828 310.631 207.053 310.118 cv
207.283 309.607 207.501 309.17 207.692 308.816 cv
208.077 308.108 208.344 307.73 208.344 307.73 cv
208.344 307.73 208.059 308.094 207.639 308.785 cv
207.43 309.131 207.19 309.559 206.934 310.062 cv
206.683 310.567 206.425 311.149 206.175 311.798 cv
205.938 312.453 205.709 313.173 205.535 313.955 cv
205.369 314.738 205.234 315.578 205.208 316.457 cv
205.195 316.896 205.176 317.344 205.226 317.796 cv
205.243 318.023 205.26 318.251 205.277 318.48 cv
205.307 318.708 205.355 318.935 205.394 319.164 cv
205.521 319.852 li
205.721 320.528 li
205.793 320.758 205.847 320.972 205.934 321.217 cv
206.194 321.857 li
206.355 322.285 206.556 322.71 206.775 323.134 cv
206.976 323.565 207.206 323.971 207.443 324.367 cv
207.667 324.773 207.917 325.157 208.171 325.532 cv
208.375 325.854 208.597 326.156 208.818 326.454 cv
208.614 326.228 208.409 326.003 208.207 325.763 cv
207.651 325.113 207.108 324.412 206.61 323.666 cv
206.361 323.292 206.101 322.918 205.89 322.525 cv
205.667 322.136 205.434 321.753 205.245 321.321 cv
204.945 320.691 li
204.87 320.534 li
204.818 320.388 li
204.704 320.07 li
204.548 319.647 204.386 319.226 204.303 318.787 cv
204.147 318.138 li
204.105 317.92 204.087 317.7 204.056 317.483 cv
204.029 317.265 204.002 317.048 203.975 316.833 cv
203.969 316.616 203.963 316.4 203.957 316.186 cv
203.923 315.331 204.011 314.5 204.134 313.721 cv
204.261 312.941 204.454 312.216 204.658 311.554 cv
204.873 310.895 205.108 310.303 205.336 309.786 cv
205.572 309.274 205.794 308.834 205.991 308.478 cv
206.386 307.768 206.661 307.392 206.661 307.392 cv
206.661 307.392 206.368 307.755 205.938 308.447 cv
205.724 308.794 205.479 309.225 205.217 309.73 cv
204.963 310.239 204.697 310.824 204.448 311.48 cv
204.209 312.14 203.977 312.868 203.809 313.659 cv
203.645 314.448 203.514 315.298 203.505 316.185 cv
203.501 316.407 203.497 316.631 203.492 316.857 cv
203.509 317.082 203.526 317.309 203.543 317.537 cv
203.565 317.765 203.573 317.996 203.607 318.225 cv
203.736 318.913 li
203.803 319.379 203.95 319.829 204.093 320.283 cv
204.198 320.624 li
204.257 320.808 li
204.324 320.968 li
204.593 321.612 li
204.757 322.042 204.984 322.467 205.202 322.892 cv
205.409 323.326 205.658 323.723 205.897 324.123 cv
206.298 324.79 206.736 325.417 207.184 326.016 cv
207.025 325.844 206.865 325.677 206.707 325.497 cv
206.135 324.85 205.577 324.151 205.059 323.409 cv
204.532 322.66 204.065 321.905 203.643 321.069 cv
203.443 320.635 203.21 320.245 203.074 319.813 cv
202.925 319.385 202.73 318.97 202.645 318.526 cv
202.539 318.089 202.412 317.657 202.374 317.215 cv
202.307 316.777 202.252 316.342 202.255 315.91 cv
202.248 315.694 202.242 315.48 202.236 315.268 cv
202.248 315.056 202.261 314.845 202.273 314.638 cv
202.284 314.22 202.351 313.817 202.409 313.422 cv
202.528 312.635 202.724 311.903 202.931 311.236 cv
203.146 310.571 203.387 309.976 203.619 309.456 cv
203.859 308.939 204.088 308.498 204.289 308.141 cv
204.695 307.429 204.978 307.053 204.978 307.053 cv
204.978 307.053 204.677 307.415 204.237 308.11 cv
204.018 308.458 203.767 308.89 203.5 309.398 cv
203.242 309.911 202.97 310.5 202.721 311.163 cv
202.479 311.828 202.244 312.563 202.083 313.362 cv
202.005 313.763 201.917 314.173 201.885 314.602 cv
201.862 314.816 201.839 315.032 201.816 315.25 cv
201.811 315.47 201.807 315.691 201.803 315.915 cv
201.78 316.364 201.814 316.818 201.862 317.278 cv
201.882 317.742 201.991 318.198 202.081 318.663 cv
202.272 319.574 202.612 320.526 202.994 321.366 cv
203.136 321.685 203.302 322.004 203.467 322.323 cv
202.937 321.702 202.381 321.03 201.801 320.304 cv
201.476 319.634 201.196 318.969 200.99 318.266 cv
200.745 317.392 200.585 316.504 200.553 315.634 cv
200.529 315.199 200.518 314.77 200.557 314.351 cv
200.568 313.93 200.619 313.521 200.684 313.125 cv
200.795 312.329 200.994 311.59 201.203 310.918 cv
201.418 310.247 201.665 309.648 201.902 309.125 cv
202.146 308.605 202.382 308.162 202.587 307.804 cv
203.004 307.089 203.295 306.714 203.295 306.714 cv
203.295 306.714 202.987 307.075 202.535 307.772 cv
202.312 308.121 202.054 308.554 201.783 309.067 cv
201.521 309.582 201.242 310.175 200.993 310.845 cv
200.748 311.516 200.51 312.258 200.358 313.067 cv
200.272 313.47 200.2 313.887 200.169 314.32 cv
200.108 314.75 200.098 315.194 200.102 315.646 cv
200.092 316.549 200.214 317.484 200.428 318.414 cv
200.444 318.48 200.465 318.547 200.483 318.614 cv
200.006 317.989 199.516 317.331 199.009 316.635 cv
198.932 316.208 198.877 315.782 198.854 315.359 cv
198.836 314.921 198.801 314.488 198.842 314.065 cv
198.853 313.853 198.865 313.643 198.876 313.436 cv
198.897 313.23 198.932 313.028 198.959 312.827 cv
199.061 312.023 199.263 311.278 199.475 310.601 cv
199.909 309.246 200.462 308.182 200.886 307.466 cv
201.312 306.749 201.612 306.376 201.612 306.376 cv
201.612 306.376 201.295 306.735 200.834 307.434 cv
200.375 308.132 199.769 309.174 199.264 310.527 cv
199.017 311.204 198.776 311.954 198.633 312.772 cv
198.595 312.976 198.55 313.182 198.518 313.393 cv
198.497 313.606 198.475 313.821 198.453 314.038 cv
198.391 314.473 198.405 314.921 198.402 315.377 cv
198.404 315.525 198.414 315.674 198.422 315.822 cv
198.416 315.814 198.41 315.806 198.404 315.798 cv
198.404 315.798 198.42 316.036 198.476 316.464 cv
198.518 316.844 198.578 317.225 198.656 317.608 cv
199.098 320.034 200.28 324.536 203.348 328.831 cv
207.842 335.123 211.887 337.37 211.887 337.37 cv
258.177 347.257 li
258.177 347.257 255.93 341.864 255.031 333.325 cv
254.133 324.786 259.076 314.899 259.076 314.899 cv
259.076 314.899 254.133 320.292 252.784 327.033 cv
252.279 329.558 251.9 331.704 251.624 333.401 cv
251.584 332.759 251.544 332.109 251.52 331.438 cv
251.491 330.657 251.479 329.918 251.53 329.139 cv
251.617 327.597 251.835 326.05 252.078 324.608 cv
252.322 323.166 252.599 321.825 252.852 320.679 cv
253.361 318.388 253.78 316.877 253.78 316.877 cv
253.78 316.877 253.271 318.359 252.624 320.621 cv
252.301 321.753 251.943 323.079 251.61 324.515 cv
251.278 325.951 250.964 327.496 250.779 329.075 cv
250.68 329.854 250.639 330.685 250.631 331.444 cv
250.617 332.218 250.622 332.988 250.631 333.724 cv
250.654 335.201 250.709 336.577 250.77 337.756 cv
250.771 337.763 250.771 337.768 250.771 337.775 cv
250.569 337.733 li
250.549 337.597 250.53 337.465 250.51 337.323 cv
250.346 336.164 250.173 334.81 250.031 333.355 cv
249.962 332.625 249.899 331.879 249.853 331.112 cv
249.807 330.33 249.776 329.59 249.821 328.81 cv
249.889 327.265 250.102 325.715 250.345 324.271 cv
250.59 322.826 250.873 321.484 251.134 320.338 cv
251.659 318.046 252.097 316.538 252.097 316.538 cv
252.097 316.538 251.574 318.018 250.918 320.282 cv
250.592 321.415 250.232 322.743 249.902 324.183 cv
249.736 324.902 249.579 325.65 249.443 326.417 cv
249.307 327.182 249.184 327.966 249.109 328.759 cv
249.017 329.542 249.004 330.375 249.006 331.135 cv
249.009 331.911 249.03 332.683 249.058 333.421 cv
249.117 334.9 249.214 336.278 249.313 337.458 cv
249.313 337.463 249.314 337.468 249.314 337.473 cv
249.12 337.433 li
249.094 337.287 249.067 337.142 249.04 336.988 cv
248.837 335.834 248.622 334.484 248.441 333.031 cv
248.352 332.302 248.271 331.557 248.208 330.791 cv
248.147 330.009 248.097 329.268 248.134 328.487 cv
248.149 327.715 248.219 326.938 248.306 326.176 cv
248.391 325.413 248.501 324.663 248.624 323.939 cv
248.867 322.491 249.154 321.147 249.421 320 cv
249.958 317.706 250.414 316.199 250.414 316.199 cv
250.414 316.199 249.874 317.677 249.206 319.944 cv
248.873 321.077 248.509 322.408 248.181 323.852 cv
248.015 324.573 247.861 325.324 247.731 326.094 cv
247.599 326.863 247.483 327.65 247.421 328.447 cv
247.338 329.235 247.346 330.07 247.362 330.832 cv
247.382 331.611 247.422 332.384 247.47 333.123 cv
247.569 334.605 247.709 335.984 247.848 337.163 cv
247.849 337.166 247.849 337.168 247.849 337.17 cv
247.673 337.134 li
247.639 336.978 247.605 336.822 247.571 336.657 cv
247.329 335.509 247.072 334.163 246.852 332.713 cv
246.744 331.986 246.645 331.241 246.566 330.476 cv
246.488 329.693 246.424 328.951 246.447 328.17 cv
246.446 327.783 246.463 327.395 246.494 327.008 cv
246.513 326.621 246.551 326.236 246.594 325.853 cv
246.672 325.088 246.78 324.336 246.903 323.611 cv
247.144 322.159 247.435 320.813 247.708 319.664 cv
248.257 317.366 248.732 315.861 248.732 315.861 cv
248.732 315.861 248.173 317.336 247.492 319.606 cv
247.154 320.741 246.786 322.075 246.46 323.524 cv
246.294 324.248 246.142 325.002 246.019 325.776 cv
245.953 326.161 245.893 326.552 245.85 326.948 cv
245.796 327.341 245.756 327.74 245.734 328.141 cv
245.664 328.934 245.688 329.771 245.721 330.534 cv
245.758 331.316 245.816 332.091 245.884 332.831 cv
246.023 334.313 246.206 335.69 246.385 336.867 cv
246.23 336.835 li
246.188 336.666 246.146 336.51 246.102 336.33 cv
245.822 335.188 245.523 333.847 245.266 332.401 cv
245.137 331.675 245.022 330.93 244.925 330.167 cv
244.83 329.383 244.754 328.639 244.762 327.858 cv
244.759 327.47 244.764 327.081 244.793 326.693 cv
244.81 326.305 244.839 325.918 244.883 325.535 cv
244.952 324.767 245.061 324.013 245.181 323.285 cv
245.42 321.829 245.715 320.479 245.993 319.329 cv
246.556 317.027 247.049 315.522 247.049 315.522 cv
247.049 315.522 246.472 316.996 245.778 319.27 cv
245.434 320.407 245.061 321.745 244.738 323.2 cv
244.575 323.927 244.422 324.684 244.307 325.462 cv
244.24 325.849 244.188 326.242 244.149 326.64 cv
244.096 327.036 244.068 327.437 244.048 327.84 cv
243.993 328.639 244.032 329.476 244.081 330.241 cv
244.137 331.027 244.212 331.802 244.301 332.543 cv
244.478 334.022 244.703 335.392 244.921 336.565 cv
244.788 336.537 li
244.737 336.361 244.687 336.194 244.635 336.006 cv
244.316 334.871 243.976 333.536 243.682 332.093 cv
243.534 331.369 243.402 330.624 243.286 329.864 cv
243.175 329.079 243.085 328.331 243.078 327.55 cv
243.061 326.774 243.098 325.99 243.172 325.221 cv
243.236 324.45 243.341 323.693 243.459 322.963 cv
243.694 321.502 243.994 320.148 244.278 318.995 cv
244.854 316.688 245.366 315.183 245.366 315.183 cv
245.366 315.183 244.77 316.656 244.064 318.935 cv
243.713 320.075 243.336 321.417 243.016 322.879 cv
242.855 323.61 242.706 324.37 242.595 325.152 cv
242.476 325.932 242.392 326.734 242.364 327.544 cv
242.325 328.35 242.379 329.187 242.444 329.953 cv
242.519 330.743 242.611 331.518 242.72 332.26 cv
242.936 333.733 243.202 335.096 243.458 336.262 cv
243.347 336.239 li
243.288 336.058 243.229 335.879 243.168 335.686 cv
242.813 334.558 242.432 333.23 242.1 331.79 cv
241.932 331.069 241.785 330.322 241.651 329.565 cv
241.523 328.78 241.419 328.028 241.395 327.247 cv
241.344 325.689 241.507 324.109 241.736 322.644 cv
241.968 321.177 242.271 319.819 242.563 318.662 cv
243.152 316.35 243.683 314.844 243.683 314.844 cv
243.683 314.844 243.068 316.316 242.348 318.601 cv
241.991 319.745 241.61 321.092 241.293 322.561 cv
240.978 324.03 240.719 325.624 240.682 327.253 cv
240.66 328.066 240.728 328.901 240.81 329.669 cv
240.905 330.464 241.014 331.239 241.143 331.982 cv
241.396 333.448 241.703 334.801 241.996 335.959 cv
241.909 335.941 li
241.842 335.756 241.774 335.569 241.704 335.368 cv
241.311 334.249 240.89 332.928 240.521 331.491 cv
240.334 330.773 240.169 330.026 240.019 329.27 cv
239.872 328.487 239.756 327.729 239.715 326.949 cv
239.636 325.386 239.788 323.799 240.014 322.328 cv
240.241 320.854 240.549 319.491 240.846 318.331 cv
241.449 316.011 242 314.506 242 314.506 cv
242 314.506 241.366 315.977 240.632 318.269 cv
240.269 319.416 239.883 320.768 239.569 322.246 cv
239.258 323.723 239.011 325.328 239.001 326.967 cv
238.998 327.787 239.079 328.62 239.181 329.391 cv
239.293 330.189 239.42 330.964 239.569 331.707 cv
239.859 333.165 240.204 334.507 240.535 335.657 cv
240.473 335.644 li
240.398 335.456 240.32 335.26 240.241 335.054 cv
239.812 333.943 239.352 332.629 238.945 331.197 cv
238.739 330.481 238.556 329.734 238.391 328.979 cv
238.317 328.594 238.242 328.206 238.168 327.816 cv
238.126 327.431 238.063 327.046 238.036 326.655 cv
237.988 325.872 237.99 325.081 238.04 324.301 cv
238.09 323.521 238.179 322.754 238.29 322.014 cv
238.514 320.534 238.824 319.164 239.129 318.001 cv
239.745 315.673 240.317 314.167 240.317 314.167 cv
240.317 314.167 239.663 315.638 238.915 317.938 cv
238.544 319.089 238.156 320.448 237.845 321.934 cv
237.539 323.42 237.304 325.037 237.323 326.686 cv
237.328 327.097 237.371 327.511 237.395 327.923 cv
237.449 328.324 237.502 328.722 237.556 329.118 cv
237.684 329.918 237.83 330.693 237.999 331.437 cv
238.325 332.885 238.708 334.215 239.074 335.355 cv
239.043 335.348 li
238.956 335.151 238.87 334.957 238.78 334.743 cv
238.316 333.64 237.816 332.335 237.373 330.907 cv
237.148 330.194 236.947 329.447 236.766 328.692 cv
236.673 328.314 236.602 327.913 236.518 327.522 cv
236.46 327.148 236.407 326.752 236.359 326.365 cv
236.342 325.971 236.308 325.578 236.304 325.183 cv
236.314 324.788 236.306 324.393 236.331 324.002 cv
236.376 323.218 236.459 322.447 236.566 321.703 cv
236.786 320.216 237.099 318.839 237.412 317.672 cv
238.04 315.335 238.635 313.828 238.635 313.828 cv
238.635 313.828 237.958 315.299 237.198 317.608 cv
236.819 318.763 236.428 320.129 236.121 321.625 cv
235.971 322.374 235.843 323.154 235.752 323.955 cv
235.704 324.355 235.69 324.763 235.657 325.172 cv
235.639 325.581 235.65 325.995 235.646 326.409 cv
235.674 326.825 235.705 327.233 235.749 327.658 cv
235.812 328.057 235.859 328.449 235.934 328.848 cv
236.079 329.651 236.243 330.426 236.433 331.17 cv
236.794 332.607 237.214 333.923 237.614 335.053 cv
237.611 335.052 li
237.516 334.853 237.42 334.651 237.322 334.434 cv
236.822 333.341 236.283 332.044 235.803 330.62 cv
235.56 329.91 235.34 329.163 235.145 328.409 cv
235.039 328.036 234.965 327.63 234.873 327.239 cv
234.795 326.862 234.751 326.467 234.688 326.079 cv
234.61 324.893 li
234.614 324.495 234.618 324.099 234.622 323.706 cv
234.662 322.919 234.738 322.143 234.842 321.395 cv
234.952 320.647 235.086 319.928 235.228 319.248 cv
235.38 318.57 235.535 317.93 235.694 317.344 cv
236.335 314.998 236.952 313.489 236.952 313.489 cv
236.952 313.489 236.254 314.96 235.48 317.28 cv
235.288 317.86 235.097 318.494 234.907 319.169 cv
234.725 319.847 234.55 320.566 234.397 321.319 cv
234.25 322.073 234.128 322.859 234.043 323.666 cv
234.016 324.071 233.99 324.48 233.963 324.891 cv
233.976 326.136 li
234.02 326.553 234.044 326.968 234.107 327.387 cv
234.178 327.788 234.227 328.18 234.316 328.582 cv
234.477 329.388 234.661 330.162 234.871 330.906 cv
235.242 332.247 235.667 333.474 236.077 334.547 cv
236.007 334.408 235.938 334.275 235.865 334.128 cv
235.332 333.044 234.754 331.755 234.238 330.337 cv
233.975 329.63 233.737 328.882 233.527 328.13 cv
233.412 327.758 233.33 327.353 233.232 326.96 cv
233.134 326.58 233.096 326.185 233.023 325.795 cv
232.969 325.402 232.957 325.002 232.921 324.606 cv
232.919 324.207 232.917 323.809 232.915 323.414 cv
232.939 323.018 232.963 322.625 232.986 322.237 cv
233.031 321.849 233.074 321.466 233.117 321.089 cv
233.228 320.338 233.357 319.614 233.503 318.93 cv
233.656 318.248 233.813 317.606 233.975 317.017 cv
234.629 314.66 235.269 313.151 235.269 313.151 cv
235.269 313.151 234.548 314.621 233.762 316.952 cv
233.566 317.534 233.373 318.172 233.182 318.851 cv
232.997 319.533 232.826 320.258 232.672 321.015 cv
232.607 321.397 232.541 321.784 232.475 322.177 cv
232.429 322.573 232.382 322.975 232.335 323.38 cv
232.315 323.789 232.295 324.201 232.274 324.614 cv
232.288 325.03 232.279 325.449 232.313 325.867 cv
232.366 326.284 232.386 326.707 232.468 327.121 cv
232.545 327.522 232.603 327.916 232.702 328.32 cv
232.88 329.128 233.082 329.902 233.312 330.645 cv
233.687 331.881 234.109 333.017 234.52 334.024 cv
234.484 333.956 234.449 333.894 234.412 333.824 cv
233.844 332.75 233.229 331.47 232.676 330.056 cv
232.396 329.353 232.136 328.606 231.913 327.853 cv
231.792 327.482 231.696 327.081 231.594 326.685 cv
231.477 326.283 231.442 325.918 231.361 325.515 cv
231.241 324.726 231.208 323.92 231.214 323.124 cv
231.222 322.727 231.254 322.332 231.272 321.941 cv
231.314 321.551 231.355 321.165 231.396 320.786 cv
231.502 320.03 231.631 319.301 231.778 318.614 cv
231.93 317.928 232.09 317.283 232.256 316.691 cv
232.923 314.323 233.586 312.812 233.586 312.812 cv
233.586 312.812 232.842 314.283 232.043 316.625 cv
231.844 317.21 231.647 317.852 231.456 318.536 cv
231.27 319.221 231.1 319.951 230.95 320.715 cv
230.888 321.099 230.824 321.49 230.76 321.885 cv
230.719 322.284 230.665 322.688 230.634 323.098 cv
230.583 323.918 230.571 324.759 230.653 325.602 cv
230.709 326.009 230.74 326.466 230.833 326.857 cv
230.913 327.259 230.985 327.657 231.092 328.061 cv
231.285 328.872 231.509 329.644 231.758 330.387 cv
232.13 331.515 232.543 332.564 232.949 333.501 cv
232.352 332.442 231.703 331.179 231.118 329.779 cv
230.825 329.077 230.537 328.333 230.303 327.579 cv
230.174 327.208 230.065 326.813 229.96 326.413 cv
229.837 326.01 229.782 325.641 229.702 325.238 cv
229.429 323.655 229.483 322.006 229.675 320.486 cv
229.869 318.961 230.2 317.555 230.536 316.366 cv
231.215 313.985 231.903 312.473 231.903 312.473 cv
231.903 312.473 231.135 313.944 230.323 316.299 cv
229.921 317.476 229.51 318.876 229.229 320.417 cv
228.951 321.955 228.798 323.645 228.996 325.34 cv
229.053 325.753 229.104 326.204 229.202 326.596 cv
229.285 326.999 229.372 327.4 229.487 327.806 cv
229.693 328.62 229.943 329.387 230.208 330.13 cv
230.575 331.161 230.976 332.117 231.375 332.986 cv
230.779 331.981 230.144 330.807 229.564 329.504 cv
229.253 328.804 228.948 328.062 228.696 327.309 cv
228.561 326.936 228.438 326.548 228.329 326.144 cv
228.201 325.741 228.124 325.367 228.047 324.964 cv
227.883 324.175 227.827 323.358 227.816 322.554 cv
227.808 321.75 227.865 320.954 227.955 320.187 cv
228.14 318.653 228.473 317.237 228.815 316.041 cv
229.508 313.648 230.22 312.134 230.22 312.134 cv
230.22 312.134 229.428 313.605 228.603 315.974 cv
228.194 317.158 227.781 318.567 227.508 320.121 cv
227.374 320.898 227.272 321.71 227.236 322.544 cv
227.202 323.376 227.214 324.232 227.343 325.08 cv
227.399 325.5 227.47 325.944 227.574 326.339 cv
227.659 326.741 227.763 327.146 227.885 327.552 cv
228.11 328.366 228.379 329.134 228.662 329.876 cv
229.02 330.813 229.407 331.682 229.794 332.484 cv
229.205 331.534 228.585 330.442 228.013 329.231 cv
227.685 328.534 227.364 327.794 227.093 327.04 cv
226.955 326.665 226.816 326.284 226.702 325.878 cv
226.521 325.277 li
226.394 324.693 li
226.293 324.299 226.239 323.895 226.2 323.489 cv
226.138 323.086 226.132 322.678 226.12 322.273 cv
226.096 321.465 226.148 320.663 226.235 319.891 cv
226.41 318.346 226.745 316.92 227.094 315.718 cv
227.799 313.31 228.538 311.796 228.538 311.796 cv
228.538 311.796 227.72 313.267 226.882 315.65 cv
226.467 316.841 226.051 318.261 225.787 319.828 cv
225.657 320.611 225.559 321.431 225.54 322.271 cv
225.53 322.691 225.514 323.116 225.555 323.542 cv
225.574 323.97 225.609 324.399 225.692 324.824 cv
225.8 325.474 li
225.949 326.083 li
226.039 326.487 226.162 326.895 226.287 327.302 cv
226.532 328.114 226.819 328.883 227.12 329.624 cv
227.465 330.467 227.834 331.255 228.205 331.988 cv
227.628 331.094 227.026 330.079 226.466 328.96 cv
226.121 328.265 225.784 327.529 225.493 326.774 cv
225.352 326.395 225.197 326.023 225.079 325.614 cv
224.888 325.012 li
224.826 324.831 224.793 324.619 224.744 324.424 cv
224.607 323.826 li
224.572 323.624 224.553 323.42 224.525 323.217 cv
224.45 322.607 li
224.425 321.995 li
224.397 321.588 224.41 321.183 224.428 320.782 cv
224.431 320.381 224.475 319.986 224.515 319.597 cv
224.592 318.819 224.721 318.069 224.872 317.365 cv
225.019 316.66 225.192 315.999 225.372 315.395 cv
226.09 312.973 226.855 311.457 226.855 311.457 cv
226.855 311.457 226.011 312.928 225.16 315.326 cv
224.946 315.925 224.737 316.582 224.55 317.288 cv
224.36 317.993 224.189 318.746 224.067 319.537 cv
224.006 319.933 223.939 320.335 223.914 320.748 cv
223.874 321.159 223.838 321.577 223.845 322.001 cv
223.837 322.639 li
223.882 323.282 li
223.899 323.496 223.909 323.713 223.934 323.928 cv
224.045 324.57 li
224.088 324.786 224.108 324.996 224.17 325.218 cv
224.328 325.83 li
224.423 326.235 224.566 326.646 224.693 327.053 cv
224.958 327.864 225.263 328.633 225.583 329.373 cv
225.908 330.12 226.253 330.826 226.6 331.486 cv
226.041 330.653 225.464 329.715 224.923 328.691 cv
224.561 327.998 224.207 327.264 223.897 326.51 cv
223.599 325.777 223.286 324.936 223.097 324.158 cv
223 323.758 222.891 323.359 222.853 322.947 cv
222.791 322.539 222.738 322.13 222.732 321.719 cv
222.703 321.107 li
222.719 320.498 li
222.721 320.094 222.751 319.696 222.795 319.304 cv
222.824 318.911 222.881 318.528 222.943 318.152 cv
222.994 317.776 223.068 317.411 223.145 317.056 cv
223.29 316.346 223.466 315.68 223.649 315.073 cv
224.38 312.636 225.172 311.118 225.172 311.118 cv
225.172 311.118 224.302 312.589 223.437 315.003 cv
223.22 315.605 223.007 316.267 222.823 316.979 cv
222.727 317.335 222.631 317.701 222.559 318.081 cv
222.476 318.46 222.398 318.848 222.347 319.248 cv
222.281 319.646 222.229 320.053 222.204 320.47 cv
222.188 320.678 222.171 320.887 222.155 321.097 cv
222.152 321.734 li
222.136 322.161 222.168 322.591 222.211 323.024 cv
222.23 323.459 222.321 323.888 222.401 324.319 cv
222.573 325.202 222.819 325.973 223.104 326.806 cv
223.388 327.616 223.711 328.385 224.049 329.124 cv
224.352 329.778 224.67 330.394 224.991 330.98 cv
224.85 330.779 224.71 330.579 224.568 330.366 cv
224.171 329.761 223.771 329.111 223.384 328.423 cv
223.005 327.732 222.635 327.002 222.304 326.247 cv
221.99 325.513 221.667 324.68 221.452 323.894 cv
221.231 323.096 221.088 322.269 221.041 321.445 cv
221.016 321.033 220.988 320.623 221.011 320.216 cv
221.015 319.81 221.029 319.408 221.076 319.014 cv
221.106 318.618 221.151 318.23 221.217 317.853 cv
221.269 317.474 221.336 317.105 221.417 316.748 cv
221.486 316.389 221.567 316.043 221.658 315.711 cv
221.74 315.376 221.829 315.056 221.926 314.751 cv
222.669 312.298 223.489 310.779 223.489 310.779 cv
223.489 310.779 222.592 312.25 221.714 314.681 cv
221.6 314.983 221.493 315.302 221.393 315.635 cv
221.284 315.966 221.184 316.312 221.094 316.672 cv
220.993 317.029 220.906 317.4 220.833 317.784 cv
220.746 318.164 220.679 318.558 220.627 318.961 cv
220.559 319.363 220.523 319.775 220.496 320.194 cv
220.452 320.612 220.457 321.039 220.461 321.469 cv
220.465 322.329 220.569 323.207 220.761 324.069 cv
220.955 324.945 221.215 325.728 221.518 326.561 cv
221.822 327.368 222.163 328.138 222.519 328.875 cv
222.803 329.448 223.097 329.988 223.392 330.51 cv
223.29 330.368 223.189 330.233 223.086 330.086 cv
222.671 329.486 222.256 328.839 221.848 328.156 cv
221.656 327.809 221.459 327.456 221.261 327.098 cv
221.081 326.731 220.898 326.36 220.715 325.986 cv
220.555 325.605 220.381 325.233 220.228 324.836 cv
220.092 324.437 219.915 324.013 219.811 323.632 cv
219.577 322.83 219.415 322.002 219.351 321.173 cv
219.283 320.345 219.286 319.52 219.357 318.725 cv
219.417 317.929 219.536 317.161 219.688 316.441 cv
219.831 315.72 220.012 315.045 220.202 314.43 cv
220.576 313.196 220.984 312.197 221.291 311.508 cv
221.598 310.819 221.806 310.441 221.806 310.441 cv
221.806 310.441 221.579 310.808 221.235 311.482 cv
220.893 312.155 220.432 313.136 219.99 314.359 cv
219.767 314.97 219.549 315.642 219.366 316.366 cv
219.173 317.088 219.012 317.863 218.908 318.676 cv
218.794 319.488 218.745 320.339 218.772 321.207 cv
218.794 322.074 218.917 322.955 219.123 323.822 cv
219.226 324.278 219.367 324.66 219.487 325.081 cv
219.622 325.493 219.787 325.908 219.936 326.318 cv
220.106 326.716 220.275 327.111 220.442 327.501 cv
220.629 327.881 220.813 328.257 220.994 328.627 cv
221.255 329.121 221.521 329.59 221.789 330.047 cv
221.728 329.965 221.669 329.89 221.607 329.806 cv
221.176 329.212 220.743 328.569 220.319 327.889 cv
220.117 327.543 219.912 327.192 219.705 326.836 cv
219.515 326.47 219.323 326.1 219.13 325.727 cv
218.96 325.347 218.789 324.965 218.617 324.58 cv
218.471 324.18 218.302 323.756 218.173 323.371 cv
218.068 322.964 217.934 322.562 217.85 322.15 cv
217.791 321.733 217.692 321.321 217.663 320.903 cv
217.587 320.069 217.577 319.239 217.639 318.437 cv
217.755 316.832 218.098 315.349 218.477 314.109 cv
218.858 312.867 219.276 311.863 219.592 311.172 cv
219.909 310.481 220.123 310.102 220.123 310.102 cv
220.123 310.102 219.889 310.469 219.537 311.145 cv
219.185 311.821 218.714 312.806 218.265 314.038 cv
217.819 315.269 217.394 316.751 217.189 318.393 cv
217.084 319.213 217.049 320.072 217.084 320.946 cv
217.093 321.384 217.172 321.821 217.214 322.264 cv
217.279 322.703 217.398 323.137 217.489 323.576 cv
217.615 324.022 217.75 324.414 217.879 324.834 cv
218.04 325.25 218.2 325.664 218.358 326.075 cv
218.539 326.472 218.718 326.866 218.895 327.255 cv
219.091 327.634 219.284 328.009 219.475 328.378 cv
219.706 328.796 219.941 329.196 220.178 329.586 cv
219.714 328.98 219.246 328.325 218.794 327.622 cv
218.358 326.943 217.942 326.22 217.553 325.467 cv
217.364 325.091 217.196 324.707 217.014 324.323 cv
216.536 323.102 li
216.188 321.888 li
216.119 321.469 216.032 321.053 215.977 320.635 cv
215.951 320.215 215.897 319.797 215.894 319.382 cv
215.905 318.967 215.882 318.555 215.921 318.151 cv
216.023 316.533 216.366 315.037 216.751 313.788 cv
217.138 312.538 217.568 311.529 217.893 310.836 cv
218.219 310.142 218.441 309.763 218.441 309.763 cv
218.441 309.763 218.2 310.13 217.838 310.808 cv
217.478 311.486 216.995 312.475 216.54 313.717 cv
216.087 314.957 215.661 316.454 215.471 318.112 cv
cp
f
196.85 326.944 mo
197.559 328.407 198.436 329.769 199.409 331.044 cv
201.36 333.594 203.676 335.82 206.232 337.684 cv
207.524 338.602 208.885 339.426 210.408 340.005 cv
210.514 340.046 210.57 340.076 210.717 340.124 cv
210.984 340.206 li
211.517 340.371 li
211.865 340.484 212.241 340.578 212.607 340.678 cv
213.346 340.881 214.066 341.063 214.772 341.233 cv
217.607 341.935 220.356 342.523 222.965 343.071 cv
225.572 343.63 228.044 344.115 230.327 344.557 cv
239.457 346.331 245.594 347.257 245.594 347.257 cv
245.594 347.257 244.096 346.857 241.474 346.156 cv
238.85 345.466 235.1 344.492 230.595 343.357 cv
226.098 342.202 220.827 340.91 215.246 339.408 cv
214.544 339.221 213.849 339.026 213.171 338.823 cv
212.828 338.721 212.487 338.629 212.132 338.503 cv
211.604 338.326 li
211.338 338.237 li
211.127 338.146 li
209.869 337.625 208.63 336.858 207.442 336.008 cv
205.087 334.263 202.907 332.131 201.112 329.748 cv
200.196 328.57 199.38 327.318 198.733 326.009 cv
198.094 324.75 197.599 323.36 197.317 321.934 cv
196.768 319.081 196.704 316.15 197.141 313.382 cv
197.558 310.612 198.411 308.005 199.574 305.711 cv
200.761 303.444 202.236 301.442 203.917 299.983 cv
205.613 298.511 207.442 297.452 209.118 296.646 cv
210.802 295.849 212.34 295.282 213.623 294.868 cv
216.193 294.039 217.729 293.776 217.729 293.776 cv
217.729 293.776 217.343 293.805 216.62 293.898 cv
215.899 293.995 214.839 294.151 213.511 294.459 cv
212.183 294.767 210.574 295.195 208.792 295.899 cv
207.016 296.601 205.037 297.554 203.14 299.038 cv
201.223 300.524 199.538 302.555 198.173 304.954 cv
196.833 307.355 195.786 310.109 195.285 313.078 cv
194.762 316.035 194.696 319.198 195.292 322.338 cv
195.591 323.907 196.109 325.444 196.85 326.944 cv
cp
f
342.659 333.336 mo
342.979 331.97 343.118 331.078 343.118 331.078 cv
343.118 331.078 342.923 331.935 342.659 333.336 cv
cp
f
235.318 372.511 mo
235.088 372.853 234.939 373.018 234.939 373.018 cv
234.939 373.018 235.106 372.873 235.379 372.558 cv
235.645 372.241 236.043 371.761 236.359 371.033 cv
236.677 370.321 236.939 369.315 236.651 368.185 cv
236.503 367.627 236.261 367.067 235.836 366.548 cv
235.738 366.432 235.649 366.311 235.542 366.195 cv
235.41 366.082 235.276 365.968 235.141 365.853 cv
234.87 365.6 234.57 365.466 234.272 365.267 cv
233.045 364.585 231.594 364.206 230.065 363.958 cv
228.533 363.714 226.906 363.601 225.227 363.612 cv
224.388 363.62 223.535 363.644 222.673 363.704 cv
221.806 363.759 220.949 363.829 220.042 363.993 cv
218.288 364.31 216.563 364.779 214.856 365.323 cv
213.159 365.893 211.488 366.551 209.897 367.337 cv
209.099 367.725 208.324 368.152 207.588 368.63 cv
206.846 369.096 206.141 369.616 205.49 370.189 cv
204.189 371.302 203.082 372.793 202.843 374.506 cv
202.724 375.356 202.884 376.194 203.161 376.915 cv
203.238 377.093 203.314 377.269 203.389 377.444 cv
203.485 377.605 203.58 377.765 203.674 377.923 cv
203.814 378.158 li
203.832 378.187 li
203.886 378.265 203.859 378.223 203.876 378.246 cv
203.917 378.295 li
203.999 378.392 li
204.112 378.521 204.204 378.649 204.332 378.776 cv
205.469 379.822 206.682 380.154 207.753 380.41 cv
208.827 380.641 209.773 380.716 210.548 380.754 cv
211.325 380.793 211.935 380.763 212.348 380.747 cv
212.762 380.718 212.982 380.703 212.982 380.703 cv
212.982 380.703 212.095 380.687 210.574 380.477 cv
209.816 380.371 208.895 380.211 207.889 379.896 cv
207.391 379.728 206.866 379.537 206.358 379.265 cv
205.848 379.009 205.345 378.644 204.968 378.26 cv
204.194 377.308 203.673 375.969 203.897 374.664 cv
204.145 373.35 205.096 372.133 206.309 371.143 cv
207.516 370.134 208.978 369.316 210.501 368.576 cv
212.029 367.838 213.653 367.217 215.301 366.679 cv
216.947 366.136 218.629 365.663 220.289 365.348 cv
221.919 365.068 223.635 364.924 225.251 364.865 cv
226.876 364.821 228.45 364.844 229.921 365.01 cv
231.383 365.185 232.767 365.457 233.897 365.992 cv
234.158 366.144 234.466 366.264 234.668 366.439 cv
234.781 366.519 234.894 366.599 235.005 366.677 cv
235.112 366.786 235.219 366.895 235.324 367.001 cv
235.703 367.38 235.979 367.873 236.145 368.336 cv
236.486 369.288 236.344 370.228 236.101 370.933 cv
235.857 371.646 235.548 372.171 235.318 372.511 cv
cp
f
240.154 368.626 mo
240.154 368.626 240.428 369.724 240.154 370.822 cv
239.88 371.92 238.507 373.018 236.861 374.39 cv
235.214 375.762 225.882 379.605 220.667 380.977 cv
215.453 382.349 204.749 382.898 202.278 379.605 cv
199.808 376.311 201.73 371.371 201.73 371.371 cv
198.161 373.018 197.338 376.037 197.613 378.507 cv
197.887 380.977 199.534 384.545 201.455 385.369 cv
203.376 386.192 212.159 387.29 217.648 386.192 cv
223.137 385.094 234.939 380.703 239.056 377.409 cv
243.173 374.116 243.173 372.469 242.624 370.822 cv
242.075 369.175 240.154 368.626 240.154 368.626 cv
cp
f
227.172 374.733 mo
226.421 375.231 225.663 375.589 224.961 375.833 cv
224.259 376.079 223.624 376.237 223.1 376.358 cv
222.045 376.585 221.442 376.714 221.442 376.714 cv
221.442 376.714 222.057 376.658 223.126 376.495 cv
223.66 376.407 224.309 376.291 225.041 376.086 cv
225.775 375.886 226.585 375.569 227.394 375.068 cv
227.788 374.799 228.19 374.5 228.545 374.109 cv
228.725 373.92 228.866 373.684 229.029 373.464 cv
229.133 373.208 229.303 372.971 229.352 372.683 cv
229.539 372.131 229.492 371.505 229.335 370.925 cv
229.186 370.327 228.811 369.823 228.422 369.352 cv
227.998 368.911 227.521 368.504 226.976 368.201 cv
226.719 368.027 226.415 367.912 226.13 367.77 cv
225.841 367.64 225.561 367.558 225.274 367.45 cv
224.587 367.25 223.964 367.255 223.325 367.281 cv
222.693 367.318 222.067 367.394 221.449 367.504 cv
218.988 367.99 216.617 368.824 214.542 369.93 cv
213.504 370.48 212.552 371.134 211.784 371.925 cv
211.023 372.682 210.427 373.742 210.623 374.771 cv
210.716 375.267 210.939 375.7 211.23 376.038 cv
211.52 376.403 211.808 376.625 212.128 376.881 cv
212.769 377.335 213.448 377.499 213.992 377.539 cv
214.543 377.578 214.97 377.486 215.247 377.405 cv
215.527 377.321 215.665 377.252 215.665 377.252 cv
215.665 377.252 215.519 377.309 215.238 377.367 cv
214.958 377.427 214.533 377.469 214.007 377.402 cv
213.486 377.33 212.851 377.128 212.287 376.67 cv
211.752 376.188 211.133 375.556 211.019 374.71 cv
210.889 373.865 211.41 372.975 212.15 372.292 cv
212.889 371.586 213.828 371.004 214.832 370.476 cv
216.85 369.432 219.193 368.642 221.576 368.206 cv
222.171 368.095 222.77 368.012 223.363 367.97 cv
223.947 367.931 224.567 367.944 225.053 368.078 cv
225.334 368.18 225.637 368.266 225.898 368.381 cv
226.15 368.507 226.414 368.598 226.653 368.757 cv
227.155 369.025 227.584 369.387 227.965 369.77 cv
228.695 370.56 229.102 371.604 228.848 372.551 cv
228.643 373.512 227.884 374.217 227.172 374.733 cv
cp
f
164.403 381.252 mo
164.403 381.252 177.028 380.703 181.968 380.703 cv
186.908 380.703 196.515 381.801 196.515 381.801 cv
196.515 381.801 196.515 381.801 195.966 380.428 cv
195.417 379.056 195.142 377.958 195.142 377.958 cv
195.142 377.958 195.142 377.958 193.77 377.135 cv
192.398 376.311 189.104 373.292 184.987 372.469 cv
180.87 371.646 171.264 372.743 171.264 372.743 cv
171.264 372.743 173.46 374.116 173.185 376.037 cv
172.911 377.958 164.403 381.252 164.403 381.252 cv
cp
f
175.381 382.075 mo
182.243 386.741 li
182.243 386.741 187.732 386.192 189.928 385.643 cv
192.123 385.094 197.064 383.447 197.064 383.447 cv
197.064 383.447 188.555 380.977 175.381 382.075 cv
cp
f
225.498 295.249 mo
227.878 296.161 231.3 297.405 235.443 298.793 cv
237.52 299.469 239.761 300.236 242.161 300.948 cv
243.358 301.314 244.588 301.691 245.845 302.075 cv
247.103 302.456 248.4 302.806 249.713 303.181 cv
252.339 303.933 255.067 304.664 257.848 305.37 cv
259.978 305.923 262.152 306.427 264.327 306.94 cv
264.947 306.297 265.589 305.687 266.146 305.177 cv
263.53 304.574 260.907 304.007 258.343 303.364 cv
255.573 302.671 252.829 302.059 250.199 301.364 cv
247.561 300.697 245.01 300.053 242.598 299.417 cv
240.184 298.779 237.903 298.177 235.796 297.621 cv
231.59 296.473 228.085 295.516 225.631 294.846 cv
223.176 294.165 221.774 293.776 221.774 293.776 cv
221.774 293.776 222.111 293.913 222.744 294.169 cv
223.378 294.421 224.305 294.803 225.498 295.249 cv
cp
f
270.736 308.197 mo
270.286 308.762 269.677 309.494 269.067 310.224 cv
268.454 310.951 267.838 311.678 267.359 312.219 cv
266.884 312.761 266.528 313.109 266.528 313.109 cv
266.528 313.109 266.679 312.638 267.023 311.988 cv
267.359 311.336 267.896 310.516 268.521 309.766 cv
269.15 309.019 269.864 308.347 270.449 307.904 cv
271.029 307.454 271.47 307.225 271.47 307.225 cv
271.47 307.225 271.189 307.634 270.736 308.197 cv
cp
264.092 313.968 mo
263.559 314.872 263.073 315.802 262.64 316.688 cv
262.441 317.138 262.223 317.563 262.051 317.982 cv
261.875 318.399 261.702 318.791 261.561 319.161 cv
261.267 319.898 261.032 320.514 260.887 320.959 cv
260.738 321.401 260.643 321.651 260.643 321.651 cv
260.643 321.651 260.677 321.386 260.753 320.926 cv
260.837 320.471 260.953 319.804 261.174 319.032 cv
261.376 318.253 261.689 317.366 262.068 316.432 cv
262.274 315.972 262.469 315.488 262.717 315.02 cv
262.948 314.543 263.219 314.078 263.477 313.606 cv
263.764 313.15 264.04 312.689 264.345 312.255 cv
264.632 311.81 264.963 311.406 265.264 311.002 cv
265.897 310.218 266.521 309.514 267.104 308.96 cv
267.385 308.672 267.662 308.428 267.911 308.217 cv
268.156 308.001 268.371 307.817 268.556 307.673 cv
268.923 307.382 269.138 307.225 269.138 307.225 cv
269.138 307.225 268.965 307.43 268.652 307.774 cv
268.335 308.114 267.908 308.623 267.407 309.236 cv
267.152 309.539 266.892 309.88 266.613 310.237 cv
266.331 310.59 266.064 310.987 265.767 311.379 cv
265.203 312.188 264.624 313.063 264.092 313.968 cv
cp
379.634 334.076 mo
379.121 321.728 372.629 310.802 371.237 308.591 cv
366.393 314.956 li
369.923 307.219 li
368.388 307.415 362.094 308.248 351.406 310.026 cv
341.876 311.611 314.949 311.744 303.004 311.721 cv
301.507 311.533 299.875 311.332 298.116 311.132 cv
295.966 310.808 293.636 310.457 291.173 310.086 cv
288.711 309.711 286.134 309.185 283.454 308.749 cv
281.711 308.443 279.938 308.073 278.14 307.711 cv
278.342 307.684 278.456 307.682 278.457 307.682 cv
278.316 307.692 278.179 307.693 278.043 307.691 cv
277.39 307.56 276.734 307.433 276.074 307.307 cv
274.55 306.757 273.209 305.807 271.528 305.738 cv
271.495 305.737 271.462 305.736 271.43 305.735 cv
268.774 305.694 266.176 308.394 264.638 310.25 cv
256.746 319.776 255.479 332.97 259.795 344.386 cv
259.955 344.81 260.135 345.25 260.479 345.546 cv
260.873 345.884 261.414 345.98 261.926 346.064 cv
263.514 346.321 265.101 346.579 266.688 346.836 cv
264.425 343.794 263.578 339.878 263.663 336.088 cv
263.796 330.082 265.678 323.535 268.065 318.045 cv
270.224 313.077 272.707 310.495 274.704 309.148 cv
274.746 309.157 274.787 309.165 274.828 309.174 cv
276.24 309.436 277.643 309.686 279.03 309.923 cv
280.419 310.152 281.781 310.428 283.138 310.607 cv
285.847 310.996 288.46 311.398 290.954 311.669 cv
293.449 311.931 295.807 312.177 297.987 312.354 cv
298.532 312.387 299.066 312.417 299.588 312.446 cv
332.004 322.182 364.251 316.157 364.251 316.157 cv
364.251 316.157 370.264 320.373 372.26 332.227 cv
374.256 344.081 362.786 353.728 362.786 353.728 cv
346.843 350.039 li
346.789 349.838 346.735 349.641 346.68 349.431 cv
346.512 348.711 346.351 347.939 346.214 347.119 cv
346.269 347.191 346.327 347.266 346.389 347.342 cv
359.412 350.598 li
349.373 342.459 li
349.373 342.459 350.458 332.691 355.071 328.622 cv
357.993 326.043 361.564 324.557 363.792 323.811 cv
365.087 325.04 366.756 327.07 367.566 329.904 cv
368.769 334.113 368.707 337.932 368.656 339.041 cv
368.291 340.152 367.845 341.171 367.384 342.073 cv
366.682 343.437 365.953 344.566 365.32 345.471 cv
364.037 347.272 363.152 348.185 363.152 348.185 cv
363.152 348.185 364.068 347.305 365.419 345.543 cv
366.086 344.658 366.859 343.549 367.617 342.197 cv
368.369 340.845 369.119 339.241 369.579 337.367 cv
369.669 336.893 369.761 336.409 369.854 335.916 cv
369.889 335.414 369.956 334.903 369.965 334.38 cv
369.932 333.857 369.952 333.324 369.873 332.78 cv
369.79 332.256 369.749 331.73 369.616 331.183 cv
369.172 329.005 368.414 326.797 367.351 324.637 cv
366.831 323.552 366.237 322.482 365.584 321.43 cv
365.259 320.903 364.915 320.383 364.559 319.866 cv
364.004 319.099 li
363.711 318.716 li
363.671 318.666 li
363.585 318.577 li
363.502 318.496 li
363.432 318.432 363.278 318.331 363.16 318.266 cv
362.736 318.067 362.342 318.039 361.983 318.04 cv
361.621 318.046 361.276 318.083 360.945 318.145 cv
360.28 318.263 359.654 318.45 359.035 318.655 cv
357.801 319.07 356.62 319.585 355.457 320.144 cv
354.877 320.427 354.305 320.718 353.731 321.045 cv
353.585 321.13 353.446 321.21 353.285 321.316 cv
353.256 321.335 li
353.19 321.383 li
353.143 321.42 li
353.049 321.492 li
352.862 321.638 li
352.115 322.218 li
351.37 322.797 li
350.659 323.502 li
350.204 323.984 349.67 324.424 349.302 324.952 cv
347.586 326.918 346.414 329.225 345.498 331.5 cv
344.561 333.784 344.085 336.126 343.749 338.346 cv
343.622 339.463 343.482 340.55 343.475 341.609 cv
343.463 342.138 343.42 342.658 343.436 343.168 cv
343.453 343.679 343.471 344.18 343.488 344.67 cv
343.573 346.634 343.84 348.423 344.151 349.995 cv
344.36 350.947 344.574 351.812 344.799 352.597 cv
345.382 355.302 li
345.382 355.302 345.732 355.884 346.369 356.8 cv
346.537 357.181 346.63 357.391 346.63 357.391 cv
346.746 357.332 li
347.967 359.032 349.949 361.531 352.465 363.785 cv
356.787 367.657 363.566 364.631 369.262 361.736 cv
370.133 361.293 370.994 360.656 371.825 359.85 cv
371.103 360.886 370.226 361.909 369.201 362.878 cv
367.192 364.799 364.648 366.556 361.786 368.029 cv
361.422 368.208 361.055 368.389 360.686 368.572 cv
360.164 368.793 li
359.618 368.971 li
358.876 369.183 358.083 369.294 357.266 369.329 cv
355.628 369.4 353.906 369.161 352.174 368.815 cv
348.701 368.098 345.156 366.949 341.559 365.787 cv
337.962 364.613 334.308 363.39 330.629 362.242 cv
326.948 361.093 323.253 359.993 319.574 359.049 cv
315.898 358.098 312.259 357.26 308.725 356.514 cv
305.194 355.757 301.768 355.091 298.515 354.486 cv
295.263 353.877 292.181 353.342 289.335 352.859 cv
286.053 352.306 283.096 351.835 280.53 351.439 cv
279.618 351.248 278.587 351.043 277.457 350.837 cv
268.411 349.193 258.798 348.338 249.638 347.707 cv
256.38 349.055 li
256.38 349.055 254.582 357.145 249.638 361.639 cv
244.695 366.133 238.852 363.436 238.852 363.436 cv
238.852 363.436 241.998 366.133 244.245 367.931 cv
246.492 369.728 244.695 371.526 244.695 371.526 cv
244.695 371.526 257.095 364.91 260.883 359.214 cv
261.008 359.062 265.393 353.745 267.701 352.398 cv
270.042 351.033 284.677 352.398 284.677 352.398 cv
284.677 352.398 284.44 352.336 284.017 352.231 cv
285.662 352.523 287.413 352.84 289.276 353.188 cv
292.112 353.72 295.182 354.308 298.42 354.972 cv
301.659 355.634 305.068 356.358 308.579 357.174 cv
312.092 357.98 315.706 358.879 319.348 359.889 cv
322.99 360.892 326.655 362.052 330.301 363.26 cv
333.948 364.468 337.571 365.751 341.156 366.99 cv
344.745 368.217 348.285 369.439 351.871 370.246 cv
353.664 370.635 355.479 370.928 357.317 370.883 cv
358.234 370.859 359.155 370.75 360.05 370.511 cv
360.713 370.307 li
361.357 370.047 li
361.742 369.866 362.125 369.685 362.506 369.505 cv
365.549 368.006 368.235 366.223 370.438 364.193 cv
372.642 362.176 374.312 359.873 375.277 357.554 cv
376.187 355.293 376.701 353.256 377.103 351.597 cv
377.199 351.187 377.286 350.798 377.365 350.43 cv
378.97 345.839 379.89 340.221 379.634 334.076 cv
cp
f
266.755 330.088 mo
266.905 328.991 li
267.004 328.258 267.164 327.534 267.318 326.821 cv
267.495 326.113 267.665 325.414 267.889 324.754 cv
268.082 324.084 268.334 323.458 268.558 322.859 cv
268.779 322.258 269.053 321.717 269.272 321.201 cv
269.504 320.692 269.756 320.246 269.959 319.838 cv
270.159 319.428 270.375 319.093 270.539 318.809 cv
270.872 318.245 271.063 317.923 271.063 317.923 cv
271.063 317.923 270.853 318.233 270.487 318.776 cv
270.306 319.05 270.071 319.371 269.846 319.77 cv
269.618 320.166 269.337 320.602 269.073 321.1 cv
268.822 321.605 268.513 322.135 268.254 322.728 cv
267.991 323.319 267.699 323.938 267.463 324.606 cv
267.196 325.262 266.98 325.961 266.757 326.672 cv
266.556 327.388 266.349 328.12 266.203 328.863 cv
265.982 329.978 li
265.927 330.352 265.871 330.725 265.816 331.095 cv
265.726 331.836 265.641 332.57 265.611 333.283 cv
265.564 333.996 265.554 334.686 265.56 335.341 cv
265.562 335.997 265.6 336.616 265.631 337.188 cv
265.687 337.757 265.712 338.284 265.782 338.744 cv
265.846 339.205 265.885 339.611 265.947 339.94 cv
265.954 339.982 265.959 340.012 265.966 340.051 cv
266.027 340.961 266.118 341.867 266.267 342.763 cv
266.716 345.46 269.413 346.808 269.413 346.808 cv
269.413 346.808 315.254 353.549 325.591 356.695 cv
335.927 359.841 354.803 367.481 354.803 367.481 cv
354.803 367.481 344.916 362.088 342.219 354.448 cv
342.068 354.02 341.943 353.561 341.829 353.087 cv
342.226 353.04 li
342.226 353.04 342.002 351.504 341.757 349.178 cv
341.635 348.016 341.508 346.657 341.408 345.2 cv
341.375 344.688 341.35 344.155 341.325 343.625 cv
341.576 339.588 342.215 335.687 342.659 333.336 cv
342.449 334.232 342.161 335.332 341.784 336.519 cv
341.805 336.388 341.825 336.255 341.847 336.126 cv
342.092 334.683 342.368 333.342 342.622 332.197 cv
343.13 329.905 343.549 328.395 343.549 328.395 cv
343.549 328.395 343.04 329.877 342.393 332.139 cv
342.07 333.27 341.713 334.596 341.379 336.032 cv
341.127 337.126 340.885 338.284 340.702 339.471 cv
340.191 340.682 339.589 341.885 338.883 342.977 cv
338.877 342.842 338.867 342.714 338.862 342.577 cv
338.831 341.798 338.826 341.058 338.879 340.28 cv
338.972 338.74 339.195 337.196 339.443 335.758 cv
339.694 334.318 339.976 332.981 340.237 331.839 cv
340.497 330.697 340.737 329.75 340.914 329.089 cv
341.089 328.428 341.211 328.057 341.211 328.057 cv
341.211 328.057 341.068 328.421 340.855 329.072 cv
340.641 329.722 340.347 330.655 340.021 331.783 cv
339.695 332.911 339.335 334.235 339.001 335.668 cv
338.668 337.101 338.354 338.643 338.168 340.218 cv
338.068 340.996 338.028 341.822 338.015 342.581 cv
338.003 343.13 338.002 343.672 338.003 344.206 cv
337.585 344.73 337.137 345.207 336.657 345.628 cv
336.626 345.239 336.596 344.843 336.569 344.436 cv
336.522 343.708 336.481 342.964 336.456 342.198 cv
336.427 341.421 336.424 340.682 336.479 339.905 cv
336.574 338.368 336.8 336.827 337.052 335.392 cv
337.306 333.955 337.593 332.621 337.858 331.483 cv
338.125 330.344 338.369 329.399 338.554 328.742 cv
338.651 328.415 338.726 328.158 338.778 327.983 cv
338.829 327.807 338.873 327.719 338.873 327.719 cv
338.873 327.719 338.825 327.804 338.763 327.977 cv
338.702 328.149 338.611 328.402 338.495 328.724 cv
338.273 329.371 337.975 330.301 337.643 331.426 cv
337.312 332.551 336.948 333.871 336.61 335.3 cv
336.274 336.73 335.957 338.269 335.768 339.841 cv
335.667 340.618 335.624 341.442 335.609 342.2 cv
335.59 342.971 335.589 343.739 335.594 344.473 cv
335.6 345.141 335.615 345.785 335.633 346.403 cv
335.241 346.653 334.829 346.86 334.399 347.025 cv
334.311 346.111 334.226 345.11 334.157 344.054 cv
334.112 343.327 334.072 342.583 334.049 341.82 cv
334.023 341.043 334.023 340.306 334.078 339.53 cv
334.177 337.995 334.406 336.457 334.661 335.025 cv
334.919 333.592 335.21 332.261 335.481 331.126 cv
335.752 329.99 336.004 329.05 336.195 328.395 cv
336.292 328.069 336.371 327.813 336.431 327.642 cv
336.489 327.468 336.535 327.381 336.535 327.381 cv
336.535 327.381 336.484 327.465 336.417 327.635 cv
336.346 327.804 336.253 328.056 336.136 328.376 cv
335.908 329.02 335.602 329.946 335.266 331.068 cv
334.929 332.189 334.561 333.506 334.219 334.933 cv
333.88 336.36 333.56 337.895 333.368 339.464 cv
333.266 340.239 333.219 341.062 333.202 341.819 cv
333.182 342.589 333.178 343.355 333.182 344.088 cv
333.191 345.254 333.223 346.352 333.264 347.345 cv
332.875 347.43 332.479 347.501 332.076 347.559 cv
331.956 346.418 331.835 345.093 331.746 343.671 cv
331.701 342.945 331.664 342.203 331.643 341.441 cv
331.618 340.665 331.621 339.929 331.678 339.155 cv
331.78 337.622 332.012 336.088 332.271 334.658 cv
332.532 333.228 332.828 331.901 333.104 330.769 cv
333.381 329.637 333.64 328.7 333.838 328.049 cv
334.028 327.395 334.196 327.043 334.196 327.043 cv
334.196 327.043 334.008 327.386 333.78 328.029 cv
333.544 328.669 333.231 329.591 332.889 330.71 cv
332.547 331.828 332.175 333.141 331.829 334.565 cv
331.486 335.988 331.163 337.521 330.967 339.087 cv
330.864 339.861 330.815 340.681 330.796 341.437 cv
330.773 342.207 330.768 342.972 330.771 343.703 cv
330.779 345.163 330.824 346.523 330.88 347.691 cv
330.499 347.722 330.113 347.743 329.723 347.755 cv
329.704 347.582 329.685 347.414 329.665 347.232 cv
329.543 346.08 329.422 344.733 329.334 343.288 cv
329.291 342.564 329.255 341.823 329.236 341.062 cv
329.214 340.288 329.22 339.552 329.278 338.779 cv
329.503 335.715 330.173 332.666 330.728 330.412 cv
331.01 329.283 331.276 328.35 331.482 327.703 cv
331.678 327.051 331.858 326.706 331.858 326.706 cv
331.858 326.706 331.658 327.041 331.424 327.682 cv
331.181 328.318 330.861 329.237 330.513 330.351 cv
329.827 332.582 328.98 335.587 328.568 338.71 cv
328.463 339.482 328.41 340.301 328.39 341.056 cv
328.365 341.824 328.357 342.588 328.359 343.319 cv
328.364 344.785 328.408 346.152 328.465 347.324 cv
328.472 347.477 328.48 347.618 328.488 347.764 cv
328.11 347.758 327.73 347.746 327.347 347.727 cv
327.315 347.447 327.281 347.153 327.248 346.842 cv
327.127 345.692 327.007 344.348 326.922 342.905 cv
326.88 342.182 326.847 341.442 326.83 340.682 cv
326.81 339.91 326.818 339.175 326.878 338.404 cv
327.109 335.344 327.785 332.302 328.352 330.055 cv
328.641 328.929 328.914 328 329.128 327.357 cv
329.331 326.709 329.52 326.368 329.52 326.368 cv
329.52 326.368 329.312 326.698 329.07 327.336 cv
328.819 327.967 328.492 328.882 328.138 329.993 cv
327.44 332.217 326.586 335.215 326.168 338.332 cv
326.062 339.103 326.006 339.92 325.983 340.674 cv
325.956 341.441 325.946 342.204 325.947 342.934 cv
325.949 344.398 325.992 345.764 326.048 346.934 cv
326.059 347.182 326.072 347.416 326.085 347.645 cv
325.709 347.615 325.333 347.58 324.956 347.541 cv
324.914 347.199 324.873 346.842 324.831 346.452 cv
324.71 345.305 324.592 343.962 324.51 342.522 cv
324.469 341.8 324.438 341.061 324.423 340.303 cv
324.405 339.532 324.417 338.798 324.478 338.028 cv
324.716 334.974 325.398 331.938 325.978 329.697 cv
326.272 328.576 326.553 327.65 326.775 327.011 cv
326.987 326.368 327.182 326.03 327.182 326.03 cv
327.182 326.03 326.968 326.355 326.718 326.989 cv
326.458 327.616 326.124 328.527 325.763 329.635 cv
325.053 331.851 324.193 334.843 323.768 337.955 cv
323.66 338.724 323.602 339.539 323.577 340.292 cv
323.547 341.059 323.535 341.82 323.535 342.549 cv
323.534 344.011 323.575 345.375 323.63 346.544 cv
323.645 346.841 323.66 347.124 323.676 347.393 cv
323.3 347.346 322.925 347.297 322.551 347.244 cv
322.506 346.877 322.46 346.488 322.415 346.062 cv
322.293 344.917 322.177 343.577 322.098 342.139 cv
322.058 341.418 322.03 340.68 322.017 339.924 cv
322.001 339.154 322.015 338.421 322.078 337.652 cv
322.323 334.603 323.011 331.573 323.603 329.34 cv
323.904 328.222 324.193 327.301 324.423 326.666 cv
324.645 326.028 324.843 325.692 324.843 325.692 cv
324.843 325.692 324.626 326.014 324.366 326.643 cv
324.098 327.266 323.756 328.173 323.39 329.276 cv
322.666 331.485 321.8 334.471 321.368 337.577 cv
321.259 338.345 321.198 339.158 321.17 339.91 cv
321.139 340.675 321.124 341.436 321.122 342.164 cv
321.118 343.624 321.158 344.987 321.214 346.154 cv
321.229 346.471 321.246 346.77 321.263 347.056 cv
320.886 346.998 320.511 346.94 320.138 346.881 cv
320.092 346.506 320.044 346.109 319.998 345.672 cv
319.876 344.529 319.762 343.191 319.686 341.756 cv
319.647 341.036 319.621 340.299 319.61 339.544 cv
319.597 338.775 319.614 338.044 319.678 337.276 cv
319.929 334.232 320.625 331.209 321.23 328.983 cv
321.537 327.869 321.833 326.951 322.072 326.321 cv
322.303 325.687 322.505 325.354 322.505 325.354 cv
322.505 325.354 322.285 325.673 322.016 326.297 cv
321.74 326.916 321.389 327.818 321.017 328.918 cv
320.281 331.119 319.407 334.099 318.968 337.199 cv
318.858 337.965 318.793 338.777 318.764 339.528 cv
318.73 340.292 318.713 341.052 318.71 341.779 cv
318.703 343.237 318.74 344.598 318.797 345.764 cv
318.813 346.084 318.83 346.385 318.847 346.674 cv
318.468 346.613 318.094 346.553 317.723 346.494 cv
317.676 346.119 317.628 345.72 317.581 345.282 cv
317.458 344.142 317.347 342.806 317.273 341.373 cv
317.236 340.654 317.212 339.919 317.204 339.165 cv
317.193 338.397 317.213 337.666 317.278 336.9 cv
317.535 333.861 318.242 330.845 318.858 328.626 cv
319.171 327.516 319.476 326.602 319.722 325.976 cv
319.963 325.348 320.167 325.017 320.167 325.017 cv
320.167 325.017 319.945 325.333 319.666 325.952 cv
319.382 326.566 319.023 327.464 318.645 328.56 cv
317.898 330.754 317.013 333.727 316.568 336.821 cv
316.457 337.586 316.389 338.396 316.357 339.145 cv
316.321 339.909 316.302 340.667 316.298 341.393 cv
316.288 342.85 316.323 344.21 316.38 345.375 cv
316.396 345.699 316.414 346.003 316.431 346.295 cv
316.052 346.239 315.678 346.186 315.311 346.136 cv
315.262 345.753 315.213 345.343 315.164 344.892 cv
315.041 343.754 314.931 342.42 314.861 340.99 cv
314.825 340.272 314.803 339.538 314.797 338.785 cv
314.788 338.019 314.811 337.289 314.878 336.523 cv
315.142 333.49 315.857 330.481 316.487 328.27 cv
316.806 327.163 317.118 326.253 317.373 325.631 cv
317.623 325.008 317.828 324.679 317.828 324.679 cv
317.828 324.679 317.605 324.993 317.317 325.607 cv
317.025 326.216 316.659 327.109 316.275 328.202 cv
315.514 330.388 314.62 333.354 314.169 336.443 cv
314.056 337.206 313.985 338.015 313.95 338.763 cv
313.913 339.526 313.891 340.283 313.885 341.008 cv
313.872 342.463 313.906 343.821 313.964 344.985 cv
313.98 345.332 313.999 345.655 314.019 345.965 cv
313.647 345.918 313.276 345.866 312.904 345.818 cv
312.852 345.416 312.799 344.981 312.747 344.501 cv
312.625 343.366 312.514 342.035 312.448 340.606 cv
312.414 339.89 312.394 339.156 312.39 338.406 cv
312.384 337.64 312.41 336.911 312.478 336.147 cv
312.751 333.119 313.473 330.117 314.117 327.914 cv
314.445 326.811 314.762 325.904 315.025 325.287 cv
315.284 324.669 315.49 324.341 315.49 324.341 cv
315.49 324.341 315.266 324.654 314.969 325.262 cv
314.669 325.866 314.299 326.757 313.905 327.844 cv
313.13 330.021 312.229 332.982 311.769 336.065 cv
311.655 336.826 311.58 337.633 311.544 338.38 cv
311.504 339.142 311.48 339.898 311.473 340.623 cv
311.455 342.076 311.489 343.432 311.547 344.595 cv
311.565 344.97 311.586 345.316 311.608 345.648 cv
311.238 345.6 310.867 345.551 310.498 345.502 cv
310.442 345.081 310.385 344.619 310.331 344.111 cv
310.208 342.978 310.098 341.649 310.035 340.223 cv
310.002 339.508 309.985 338.775 309.983 338.026 cv
309.98 337.262 310.009 336.534 310.078 335.771 cv
310.359 332.747 311.088 329.752 311.748 327.557 cv
312.083 326.459 312.41 325.558 312.677 324.943 cv
312.945 324.33 313.152 324.003 313.152 324.003 cv
313.152 324.003 312.928 324.314 312.622 324.917 cv
312.318 325.518 311.937 326.403 311.537 327.486 cv
310.746 329.655 309.838 332.61 309.37 335.686 cv
309.254 336.447 309.176 337.251 309.137 337.998 cv
309.095 338.759 309.068 339.513 309.06 340.237 cv
309.039 341.689 309.072 343.043 309.13 344.205 cv
309.15 344.608 309.173 344.978 309.197 345.331 cv
308.828 345.282 308.46 345.237 308.092 345.186 cv
308.032 344.747 307.971 344.258 307.914 343.721 cv
307.791 342.589 307.681 341.263 307.622 339.839 cv
307.591 339.125 307.576 338.394 307.577 337.646 cv
307.575 336.883 307.608 336.156 307.679 335.394 cv
307.968 332.376 308.705 329.388 309.38 327.202 cv
309.721 326.107 310.06 325.212 310.331 324.599 cv
310.606 323.991 310.814 323.665 310.814 323.665 cv
310.814 323.665 310.589 323.975 310.275 324.573 cv
309.968 325.171 309.576 326.049 309.169 327.129 cv
308.363 329.288 307.447 332.238 306.97 335.308 cv
306.853 336.067 306.772 336.87 306.73 337.615 cv
306.686 338.375 306.657 339.129 306.647 339.851 cv
306.622 341.301 306.655 342.655 306.713 343.815 cv
306.734 344.243 306.759 344.634 306.785 345.005 cv
306.418 344.953 306.051 344.899 305.683 344.847 cv
305.62 344.396 305.556 343.888 305.497 343.33 cv
305.374 342.201 305.264 340.877 305.209 339.456 cv
305.179 338.743 305.167 338.013 305.17 337.267 cv
305.171 336.505 305.206 335.779 305.279 335.018 cv
305.577 332.005 306.321 329.024 307.013 326.846 cv
307.361 325.755 307.709 324.865 307.987 324.257 cv
308.132 323.957 308.244 323.719 308.339 323.566 cv
308.428 323.411 308.475 323.328 308.475 323.328 cv
308.475 323.328 308.423 323.408 308.325 323.558 cv
308.222 323.705 308.096 323.936 307.932 324.23 cv
307.618 324.823 307.217 325.697 306.803 326.772 cv
305.98 328.922 305.056 331.865 304.571 334.929 cv
304.452 335.687 304.368 336.488 304.324 337.232 cv
304.277 337.991 304.245 338.744 304.234 339.466 cv
304.205 340.914 304.238 342.266 304.296 343.425 cv
304.318 343.87 304.344 344.276 304.372 344.66 cv
304.007 344.608 303.641 344.556 303.275 344.503 cv
303.209 344.041 303.142 343.517 303.079 342.94 cv
302.957 341.813 302.848 340.491 302.796 339.072 cv
302.767 338.361 302.758 337.632 302.763 336.887 cv
302.767 336.126 302.805 335.401 302.88 334.642 cv
303.186 331.634 303.938 328.659 304.647 326.49 cv
305.003 325.404 305.359 324.519 305.643 323.915 cv
305.788 323.616 305.905 323.38 306 323.228 cv
306.089 323.073 306.137 322.99 306.137 322.99 cv
306.137 322.99 306.085 323.07 305.987 323.219 cv
305.883 323.366 305.753 323.594 305.588 323.887 cv
305.268 324.476 304.858 325.344 304.437 326.414 cv
303.598 328.555 302.666 331.492 302.172 334.55 cv
302.051 335.307 301.964 336.106 301.917 336.849 cv
301.867 337.607 301.833 338.359 301.82 339.08 cv
301.789 340.526 301.821 341.877 301.879 343.035 cv
301.901 343.498 301.93 343.919 301.96 344.315 cv
301.596 344.262 301.232 344.212 300.868 344.159 cv
300.798 343.685 300.727 343.147 300.662 342.549 cv
300.54 341.424 300.431 340.105 300.383 338.688 cv
300.355 337.978 300.349 337.25 300.356 336.507 cv
300.363 335.747 300.404 335.023 300.48 334.265 cv
300.795 331.263 301.556 328.295 302.281 326.135 cv
302.645 325.053 303.01 324.173 303.3 323.573 cv
303.445 323.274 303.567 323.042 303.661 322.889 cv
303.751 322.734 303.799 322.652 303.799 322.652 cv
303.799 322.652 303.746 322.732 303.648 322.881 cv
303.544 323.027 303.41 323.252 303.246 323.544 cv
302.92 324.13 302.501 324.991 302.072 326.057 cv
301.216 328.189 300.275 331.12 299.773 334.172 cv
299.651 334.927 299.56 335.724 299.51 336.466 cv
299.458 337.223 299.421 337.973 299.407 338.694 cv
299.371 340.139 299.404 341.488 299.462 342.645 cv
299.485 343.122 299.515 343.556 299.548 343.961 cv
299.184 343.907 298.821 343.85 298.458 343.796 cv
298.385 343.316 298.312 342.77 298.245 342.158 cv
298.123 341.036 298.013 339.719 297.969 338.305 cv
297.943 337.596 297.939 336.869 297.949 336.127 cv
297.958 335.369 298.003 334.645 298.081 333.888 cv
298.404 330.891 299.174 327.931 299.916 325.78 cv
300.288 324.703 300.662 323.828 300.957 323.232 cv
301.103 322.933 301.228 322.703 301.323 322.551 cv
301.413 322.397 301.461 322.314 301.461 322.314 cv
301.461 322.314 301.408 322.393 301.309 322.542 cv
301.206 322.689 301.068 322.91 300.903 323.202 cv
300.572 323.783 300.145 324.639 299.707 325.701 cv
298.835 327.822 297.885 330.747 297.374 333.793 cv
297.25 334.546 297.155 335.342 297.103 336.082 cv
297.049 336.839 297.009 337.588 296.994 338.308 cv
296.954 339.751 296.987 341.099 297.045 342.255 cv
297.069 342.741 297.101 343.184 297.134 343.595 cv
296.772 343.54 296.41 343.485 296.048 343.43 cv
295.973 342.944 295.897 342.39 295.828 341.767 cv
295.706 340.647 295.596 339.333 295.556 337.921 cv
295.531 337.213 295.53 336.487 295.542 335.747 cv
295.554 334.99 295.602 334.267 295.681 333.512 cv
296.014 330.52 296.793 327.566 297.552 325.425 cv
297.931 324.353 298.315 323.482 298.615 322.89 cv
298.762 322.592 298.891 322.364 298.984 322.212 cv
299.074 322.058 299.122 321.976 299.122 321.976 cv
299.122 321.976 299.069 322.055 298.97 322.204 cv
298.868 322.35 298.726 322.57 298.561 322.86 cv
298.225 323.437 297.789 324.288 297.344 325.344 cv
296.455 327.455 295.495 330.374 294.974 333.414 cv
294.849 334.166 294.751 334.96 294.696 335.699 cv
294.64 336.455 294.597 337.203 294.58 337.922 cv
294.537 339.364 294.57 340.71 294.627 341.865 cv
294.653 342.36 294.686 342.811 294.722 343.228 cv
294.361 343.173 293.999 343.12 293.638 343.064 cv
293.561 342.572 293.482 342.01 293.41 341.377 cv
293.289 340.259 293.179 338.946 293.142 337.537 cv
293.118 336.831 293.12 336.105 293.135 335.367 cv
293.15 334.611 293.201 333.889 293.282 333.135 cv
293.623 330.148 294.413 327.202 295.189 325.07 cv
295.576 324.003 295.968 323.138 296.273 322.549 cv
296.421 322.252 296.553 322.026 296.645 321.874 cv
296.736 321.72 296.784 321.638 296.784 321.638 cv
296.784 321.638 296.731 321.717 296.632 321.865 cv
296.531 322.012 296.386 322.229 296.22 322.518 cv
295.879 323.092 295.434 323.936 294.981 324.988 cv
294.075 327.089 293.105 330.001 292.576 333.035 cv
292.448 333.786 292.347 334.577 292.289 335.315 cv
292.23 336.071 292.184 336.817 292.166 337.536 cv
292.119 338.976 292.152 340.322 292.21 341.476 cv
292.237 341.977 292.272 342.433 292.309 342.855 cv
291.948 342.798 291.587 342.74 291.226 342.684 cv
291.147 342.19 291.067 341.625 290.994 340.986 cv
290.87 339.87 290.762 338.56 290.728 337.153 cv
290.706 336.448 290.711 335.724 290.728 334.987 cv
290.746 334.232 290.8 333.511 290.883 332.758 cv
291.233 329.777 292.032 326.838 292.827 324.716 cv
293.221 323.653 293.623 322.793 293.931 322.208 cv
294.08 321.912 294.216 321.688 294.307 321.535 cv
294.397 321.382 294.446 321.301 294.446 321.301 cv
294.446 321.301 294.393 321.379 294.293 321.527 cv
294.193 321.674 294.046 321.889 293.878 322.177 cv
293.534 322.747 293.08 323.585 292.62 324.632 cv
291.696 326.722 290.715 329.628 290.177 332.656 cv
290.048 333.405 289.944 334.195 289.883 334.932 cv
289.82 335.686 289.772 336.432 289.752 337.15 cv
289.703 338.588 289.734 339.933 289.793 341.086 cv
289.819 341.589 289.855 342.049 289.894 342.473 cv
289.534 342.416 289.174 342.359 288.814 342.302 cv
288.732 341.808 288.65 341.241 288.577 340.594 cv
288.451 339.481 288.346 338.173 288.314 336.769 cv
288.293 336.065 288.301 335.342 288.32 334.607 cv
288.342 333.853 288.399 333.133 288.484 332.381 cv
288.843 329.405 289.652 326.474 290.467 324.363 cv
290.87 323.304 291.276 322.448 291.59 321.867 cv
291.74 321.572 291.878 321.35 291.968 321.197 cv
292.059 321.044 292.107 320.963 292.107 320.963 cv
292.107 320.963 292.054 321.041 291.955 321.189 cv
291.855 321.336 291.705 321.549 291.537 321.836 cv
291.187 322.401 290.729 323.236 290.261 324.277 cv
289.316 326.355 288.325 329.255 287.778 332.277 cv
287.647 333.025 287.54 333.812 287.476 334.548 cv
287.411 335.302 287.359 336.046 287.338 336.763 cv
287.287 338.2 287.314 339.544 287.377 340.696 cv
287.403 341.203 287.44 341.665 287.48 342.091 cv
287.121 342.034 286.761 341.978 286.402 341.921 cv
286.319 341.424 286.234 340.854 286.161 340.203 cv
286.031 339.092 285.93 337.787 285.9 336.385 cv
285.881 335.683 285.891 334.961 285.913 334.227 cv
285.938 333.474 285.998 332.755 286.085 332.005 cv
286.451 329.034 287.276 326.111 288.108 324.01 cv
288.521 322.957 288.93 322.104 289.249 321.526 cv
289.4 321.232 289.54 321.012 289.63 320.859 cv
289.721 320.706 289.769 320.625 289.769 320.625 cv
289.769 320.625 289.716 320.703 289.616 320.85 cv
289.518 320.998 289.365 321.209 289.196 321.494 cv
288.842 322.056 288.381 322.887 287.903 323.922 cv
286.941 325.989 285.934 328.881 285.379 331.897 cv
285.247 332.644 285.136 333.43 285.069 334.164 cv
285.001 334.917 284.948 335.66 284.924 336.377 cv
284.87 337.812 284.895 339.155 284.961 340.306 cv
284.988 340.821 285.026 341.291 285.067 341.721 cv
284.714 341.672 284.358 341.624 283.997 341.577 cv
283.91 341.07 283.821 340.484 283.744 339.811 cv
283.611 338.704 283.513 337.4 283.485 336.001 cv
283.469 335.3 283.48 334.579 283.506 333.846 cv
283.534 333.096 283.597 332.377 283.686 331.628 cv
284.059 328.661 284.9 325.748 285.751 323.658 cv
286.173 322.61 286.585 321.76 286.908 321.185 cv
287.226 320.606 287.431 320.287 287.431 320.287 cv
287.431 320.287 287.208 320.592 286.856 321.153 cv
286.497 321.712 286.034 322.539 285.546 323.568 cv
284.566 325.623 283.543 328.507 282.981 331.518 cv
282.43 334.537 282.417 337.622 282.544 339.916 cv
282.574 340.461 282.615 340.959 282.66 341.408 cv
282.309 341.365 281.956 341.321 281.601 341.277 cv
281.508 340.75 281.412 340.131 281.327 339.42 cv
281.193 338.314 281.095 337.014 281.07 335.617 cv
281.057 334.917 281.069 334.197 281.099 333.466 cv
281.13 332.717 281.196 331.999 281.287 331.251 cv
281.668 328.289 282.526 325.385 283.394 323.305 cv
283.826 322.264 284.241 321.416 284.568 320.845 cv
284.889 320.268 285.093 319.949 285.093 319.949 cv
285.093 319.949 284.871 320.255 284.516 320.813 cv
284.154 321.368 283.687 322.191 283.19 323.214 cv
282.193 325.257 281.151 328.132 280.582 331.139 cv
280.019 334.15 279.994 337.235 280.128 339.526 cv
280.16 340.106 280.205 340.636 280.254 341.106 cv
279.904 341.061 279.554 341.014 279.203 340.965 cv
279.104 340.423 279 339.775 278.911 339.028 cv
278.645 336.822 278.502 333.832 278.888 330.874 cv
279.277 327.917 280.153 325.023 281.037 322.953 cv
281.477 321.917 281.901 321.075 282.228 320.504 cv
282.552 319.93 282.754 319.612 282.754 319.612 cv
282.754 319.612 282.534 319.917 282.175 320.472 cv
281.813 321.025 281.339 321.843 280.835 322.861 cv
279.821 324.892 278.762 327.758 278.184 330.759 cv
277.609 333.762 277.572 336.848 277.711 339.137 cv
277.747 339.738 277.796 340.282 277.848 340.764 cv
277.496 340.709 277.145 340.651 276.794 340.59 cv
276.692 340.045 276.585 339.391 276.494 338.637 cv
276.223 336.434 276.09 333.451 276.49 330.497 cv
276.887 327.545 277.781 324.661 278.682 322.602 cv
279.129 321.57 279.561 320.734 279.888 320.164 cv
280.215 319.592 280.416 319.274 280.416 319.274 cv
280.416 319.274 280.196 319.58 279.836 320.131 cv
279.474 320.684 278.992 321.496 278.48 322.508 cv
277.451 324.527 276.372 327.384 275.786 330.38 cv
275.198 333.375 275.148 336.46 275.295 338.747 cv
275.33 339.328 275.378 339.859 275.43 340.33 cv
275.072 340.256 274.717 340.178 274.363 340.094 cv
274.266 339.57 274.164 338.953 274.078 338.245 cv
273.799 336.047 273.678 333.07 274.091 330.12 cv
274.497 327.174 275.411 324.3 276.327 322.251 cv
276.782 321.223 277.221 320.393 277.548 319.823 cv
277.878 319.255 278.078 318.936 278.078 318.936 cv
278.078 318.936 277.859 319.242 277.496 319.791 cv
277.134 320.342 276.645 321.148 276.126 322.155 cv
275.082 324.163 273.983 327.01 273.388 330 cv
272.786 332.987 272.725 336.073 272.878 338.357 cv
272.909 338.86 272.952 339.318 272.997 339.739 cv
272.625 339.634 272.258 339.52 271.895 339.399 cv
271.814 338.944 271.732 338.427 271.661 337.853 cv
271.376 335.659 271.266 332.689 271.693 329.743 cv
272.107 326.802 273.041 323.939 273.973 321.9 cv
274.435 320.877 274.881 320.052 275.208 319.483 cv
275.54 318.917 275.74 318.598 275.74 318.598 cv
275.74 318.598 275.522 318.904 275.156 319.45 cv
274.795 320 274.299 320.801 273.773 321.802 cv
272.713 323.798 271.593 326.635 270.99 329.621 cv
270.375 332.598 270.301 335.686 270.462 337.967 cv
270.483 338.297 270.509 338.605 270.537 338.901 cv
270.143 338.74 269.755 338.57 269.378 338.384 cv
269.331 338.093 269.286 337.789 269.244 337.461 cv
269.103 336.367 269.002 335.079 268.994 333.695 cv
268.993 333.003 269.014 332.287 269.061 331.565 cv
269.11 330.822 269.192 330.107 269.295 329.366 cv
269.716 326.43 270.673 323.578 271.62 321.549 cv
272.09 320.531 272.542 319.711 272.868 319.143 cv
273.207 318.582 273.401 318.26 273.401 318.26 cv
273.401 318.26 273.189 318.569 272.817 319.11 cv
272.456 319.659 271.954 320.454 271.42 321.45 cv
270.346 323.434 269.203 326.261 268.592 329.241 cv
267.963 332.21 267.878 335.298 268.046 337.578 cv
268.047 337.594 268.048 337.608 268.049 337.624 cv
267.47 337.211 267.059 336.715 266.729 336.157 cv
266.701 335.879 266.674 335.594 266.656 335.298 cv
266.612 334.668 266.582 334.001 266.586 333.31 cv
266.574 332.62 266.614 331.906 266.658 331.181 cv
266.69 330.819 266.723 330.454 266.755 330.088 cv
cp
f
147.62 126.901 mo
147.62 126.901 147.714 127.845 147.842 129.497 cv
147.928 130.757 148.067 132.432 148.203 134.411 cv
148.302 134.406 148.401 134.393 148.5 134.388 cv
148.824 134.371 151.065 135.104 150.993 135.474 cv
151.057 135.145 151.102 134.717 151.125 134.221 cv
151.293 130.462 150.123 122.839 145.571 125.46 cv
141.964 127.538 142.503 132.454 143.079 135.887 cv
143.675 134.952 144.911 134.706 146.014 134.586 cv
146.504 134.533 146.997 134.505 147.489 134.468 cv
147.506 132.469 147.544 130.776 147.555 129.505 cv
147.583 127.849 147.62 126.901 147.62 126.901 cv
cp
f
148.693 142.827 mo
150.465 143.319 151.154 143.881 151.154 143.881 cv
150.78 137.396 li
150.78 137.396 149.752 136.604 148.318 136.202 cv
148.322 136.249 148.324 136.295 148.327 136.343 cv
148.452 138.303 148.576 140.492 148.693 142.827 cv
cp
f
147.482 136.026 mo
146.082 135.833 144.448 136.129 143.024 137.769 cv
142.889 143.744 li
142.889 143.744 145.488 142.594 147.503 142.631 cv
147.482 140.38 147.475 138.267 147.481 136.368 cv
147.481 136.252 147.482 136.141 147.482 136.026 cv
cp
f
151.093 153.695 mo
151.078 152.156 151.854 147.787 151.024 146.424 cv
151.024 146.424 150.263 145.18 148.779 144.582 cv
148.801 145.059 148.824 145.54 148.846 146.027 cv
148.92 147.799 148.996 149.631 149.074 151.491 cv
149.138 153.353 149.204 155.243 149.269 157.134 cv
149.318 159.025 149.366 160.916 149.414 162.778 cv
149.47 164.639 149.481 166.473 149.515 168.246 cv
149.57 171.793 149.59 175.104 149.58 177.944 cv
149.583 180.783 149.519 183.15 149.505 184.807 cv
149.477 186.464 149.439 187.411 149.439 187.411 cv
149.439 187.411 149.345 186.468 149.217 184.816 cv
149.104 183.163 148.898 180.803 148.73 177.969 cv
148.549 175.136 148.37 171.829 148.212 168.285 cv
148.14 166.513 148.041 164.682 147.985 162.821 cv
147.921 160.96 147.855 159.069 147.79 157.178 cv
147.742 155.287 147.694 153.396 147.646 151.534 cv
147.612 149.672 147.578 147.84 147.546 146.066 cv
147.537 145.464 147.529 144.871 147.522 144.283 cv
146.291 144.182 144.743 144.578 142.887 146.033 cv
142.233 146.546 143.039 152.502 143.057 153.3 cv
143.196 159.212 143.335 165.124 143.474 171.036 cv
143.603 176.521 143.876 182.031 143.615 187.497 cv
143.509 189.712 143.42 192.024 144.327 194.048 cv
144.746 194.984 145.361 195.816 145.888 196.695 cv
148.375 200.845 148.805 205.866 149.175 210.689 cv
153.074 197.699 151.378 183.547 151.25 170.175 cv
151.198 164.682 151.145 159.189 151.093 153.695 cv
cp
f
38.4601 101.119 mo
38.4601 101.119 39.6579 100.769 41.4858 100.382 cv
42.4009 100.193 43.4714 99.9957 44.6427 99.8572 cv
44.9384 99.8282 45.2354 99.7939 45.5513 99.7813 cv
45.7033 99.7686 45.8737 99.7721 46.0446 99.7765 cv
46.1175 99.7712 46.243 99.7965 46.3551 99.8214 cv
46.5818 99.8738 li
47.0734 99.9737 47.73 100.017 48.33 100.066 cv
49.5615 100.16 50.7929 100.255 51.9475 100.343 cv
53.1052 100.441 54.1856 100.533 55.1116 100.611 cv
56.9637 100.795 58.2023 100.938 58.2023 100.938 cv
58.2023 100.938 57.8923 100.979 57.3485 101.018 cv
56.8049 101.05 56.0271 101.113 55.0945 101.134 cv
53.2282 101.185 50.7455 101.164 48.2554 100.973 cv
47.6224 100.905 47.0351 100.876 46.3333 100.716 cv
45.9029 100.575 45.2696 100.635 44.7107 100.654 cv
43.5661 100.725 42.4859 100.825 41.5599 100.897 cv
40.6311 100.968 39.8571 101.026 39.3154 101.067 cv
38.7711 101.1 38.4601 101.119 38.4601 101.119 cv
cp
.137255 .121569 .12549 rgb
f
34.0112 112.543 mo
34.1515 111.84 34.3549 111.382 34.3549 111.382 cv
33.9774 111.76 33.8955 112.154 34.0112 112.543 cv
cp
.2 .2 .2 rgb
f
35.7655 102.962 mo
25.2384 93.3716 18.1833 84.7606 17.0839 80.0122 cv
16.5425 79.9962 16.0907 80.0141 15.7305 80.0472 cv
15.3172 84.4465 23.3556 94.5299 35.9292 105.766 cv
35.8019 104.831 35.7589 103.882 35.7655 102.962 cv
cp
f
47.8536 46.794 mo
42.813 48.0256 39.4526 48.8466 34.2755 56.4519 cv
34.2755 56.4519 39.8489 47.447 42.1886 46.1805 cv
44.5281 44.914 50.4738 44.7207 55.9076 46.5199 cv
61.3413 48.319 64.8808 50.3638 64.8808 50.3638 cv
64.8808 50.3638 52.8943 45.5624 47.8536 46.794 cv
cp
120.138 97.7106 mo
114.797 103.879 96.0207 125.57 95.3217 126.477 cv
94.609 127.402 113.724 99.8034 118.552 92.8338 cv
116.086 86.1866 111.723 77.8964 104.069 70.8636 cv
88.397 56.4623 71.9311 51.1478 62.5848 46.6629 cv
53.2382 42.178 44.2073 41.8154 41.3022 43.0687 cv
38.3971 44.3219 35.0772 49.1349 35.0772 49.1349 cv
16.0755 78.3319 li
16.0755 78.3319 22.5603 75.957 38.1045 85.9925 cv
42.6965 88.9571 46.6855 92.9184 50.0347 97.0269 cv
51.8607 95.5476 56.9416 93.7353 59.21 93.7353 cv
61.7641 93.7353 68.1498 94.757 71.2149 94.2462 cv
74.28 93.7353 80.6655 93.7353 81.6873 95.7787 cv
82.7089 97.8221 86.0294 104.974 86.7958 108.55 cv
87.562 112.126 87.562 116.979 87.562 116.979 cv
87.562 116.979 90.8825 120.299 91.6488 123.875 cv
91.9918 125.476 91.771 127.637 91.4234 129.538 cv
94.1594 132.014 95.8166 133.945 95.8166 133.945 cv
121.638 104.959 li
121.638 104.959 121.358 102.073 120.138 97.7106 cv
cp
f
120.315 54.5381 mo
121.634 52.8262 li
145.266 101.38 li
120.315 54.5381 li
cp
145.194 93.7619 mo
138.63 78.9946 131.049 64.6159 123.758 50.3424 cv
123.758 50.3424 111.375 47.7851 84.1017 36.8604 cv
56.8289 25.9357 0 0 0 0 cv
3.848 16.154 28.3653 54.826 28.3653 54.826 cv
28.3653 54.826 34.0114 45.9863 37.3115 42.7097 cv
40.6116 39.4332 49.9618 38.8779 59.8708 42.6325 cv
69.7798 46.3871 94.7341 55.1628 112.442 74.5983 cv
125.613 89.0548 124.691 106.535 124.691 106.535 cv
116.834 115.223 li
117.413 114.789 124.221 118.803 124.987 119.174 cv
126.392 119.855 142.006 127.433 142.009 127.424 cv
142.446 126.223 143.272 124.302 144.335 123.475 cv
145.074 122.901 145.964 122.33 146.848 122.034 cv
146.916 119.448 147.102 110.543 146.65 104.96 cv
146.288 100.497 145.6 96.1239 145.194 93.7619 cv
cp
f
157.015 125.393 mo
155.982 121.841 154.846 118.321 153.623 114.828 cv
152.868 112.67 152.076 110.523 151.256 108.388 cv
150.583 106.634 149.139 104.172 149.119 102.276 cv
149.114 101.768 149.238 101.269 149.332 100.769 cv
150.154 96.3846 147.721 92.2893 145.582 88.5811 cv
146.471 90.1218 146.789 93.126 147.031 94.8487 cv
147.754 100.007 148.452 105.218 148.858 110.401 cv
149.042 112.748 149.199 115.097 149.338 117.447 cv
149.388 118.293 149.037 121.922 149.609 122.52 cv
149.631 122.543 149.655 122.561 149.676 122.585 cv
151.1 124.187 151.991 126.68 152.347 129.35 cv
152.506 130.544 152.558 131.665 152.567 132.541 cv
158.921 135.621 li
159.648 132.519 157.854 128.275 157.015 125.393 cv
cp
f
60.5927 141.335 mo
61.7369 138.678 62.7791 135.89 62.7553 132.997 cv
62.7064 127.051 57.5704 124.197 52.4867 122.672 cv
52.4867 122.672 51.4603 124.383 49.0656 124.041 cv
49.8671 125.644 50.6301 127.269 51.3496 128.91 cv
52.1504 130.738 54.3567 133.315 54.3334 135.323 cv
54.3285 135.735 54.2109 136.137 54.0994 136.534 cv
52.9561 140.604 52.3692 144.828 52.352 149.055 cv
52.3496 149.688 53.6778 157.033 54.5393 156.541 cv
55.1267 156.206 55.7028 153.085 55.9587 152.376 cv
56.3842 151.196 56.945 150.221 57.4914 149.122 cv
58.7158 146.66 59.4962 143.881 60.5927 141.335 cv
cp
f
54.7181 96.7853 mo
55.3135 96.5579 56.0595 96.3413 56.9327 96.2001 cv
57.7989 96.0585 58.8096 96.0056 59.8886 96.0454 cv
60.9757 96.0839 62.1493 96.239 63.3943 96.4302 cv
64.6415 96.5901 65.9571 96.9289 67.4441 96.7427 cv
68.7511 96.583 70.1883 96.6404 71.6148 96.699 cv
73.0475 96.7734 74.5038 96.8982 75.9339 97.1141 cv
76.6432 97.2266 77.363 97.3374 78.0205 97.5394 cv
78.1842 97.5886 78.3309 97.6537 78.4877 97.7084 cv
78.6171 97.7724 78.7585 97.8491 78.8395 97.9097 cv
79.1436 98.1796 79.2657 98.352 79.4746 98.6606 cv
80.2252 99.8116 80.7705 101.137 81.2711 102.401 cv
81.7595 103.677 82.2148 104.923 82.6212 106.115 cv
83.0212 107.312 83.4036 108.436 83.684 109.495 cv
84.1325 111.251 84.3716 112.808 84.4998 114.018 cv
83.9031 112.059 83.0583 109.83 81.9081 107.961 cv
79.1712 103.514 77.4606 100.435 77.4606 100.435 cv
77.4606 100.435 74.3817 101.119 71.9869 100.777 cv
69.5922 100.435 66.5131 98.0402 63.7762 98.3823 cv
61.0394 98.7244 60.0131 98.7244 57.6184 98.3823 cv
55.8239 98.126 54.4141 97.4857 53.8199 97.1806 cv
54.0678 97.0552 54.3623 96.92 54.7181 96.7853 cv
cp
62.0657 103.172 mo
66.1711 104.198 68.5659 103.856 71.9869 106.935 cv
75.4081 110.014 79.1712 113.435 81.5659 115.83 cv
83.9608 118.225 85.6713 118.909 85.6713 118.909 cv
85.6713 118.909 85.3916 117.154 84.7435 114.849 cv
84.7432 114.798 84.7435 114.752 84.743 114.7 cv
84.7107 113.412 84.6548 111.558 84.181 109.37 cv
83.9427 108.285 83.604 107.13 83.2545 105.914 cv
82.8967 104.698 82.5024 103.418 82.0091 102.119 cv
81.512 100.82 80.9942 99.4795 80.1822 98.1898 cv
80.0021 97.8902 79.6719 97.4837 79.4269 97.2744 cv
79.0323 96.9558 78.6569 96.8291 78.2857 96.6996 cv
77.5439 96.4627 76.8073 96.3387 76.0675 96.2143 cv
74.5872 96.0121 73.109 95.9071 71.651 95.8516 cv
70.1897 95.8144 68.7648 95.7696 67.3355 95.9616 cv
66.0741 96.1336 64.7317 95.8903 63.4805 95.7745 cv
62.2215 95.6355 61.0167 95.5273 59.8977 95.5349 cv
58.7723 95.5304 57.7585 95.6592 56.8679 95.8693 cv
55.9829 96.0761 55.2378 96.3501 54.6491 96.623 cv
54.2723 96.7992 53.9693 96.9719 53.7214 97.1281 cv
53.5966 97.0616 53.513 97.0139 53.513 97.0139 cv
53.513 97.0139 51.1182 98.0402 51.4603 99.0666 cv
51.4603 99.0666 57.9604 102.146 62.0657 103.172 cv
cp
f
47.1118 116.568 mo
47.3157 116.538 47.5124 116.509 47.7268 116.479 cv
49.2546 116.268 51.0401 116.062 52.9638 115.887 cv
54.8769 115.71 56.9338 115.593 58.9458 115.892 cv
59.9492 116.04 60.9301 116.315 61.8425 116.722 cv
62.7581 117.123 63.5995 117.654 64.4045 118.185 cv
65.2065 118.717 65.9875 119.249 66.7702 119.676 cv
67.5493 120.107 68.307 120.471 69.0114 120.794 cv
70.4232 121.435 71.6306 121.892 72.4783 122.202 cv
73.3273 122.51 73.8191 122.666 73.8191 122.666 cv
73.8191 122.666 73.3317 122.496 72.4922 122.166 cv
71.654 121.833 70.4608 121.342 69.0721 120.665 cv
68.3793 120.325 67.6355 119.941 66.8752 119.492 cv
66.1116 119.049 65.3604 118.506 64.5663 117.947 cv
63.7731 117.392 62.9325 116.827 61.9977 116.386 cv
61.067 115.939 60.0525 115.624 59.0206 115.442 cv
56.9511 115.077 54.8504 115.142 52.9152 115.266 cv
51.314 115.368 49.8088 115.494 48.4588 115.631 cv
44.7734 115.656 41.1562 115.635 39.8286 115.488 cv
37.429 115.221 34.4189 113.915 34.0112 112.543 cv
33.746 113.871 33.71 116.093 35.7233 117.883 cv
38.8023 120.619 43.2496 119.935 43.2496 119.935 cv
43.2496 119.935 44.0229 117.632 47.1118 116.568 cv
cp
f
44.7922 111.293 mo
41.7368 110.953 35.6258 111.293 35.6258 111.293 cv
35.6258 111.293 42.925 112.481 46.8291 112.311 cv
49.4586 112.197 54.082 111.698 56.826 111.384 cv
58.0137 111.398 63.6535 111.529 65.4868 112.751 cv
67.5395 114.119 72.6712 117.54 75.0659 118.909 cv
77.4606 120.277 79.5134 120.619 79.5134 120.619 cv
79.5134 120.619 70.9606 114.119 68.5659 112.409 cv
66.1711 110.698 63.4342 106.935 63.4342 106.935 cv
63.4342 106.935 58.9868 106.935 54.8815 106.593 cv
50.7762 106.251 47.0129 102.83 47.0129 102.83 cv
47.0129 102.83 43.5918 104.54 41.8812 104.54 cv
40.1707 104.54 38.4602 101.119 38.4602 101.119 cv
38.4602 101.119 36.4074 105.567 39.1443 107.619 cv
41.8812 109.672 45.9865 108.303 45.9865 108.303 cv
45.9865 108.303 50.434 110.356 52.8287 111.04 cv
53.2585 111.163 53.6427 111.244 54.0044 111.309 cv
50.6143 111.409 46.4723 111.479 44.7922 111.293 cv
cp
f
79.8845 172.96 mo
79.8776 173.754 79.9315 174.929 80.1986 176.398 cv
80.7046 179.182 83.7412 188.544 87.2837 195.883 cv
89.3842 200.234 92.9079 208.053 95.587 213.805 cv
96.86 215.244 98.0501 216.936 99.3249 218.914 cv
97.3346 215.826 96.1715 210.495 94.7243 207.008 cv
92.78 202.323 90.806 197.65 88.8284 192.979 cv
87.2484 189.247 85.653 185.521 84.0987 181.778 cv
83.57 180.505 82.2503 178.492 82.2503 177.068 cv
82.2503 176.041 81.2239 161.673 81.9081 154.831 cv
82.4542 149.37 84.7426 143.475 86.6884 138.186 cv
86.9486 137.657 87.3459 136.811 87.7878 135.724 cv
88.5367 133.843 89.4201 131.27 89.8027 128.546 cv
89.8835 127.862 89.9319 127.171 89.919 126.48 cv
89.8892 126.13 89.8955 125.79 89.8214 125.443 cv
89.7637 125.125 89.7143 124.813 89.6176 124.483 cv
89.4645 123.827 89.2144 123.255 88.9651 122.71 cv
88.7002 122.175 88.4119 121.691 88.1053 121.274 cv
87.5063 120.43 86.8736 119.844 86.4239 119.459 cv
85.967 119.077 85.6714 118.909 85.6714 118.909 cv
85.6714 118.909 85.9183 119.142 86.2994 119.585 cv
88.0492 121.621 89.4435 124.714 88.1844 127.33 cv
88.2005 127.307 88.2189 127.287 88.2347 127.265 cv
88.4007 130.529 86.8027 133.582 85.4652 136.564 cv
81.0413 146.426 79.1042 157.392 79.8818 168.172 cv
79.9956 169.75 80.1428 171.421 79.8845 172.96 cv
cp
f
69.4991 212.303 mo
69.5121 211.063 69.4761 209.82 69.3609 208.571 cv
68.7526 201.984 66.5618 194.789 64.4434 188.544 cv
64.0607 187.415 63.6505 186.267 63.6503 185.075 cv
63.6501 183.884 64.1474 182.615 65.1871 182.033 cv
65.6002 181.802 66.1685 181.342 65.8298 181.011 cv
64.8469 181.656 63.8058 182.212 62.7233 182.67 cv
61.4293 179.661 59.9762 176.465 59.2205 173.289 cv
58.2973 169.409 57.6636 165.257 58.9858 161.494 cv
61.6661 153.866 66.3628 147.109 68.3238 139.095 cv
68.6192 137.888 68.9147 136.681 69.2102 135.474 cv
69.3276 134.994 69.4623 134.484 69.829 134.154 cv
70.4426 133.601 71.7042 133.623 72.4871 133.232 cv
72.8909 133.03 73.352 132.859 73.5795 132.469 cv
72.5591 132.338 71.5184 132.198 70.5943 131.746 cv
68.7349 130.837 67.4097 128.174 65.9633 126.703 cv
64.228 124.938 62.2295 123.438 60.0131 122.33 cv
56.5921 120.619 53.8554 117.541 51.1187 118.225 cv
50.0312 118.496 48.9293 118.66 47.8247 118.826 cv
47.4081 118.888 44.2998 119.131 45.6706 117.689 cv
44.5784 118.838 42.2478 119.514 43.8328 121.789 cv
44.6912 123.021 47.0813 123.437 48.463 123.275 cv
49.7251 123.127 50.9029 122.588 52.0638 122.071 cv
52.4524 121.898 52.8565 121.724 53.2818 121.727 cv
53.6389 121.729 53.9822 121.857 54.3135 121.99 cv
56.3673 122.812 58.6174 123.926 60.4102 125.219 cv
61.5411 126.036 62.5029 127.092 63.5014 128.111 cv
63.2366 127.927 63.0921 127.804 63.0921 127.804 cv
66.8553 136.357 58.6446 148.33 56.5919 155.857 cv
55.2596 160.743 55.0048 166.85 56.1934 171.768 cv
57.0012 175.111 58.6578 178.177 59.9021 181.384 cv
61.4429 185.354 62.3497 189.537 63.2505 193.7 cv
65.176 202.598 67.1015 211.495 69.027 220.393 cv
69.2108 217.681 69.4707 214.998 69.4991 212.303 cv
cp
f
90.5324 132.217 mo
90.5324 132.217 89.9337 134.088 89.5594 134.687 cv
89.1852 135.285 88.5116 136.483 88.5116 136.483 cv
88.5116 136.483 91.4306 136.707 92.8526 136.333 cv
94.2747 135.959 94.7986 135.435 94.7986 135.435 cv
94.7986 135.435 91.5802 131.693 90.5324 132.217 cv
cp
f
133.261 40.0661 mo
134.143 42.2045 134.964 44.3647 135.817 46.5133 cv
138.274 52.9958 li
139.106 55.152 139.869 57.3329 140.666 59.5015 cv
143.034 66.0159 li
142.075 66.2893 li
141.601 64.0325 141.054 61.7904 140.436 59.5678 cv
139.824 57.3425 139.109 55.1485 138.391 52.954 cv
137.661 50.7635 136.855 48.5969 135.988 46.4538 cv
135.15 44.2967 134.212 42.1827 133.261 40.0661 cv
cp
133.261 40.0661 mo
134.412 42.0787 135.443 44.1618 136.436 46.2609 cv
137.4 48.3739 138.29 50.5223 139.113 52.6968 cv
139.525 53.7845 139.917 54.8793 140.277 55.9855 cv
140.636 57.0917 140.98 58.2027 141.31 59.3185 cv
141.962 61.5516 142.544 63.8061 143.051 66.0776 cv
142.092 66.3511 li
139.809 59.8067 li
139.056 57.6224 138.268 55.4505 137.55 53.2537 cv
135.356 46.6775 li
134.659 44.4732 133.929 42.2805 133.261 40.0661 cv
cp
.137255 .121569 .12549 rgb
f
142.423 47.6155 mo
143.09 49.8306 143.693 52.0613 144.33 54.2837 cv
146.135 60.9773 li
146.75 63.2051 147.293 65.4507 147.872 67.6874 cv
149.585 74.4037 li
148.604 74.5812 li
148.355 72.2885 148.033 70.0035 147.637 67.7306 cv
147.248 65.4559 146.753 63.2019 146.256 60.9472 cv
145.745 58.6952 145.158 56.4597 144.506 54.2414 cv
143.885 52.012 143.161 49.8157 142.423 47.6155 cv
cp
142.423 47.6155 mo
143.37 49.732 144.19 51.9068 144.971 54.0937 cv
145.722 56.2916 146.395 58.5174 147 60.7626 cv
147.301 61.8855 147.584 63.0138 147.833 64.1501 cv
148.081 65.2864 148.314 66.426 148.531 67.5688 cv
148.96 69.8555 149.316 72.1564 149.596 74.467 cv
148.615 74.6444 li
146.989 67.9065 li
146.456 65.6584 145.886 63.4193 145.389 61.1623 cv
143.855 54.4016 li
143.379 52.1393 142.87 49.8851 142.423 47.6155 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.2.0%%For: ( ) ()%%Title: (1602.m10.i304.n033.P.c25.278436308 Vector elements for vintage graduation labels, badges and emblems.eps)%%CreationDate: 19.02.16 16:46%%Canvassize: 16383%AI9_DataStream%Gb",Kq*O)`o'lAT^&s0>Lg]pF>hBc[7DXB]&0S7]=_>sL5CUrX<HTZ#<$ZPQ)+>'[m`Z!&lD9fLXZMBsT.gN;MUARQbeH%uXM?6U%Yf\C9<`VXb=;7,+^OOQheU+Lh,.t_6Lb)&,:1:D]&.qo>+O)+1,'2*hAX3QQ^"q"Yc*H3l--`=?m;7*2^U1H4:ohDQc#]^?S*!LB%U8aCs$iYBOI)m.!4_&Y>>2LPn(khDiV!2"mg-B_l7^2fPD#pH*p\QX'kSWK0\smXK#=.i-E-&&2N*a9"oaS6U(Bhs,<hfO.oSuE"%ckXn4IfaT<PL?McT\64FH:D"UfaiD%LQL]/K7G"W,f)/cq86<akV#sS!pi-[(B6TcH[UV"S;6hEA=.a.KgThO^;P7!&ajZT5!,J<%!)=0;=4CHFVUj@updA,A#c\<=Q8pB<Trd.%=Y2oTZk^ok&Y<C/$kj4TBZ74X+5p@UnVe=D=M**SmeRG]s1.+Ae$Y(iV;dJYqZZ"u%OJ<pB*=RXn%[q_<XDRT\QP+mL.[rf3U,QNU@G=IS,GK?X:B%'q7BKeCqk13+F+BG,n0j6<lY+YfBtnah5aDn!gsOkFo:4$djWuXu%.h"+,"Jt7+?Li%I:>g]FSB,td8O>`&:gq>\.h;AYrF9cuQT^-5P08K(*d<U4dGA82=<!,I;8qAY)O6HAb+(tqrt&'PMW:mTs.sc@%o)!jKD:-.>&'71or\K\S!XtQ9=-@/'-.%9O#uLOXXGNfWU\BMpj:4!gF=7IVpVW+"fL?hW>W<pOP_XX-!4R-`k+IoT=3ZFa]OI1K%:X3Y>*dZ."D?`6)!n4aZT4YP55I2)1)m/=[AorXnG$/MBrGqjJV\\osGC-KZqdpZ:Y2VGo4i%Zq"0I?Vf[\,0.f:@I9^`J0d'Y<X%QK4tBhs%8ZYe[V9bpbL*rh29qNh]g92nctR;ep1)+gZ"<r.$jI#]eE<,3o,"(Hm?WGCU^0O)\#j7<%%&+mq,NF4ZW>%XN7nd57?1%+i\F0Bs>AUMYOM47UGE4_27FD8oN?BrAj-X,sl%hqb(\KVGZYoS[q[ICZ99f+-,BopNn.cc0aOLV<.B;(;e8R^aRYi1HO*kc!05D%c*&mWc'!1f!&HK@=h]empo/fZbo%fD$<[)R.[a#+f,Cb+#:'hGfI/]O_QR9QJ(I"1O]A.cmb^q[(k$h._.Ka#@ATkuf/btWe&EpI%3trdP?TC8I3;gLk@MsKmE4u_J!I1lR5.pN(/?E2"k)LR[^rqs>`XkH%rd+$&e._VXeSN.*0^uMdPQlOVQMB1NHG&"_?=9#`7^LOn%gN]@^XCoBC%e&@@rEi+[g-U=$(k9o=?@WO?[;h]Y>&urkIN"K#I0*GRCCqg/gd5578K-m*;60Gh'4KpL3#*cs"rmrp<0F7LR7OD?%SZX^.%k#YVJ0r\0T]**-SGBAQ1]R+S1QQ/jilt5(HXNaL?rX"eJ2h<sVE-5nXZu$8+I?l1or7$$2U`LNp\Y>>9VnD_pBF>.f$253%E%8As,d[fYj)SN(Tt<!j:>Co>#SBOr8khnCl'\^R49,P,@38gKIlL/>Zd:WR,b%D-O.]o=`eBf"OPSQL#ubKoRJKl1W>DHMK$fP7%iVNifUgO\DAUTp-:=JTSgP,TDItD!$SChNCAk2<)O<[Gs@"^P07bDBMZ>sGai')-4OBe\RZCe*hiD3-t"JJc7?;Kfc:NW0^bnHt"%_DG&U5!EBfrf[Xe[AuSeh)mHPhE5A<JWsl[(4MsABmL4tSh\JGVKp0<c^<i4ds'!&KPur,\Y3Ho1Sul#Fjg\!F._:,,,,%`Rt\FS%0n90mpLC.O-4/8Tp!2#rnm9(odXN+pI&<BXc\_VZjHQ*c8\X;98X)E\<UX[T?I.!PM9/`A@c0:QV^a<8Eof*9ZAY]o0ZfU+YfX%I%IqJ)0=fqDir]?#:"de[4U$2q:ga7bqGSI5Q%f$(*:X0TCro$r-7HM`[qtNF#3WU874D8KcUtP2/[C-IfHJRQoG!'$YQ2[go[e8OO%CXh@]l'd&4Tf;19[Ba*eCTc0)%!ulVIr"bV&'';oMXtI4nuUJ38CQLH;d&VaFR&o*N$M>D1\k1uOBGYdGFKh,;A>3ONHRPLWfZda%$>t1+1@$sD]ml`3`2s33=VLX;Wo(Qmlu6;7T2C%51-*AC<:aa6;,9.8NCd!ZKCt$VK@rZ1L$gl`6hO`(I8]aU3H\ag\^%gS3r`o;%o?2(3C0dTADs;Zd1jfURk!#r8=]a02qW&OT\M*hSB$Z>Rr/Hl;Hb8c=U-$l:2'$u:Ku+DQ$g:f7s3FDII\,VmL,\Js4NVE0-i)=@%nAF7-$-d32d#E4nmTGsRBf6W1?2o9JDVB:s.)SNO5:kR>.`T9C'!h%>]DsjbBjAWmQ^)u['Q1K!B)[>e(RjtLRY*g<q3g&6*FF+N%h>5DljSpe?dbG8UKGjUjcXjY3XC6"$r^^#cKhiY:?0bFX^7?tT9D2kVh#EKoqrNi.I\5e[h5JZD/mfF"gT3'cl),N9d$)i*jY;5t%3r8,5kh0/t1[d$3jAXj3dqc,.]%1cbc%=dtYK:rbJpl2/j/\WtbH\fVf'=(n:=c4N,`XbNo%a%R*B=)USpc@>A!EkVcHO<T/ngVt%09J#9SYfH=nKSKu>3?:(MO"HP:#Bu]l-*W/V%h7V96TZB.\5YC7:9]ec/`W-=^*u$p,)Ztl=41:p.)2!r=mS)$\&pDPoJ#pWogp<%+S8=?nR-Yp@J1N.F;hmR\VR8t,9^'^flVAFW;-aoF0Sb8PRPSq,4hBqdL5[XVld"`5]SngQ&:.MA9'u`&G$Qm>&>(?Pfn^1i18+q%-S5h`O5KkQrmZBkM@ITW?XN-11OTsW#2N.aCURKLItI>":Ed)fD>F;,ZIUSe#7%0U0uEk`Wr-smWjm9c%n2r'4b^W7,&K/$,AE[n%pl\s)'2_qHT+oRdD5644G5e16pg<Z9;.4$b%,qqt?N(/L+C*8Io+cfO0o/UU<k;/#R9dPai#%-*QWS[0EtIr(BRPSe&2)PYbe&i0%5mWtUT7:>.Ri[6M*g=qF6&9IIgLp:(7/7cAKQ'5pb^53B6&:pi#f1uIK+Mp$bKS\oDf?9)"V!8+XhNp`#WJ9G<R(PU#9h7Ii#m[\%)J4FAs'*)H?frDa)l^A+!hUaGYP8/P2og[8I/is:rboMri!ZdfcV<>]#64O<9T*O*;WJi2%j.:=cO0V'.P.q*qN>df@ba3E.[/16%Nkb0@NOaUdh`sd58HUi@lFDJ7)lU;uqFh!VmK-c;5gA]FVqNL=[;^#Tk2toFo/$uMk2pAqT'#0Lk00$1S)`I;pKqQe$\/$-nR#c.%CVE-jX:Y1l\O*/l4^TB4eJ08`*c_&001tH-S)[ice.3(R^@d7[^m=)A^[u-PWVq/<fI+sV79R6KbFJ?ZK.leq$DUnSX%%I,pZ7nM%KfZfr:Utc'gO]4['MU@no/CU3hn8Jt;tGFo][?''b:BGfng.UJ_7FlF_@42kiX`[%ihH\8@A=h&@7BsXn\F$1>f2&dE5V8P:AB<2%jR<*H(:+X_I#G1OrTPm(UQ99'q;Uec+4YO'`II$Sp.R5k<nHr]M>aUs$8]E81V6Gag)hA[o1A`Wf&tOI3Y7h(rl1`8N.^eZ1P:`e%2-_\_`b4MM$a*:ZlZ#[*Qqa_Z3pYgr3^;q2B4d^&ei!<sQJQiE!PXXoF.4n3$((?5?M*rVIG3:%]DnH:k>,BoR_X<kEkZ&Z?eVd_%fGC.(MR(NO/13OLq2XPY:q-7\ja>,>%o`%i?FE)UZ*`Zn=Z_opR_q9]Net?*m,kpE1Jr4\d6c3-QZBf53T$YiJ#bJ50ribi:J[Er%#V"I['^8VM)(`9rAM:Q?4n'<ZLD08PD`5k4;^lH"[<`q_LWfIU_WaJ%`;b)>52?tb\lHgQ>Y8]MHUb-iX?&gdc$k(Rig,[O3GDep%qP])"KjgS)Piaj"J")mP9kbqi8mhH'NaKPu7-!NFXfLdT-q%ou'RYp<1S[/CZ`3\o?+gk.]39R@-LACto]P*`1;2&42rTP(.ZFQ'%j-RA5SJ:I0UG_72qLY!]S_/aj<olji,cAss9_2Bl,Z6J;cWP8<(K,#bhid;JoJ-OX?2*HHf.B2&Vn&ZTrDs5UXP]^eeD_-ngIYQ-%(TtB[&_=Vano51b;D%pM;uO%3)X"MdH0o'I]9q2&k-^+mm:'D6GfR^0V1R8NX?m+?@E`L'1D@mSCDYH7(S;;XI/O-oZVYrs=P:h5%XM+O,U,B:1iqIaKs3!XBpt<dd+'IW2nWA28:KYs.,P`s`CS*hSru"b-eOT2Fa\1s7gGAZ.&"_%K4)5c5]OjjmS!j/Z=YWXWlHA=n%Q^PTpk0I/"\Jq$SPi`@`ZMA9I^?TKFge2Vc8f:\DpnYa@r[VQoqcd/0Fff-Pr/Z:`i`eOr4T4Y-o>d<_%gN'*&>jq:XYS!03]Hp8%q?6b:1%je''dPcFWVSDdLWjM@VtX'9]6_Ge:&QijpmBG%hh\uGJK2F)&3_Ubpf"$g0-Gjl*].q`&1]I6WCls7W44hsA>+F!Xd"#q%6X=nY`b(&$nUC0nB;As:S1Z!%U$$&VT!%5D,51qncuW.mpi!m*oikAsUj47oG#O2M=p\$>DC**;eE<*I)9F#9bVGbk!rb8qkcDj6%?4$B/':;i&k5"1Ui\1o.CMjXSI)de:g==>oXa+Fq0$^cN<mt/Yp\hpmPlK!l,9K)CkpcDO^PUFYbAQ$dehLjm%l_h.3cRC`FD,4]%92eGd:X=.UkCMJB]1=DXTRSpmD6qSJqW1;V>%bYOd>CEBNKhGEB5uUP8"2YkGKOIVpNc4&EFTOAY>1M#3p#7rk52eP`JrKOG0Q<\%UIMIOi=u._H2#JuJ+ZHFqPR]sVMe^!F;GknJ\$F02kg/3MFhg7/Ie0,bJ$m-bY:>^X#],9>n7UF_0t#]r4U-ik1.AY$No;E*0D0Y%k3%OaZ]=?<5Vm_DaMlA9pC,Ft:3`/ueFE:9`q6/48meBCNc][I.eN?H+CD&Qc-368s.g##8Wi#!ba;Y;qK^@Cc^EoUe'-nmo:0Nd%1X1!<YFRIDO79kncLcN[*IX!MC&/M8?RT]Y:<Yh7RO:i$UhQDW]opAtC&67LPP>TM-9!d*PGZZS@/]Dg9s3VB]8>!jBi\tSc%QE"%N`jgiGn^,JpjE(bqJ9%aoA<7<U/0Rjhn:suir6DSXH.Vcr_mM,qI\r@Iq-8af419]=OE3/DNpSn\InL2OP/%(7fV(pS#TYqs3&sU%_^X<[5:ks^PK#Dn7bj+\o1L?]lLfj3LeG2&WjhaU28=Y5IZg,tC;kDhiB?a,\`ELh;IAs@;U]!*@"#U;Bsu,"AmL)Q0,o:d=k)QM%.$QSJ0ut4&LD09cmcLe;VY/3in9_=Y6.8L)O+1VXHA"9A<jf7$;Foj#oCVO]B(,HbKJW'm>^pDV)]!gtn+17=I_'[s.\E%,fU%Wr%Ogo!=^+GtO$i:<\>(1cO@XhD(I>IR-`@%2-F\Ps6YE%;eItt1(Mg;fi&%B8Y\FhqUdJOY2^7?"f30.0R0k-OU/H<^0$J$-qJe?2p%IH>ZBD<uJG@K3<JX#$hU?fkY_hm;7qR"XI,4lUke_]%"%mR$pmT:u6:VES_;gc9Lc2Q&b'<?BGbo:KVV^\e[7X_[Rp/`"ZEa1m:#%F'YT4?$Bn1It$h/51>k/0MSn=b?VR9\M*ggY0X+$F)>pZDJTMUR^jsGC9Hph<)MgciL139quI3("h=Tq-Lc^Ws*`a#nh%Rs47tHC%?g'o,GPY.ar"YLg\#oRBJ[@8tCAJkPB%dNs*le'Jf$t<ePt5rW6JZIj=Z4bclYLa<C%%T[1LDngC7<trpD21.Y5E2M\pUj9*IQ1O%I"0N[#DBk]RfgOV,KH4#Fhf(Kc$V2[`ujjHi?p5@0D>adqk.G2p$'(.d/""5@YT(/Y]c&6'`ZCHC;9>"^ar,fAlh"Yi[^R,.\_'C%j\L8ZI3-i9a8@&0e7DYKArQ0@PRqFqQ@5mr6B3j-\Do^#X7_.iF-i0&1$$Z-rQ_'A55dfKi>ZH.7.r=+n#B$mF'\W=?"1RP=\=(m%&I"=qi%rNpY1E#@?+^SoG'*Si6B7HCSA%VsiHLnlR-E<*-0EZcfm38+Op*j3'lQ#1di$,C.cgM4hS41cmnXAk>@/B?a0R>gOD\-S%?QMLpLldB:Z^lk(aQkh&'V*Nc7b`2uiM_BQ'RD.a*5K>0j>.MYJU#-bl(1:ed&VL'[C0,b]:S&#"Xa!C4V,5oe='+,7]j@X=Z"Cc%3rD&ffAF*O:)X="iJ#'/Xl$Y)Y)a)b\o?2_>G!TPd`$Pbq=UC.6<OQ+*b4!?/:\%s!(O`BMBG&^,C*CG+b0"m8,p:^j*thGS2C?+%ZR3J;kQE6s1789gOoIM?@K$"'<C`m0in]%ah]^f[=?gJg5MP6()!JaE=:,LBg)\h1,Hr8']aI<1e'r4K`cJdH3dud4/i<X!/hdm*%@h]O-)3JH9i$>fD'o<_A\<'][QLKLfAPNs0Jn%5@,o<;KH7n4cUZ5UG^Ym-r>W`&N-SWJ[kde664;@j'Sh?*j.gt\(?ocjsLOE*`%+X?9LZ7)n6omU6q']htQK?A4d/DuI%=lOCp'!!Lp$l>op8?t+j^s+;bn+F;giXXb\a^>%\n.NHs0>HXMi.AU:M;8!cR&8h+\lN]N%I;q"mE&^i`Ajlp'O;(:'c<40,<"8pA-O\RlTYM:Kn>(9V=)s3(<c<hRk@tCm*Gi!>eMFE"U-rY9WBAHt'c9F%EOmnmk/PRW$k!jk%a,:p4P(A`tX()/lQEaq!mfOEe?_TcqKfrqd%%/g:2kLr0hA5YMXG\'Sd((!"W>7ep-OUJ*0Y(3YeLHt]m,n=.r:2gd6Kcp);eC=%%JlFh.osFu'_n,dcegUN<#*Srj<j8;,(lItp;%%]"d.-2(G&74cfon?VK+<VEY<1YgchaWD2*HMN<iJn8]?de9lr",L=\jRMo)r6#%Y<bH:Lmt,=3_"e>=<"Bo1&EV-C/(Hn5uF/S-U-a`Sl;`rd>IJ'rW8Ka;mE<9[*<X/*:uD%Y%c?>!S-D%9s(UG8km!Yhq*1.XEloG%AA=_-d2FisgM19a(*?P;f'SetX]t<(hd>Mqi#MLg=9Rl%>s*fMF##5lRn\LU$(NcU05s-%/&lX]>3kI"gEg`=[tH,c+tl^2A/u>N%MX$SE<8?F8*,3`7Fdnak!32Sar:quEL&NG&r?FaV/+!!p"I@fULEB^/(S-kb!A;6eeL-,.l&GZ<U>0IPmAZL(TJaP,kgSD37:ot<%r_&.E:['>H`#;?5`"&`=*+6I@#SGPMF(5/Bir:)\nQsr8IrIikJH^6VMEb+@?YQ3Pr,B@!&bV>F)TaK?H@<-m\X)U.l/>*-_u'eX%0N_e%ea\^(Mo*u=RiaYUn$#E2eXnYaNB_\+oU88FX4q)iOWp;$\\=?n9VU(^pQ*EAL0m4FCoV#s;5[:QlAN_o(8GdlIjSI&^aKe$%@&Jltg=%!_#+nUb=QSV"bUMm8Ei)"H6"]WPZcO)^plicIR=,>JEdG-CgbihFGF?N??FQ>R!.\08\tMU-f);ch_69E$mH;s1)7/)G%VS;a+OK1iLIi!B("e=5;X5V8AGF`jK[;J_-6gTGj]3[DWL:YuR^3m*/9JZfgo+4CAhtu3^(lu],5<6FIA]XmVW-R^<Lht<EM,Oko%g$'G-j)9-a('jEnP,5g&p75_W&%&4]GNEXrW1RshhNq3>CY$(CY@mcP<APO\s)c]G%uTl*(\&9N?WU"@M>c[l]e;1T<RNDNA2<%"%dIk&DmT#Gg#a2&S"<U[/(jE6W4WDQcOq"9kR8^<co<Y@Aded3:lVDh?eFbrRs)B)DHc+4T\oSu-*_<r\%sPnW/_?fLrh8ul_gOdn%Ck"2Np/^Y]cojhrYJ)Ai1&>(qE;5`c;;I/f!@FQ3/1YbR^rrJDGl)I3%8]$8Yn.a"MIR;1OEb)2.EWLUBN#HJk)YO_iptKrW/C+m%ro3Q@4r*\ZiU(m%D>&fupJP&rehmcHat\dR]MAS^]g:bp:-q-Ii(+QJ2p)SX[)l%5;51&UQ(lql+)/so]i2"r3:;[th;+r2d[I([%B@,uS\!G(h@[?=nlI6Ke;f,ukf[d[+Nib%u&&$`6ErqY-B8?BP03WJ>?@)C%?LF:g%no>8D]3q?OE/h6GfhA!\c;5Bobr_;SN',U%O(Sig$dW/L0]u#@jT]VM[k"%dMjulUln[7-Hi5O4+pq*HPj7p-J0Fnp:UdoppDf1[74HD8a,8?$)6*.q3$Vr3()rXmrS%eFg^^_e%EG1+e(YCaSr8oG]f.DlZ$S4C-3JqosZ"]$/CZZbV_c+B*5cHd'm)0JC*NcDeHg+S/s!t'-S%VnWo*-6&EcY'n@F,AT>RWqoE&gjF%@JZ56okrY8CJECip<9]0\(U3(9jXB[)=&J(kVT"1^@'*.@-&O:j:ZcEqdBp)Zkr,?nMq;f<odpVHsXgFg>KMQn6LQ[s.l4T&)6VT%468EUEL+i!he^?I-2B"7BG8Kn'+jQX\ONK,:Cu:UOt;-:_1k[ST^k#4VmMWe;(LlQ[1_BXiKQgKgG5AKMLWgJ9l":='?C#O/+tQ1%33<cK*Z@dhoX6qX7\AlUS@3Fi7dGC2[ITg\dtr-SZn(:b\*^71n#UC(ojXq]gP.MMHnckh5'nmmo5BXEnu@C0WG4=AFu8gm055TY%^%/`8"'[f")f*gj%R"=b;^_u]Z,Q-NTDPciKBX]jKsuI)GULCUc6JI8#Jj3?G!V0_c`m/1oOFg&pZ'i8[g?Kk=NXprRsS<\AcN1;%GI+7i\bfEJ5/bBYTS`#Ui]7[/\FGTS=qY5n#T%K8_2W[t1MA[`]"rGs,RSa&&^F"/:f(s%%?K's[+>^)$Q72T^M1&t:EL4;QR8?d%*XWpo:LC&6<p\aH)$[m%QqRbE;i"(i]11l_A)[&erF'Fu*[rJXY)kH`T%k!9aIQUrbc'gKd+KXj:2!5FPLG$F9m;iqqH^G$^Plt5%IC"_!_4[:dRLcn^"s&qt1U(jMMmq&?KmqT07^ru%mb%rg>Ar6,^qW$`UI!(doIK_t\i\C[3ZWR7\%M(oiPg%[:+P/OL&iS^P_g%U%jC=RBa]$#9j'!cWLn%BNKXDCm\-e("n4bfE4=go@<SK@E3Rq'A"ZH(ah6cAPh!BTlGY[q'fc4+,r#OASoc`VE:a&@BhffnnEWk*j%*RsFPn(!1@RYbPq_cTju`g[qYqOKp%8u!fC.%B%M??pC04R5LLJ*clI*slSNVk`#/.-'q:D3>oCO+U@(*U4ALd$i0Dc4eO<a0]gg%KEo?@o#/rH%*r]No2X3\Z+`d[;*B%KWio6[X^t^]Z#&=;.Ls^j/3<,7U/7PbT@80KnKOSH6Tom\UJFssFM?\)8VfK_9=2a]Cgp`0%:?Bqag5&U9"UL"HN`B,806f?CRn%j1+4[jPT?L3/K?kKg3klNq'cN+/24NY"q^#:H@<>*qmDf$:?#Ub=So/^%NhXpjQt<VW*0rB-%'4DuXrs_<]-I,/;PSeDZm[L%h]4uX]&],7]N]e9ReguppSb+U6caTe(lSg%'g(g$Tc(MOm7;N?K<,6me[8Ud*5gaD[SjK>1X\X7h%FbogY+?Q-sKf43Q`3BNSS>n&.38;Nh`,qLh;Zo"Q:.21EQ[.FW,2maA#uQp;`4joE1GhPgNlHR8,)T)jn6"6P1^ZoG`DcWp8Tc1C%lV:8.Cu0?h][nBm?SH=PdSttKY"\0CVc,X'JbD_$"H,AIoY)3AkWP]lG(b.rH`ObhSMPSq7tTsW!.5SYl]mEX9C#8-6Xs#=9l.-T%Bas+u8Jl$F%AN:NUL3JOJ=+4SUI:\nS;c4)7*Me7d>NX.P7XeQqs%efn+"Km,o2>K?<?8rO'7ISX)Sp#%u3f*)iMA4cgGQuhN.DF%m$0ZWnup0DLuOZR^%X?"E;E&Qq/"ghqERYIXYZLY(>_,on'kO#Lea+fpT,rUorpRVT"5OcC6V5Hi#Pcnn%R0kY*K>@^1k\#(!JYW%3ofAbm:hk?6(NU+m[B[q-lBi=i30&OFWJdL:E("3mul8h]d'os"^pJi\rST,^4W4q\.0#n9uLp`h*u=1)D7,,dr9m(R)W?GVV:H.%.a@_4)o_&`X6-H7NgFFm6-3G]r*(rA!MREZ_jg0a02aPZ>'icd]guA2C&QukSd@rT]9._0mqN<kJOaFhhcH!nP?R"IbkD9IYHC0-%r3BSu&kVP%SYZd:)`$EthSuh]\#fF5S]KGikNKJ;(KfM]b@FkJJ6@5U3<@IsGb\0h>Oicmd6c:YR,Gp>*>6P;g/o+M!R^7uhm"X6%U%aSc#sr2W3G&;FhOm6clR0F>^g<+$$3W#nGX(VH[&>q>D%Nf6TO!":PphZXDqjRLp8eP"L.<5\@SKK)at6-9'KD!b,+]1U":7+7%L)&$OTQ"n@^C>L<E0F2'(.</&;"#tr!"NU<7f+2@,lQ*M"Qe4<pB%K0U=l_G96"ZZq8QU+jqsW1JdV\K7"<ZpNcdPLkp`r4$HR-t%aDnhc,=cqF#&$6n6ceAJ:/eW;rOmH^=jSl2emF\!Z`H-dZ/pt[oO_Fu<cu%;iJ(i;lh0ZEm.9,03f8^*CT?BfDh.@cn_A2YgKOgf%_p7-!Kk**BLagF'/,0Sj^XqdG&(LN+ik]uL^!3J+O8%.;7e:i5&r#VE0?6SD]\`&[j'<Go:1G6`Z+as`%WDAJNirZ[bjoYSoCq-l%HbI89Ph3OYZKUrcp(nPCMO7$Ys#p3#N8ir.h30At(JA'3=cCOJ[3f/R:Z.j6AN(4MGKG5ulZccqS_lR8iF6APr(K>@ZhsMR8q&+3%-+\^nO"#,>]"ESYbN*;@3T3&=&Qluc2rdO0W<u_C/c8aVnF*MJibNMHMF`Z']Dfe^%p*O:fK,Q[HGt%)8L>pa,,aB@>_H7#2j;b'%chR)?ItlF5gWoo5d,6!G9Q9Z&Qi&,9W%^#!ClRjqP1@1H^SP_F;bra;b[P0?22Fctgs.CA=:aTT`TNgWP>83"_!AdA]!ShaPH(eP%q,7M#rgp?Q0U#l5'BY)05&ZubAbe\G[</ak4J&mWJ,d4;=mF!PC#>j\`UMD8QhH.Ilh/hPaHjku+9*W27cBn</`EfiXsq_;GGttO%nLYrW6Os;*XT?'FA?Hp-"1Vdl\;M:SS`9sbP<Br2<[QO`3%=2Br9[@7h+_-[T>jYW43NKQ\kg-;"<t8:qbV%>Z'AWR03<?2\'ec\%Yu+Y^4^T'5LFS:04U+'eIN@KNQ5e0?Q<>/;2Da#r8NJ8l-]P7ANDTI*a2X]pb&So$b8a+Od\-O4hs6:#")hkbhj#c'[J)W>Ksb#E%C"+X2"i&j(h2\<'hN",?Y%A<ONMEDkqEZtaaK6ETm)<cNUY4M\EOs)i%H7Uo^+)\E.?k+=-TA#@-+gJ@:GcQU51()C-!=RC<V^mK%S7P%soa[>/ilOBCS292ZJ[Z[mUq,c.SF)%uZ/eM+Y(S$XWG;3o:F-J][pP#Wb49JF_gd#]5rS*&JKa_><q`,thUI5Z3nmAT]fZ+>%SEHUmX5N:!U,R==q<VDC:fiL6'=e1![:05^prf!1QjWGoF:iDF@_H/D_-:?tD==cSEVXLilW["&H'c$;am5:%kq6lpMkKqt)pGHD%Yg^8T#1Eb)]6Y$JGXEj:$1HUDrOFk7Rssot9&ZFe]k2)+R9'=*bP#K&bPV-/?@Hi?H,\miIBU$?]D'J76eABW%XG7H&b`jVBARuR%[#?ZLnnp$daPQ=OrF><Aq,Y`ZCU51&@Uh:W:#>Xd]]nPGOuJSSNd:BsSQg%+\E!0%KElL8:@g\pO*3iUDgkj3H;@.Q_ct2'$JmT$%o#uGEGZs`GRVQX+otsfN7_-2pPJ-]<c!0XH;-`^Yc;+i)b%55->HM`)]QJ26hSq=WkA>'@4aYH6aKG9JI.?RjYAnoIhQ/V;oQ:e%%MouFanm\8@H+"P^mP'RXT)Wem3Rjd]4F>^an1TYp)uGQ9d7Re$]$\5tgg8Ad(Lu:%kJ_!1['5q.57eU:GM2+fmWS&Dn[NTf/=naq%g5BVBoA\aE"9%#pRu<18"n0?<W<FMJUKMK^3.h]E^<YPD-a.&hPlAgnjBF0WQ[Hun:>H^C8f,3\6/(q8r0?7TQhc_=Bk]`fk$td`%Mk*%;qbfr]a1f4gPO[`e)I'rRm>9aO5&H"%=2*UMmnW7$qR!odp$&kNbP/pq4>$>VmF,V%f3=9eQ55O*W_4jXakBYVI^d&06k>lT%7.48o8\KOs?J7U,GaFRBG%GBKO,'&36Pnb1kur"@kp!F<]6(Z6SmTo(HoF^K_h7e`j0:OFlL]9FIW'>4[G^d4?QS>,Tu"mRT0:WV%I]4D"q)=A#\,?W1>4D"3:[7qsK<:f]+@fo?X2Y(7s1[02p/dgoaoD#&R.kg)jjp`HU']!nNQT@`A@^5n(?EHunj]4a=cOBi^k.&]%=#rQJ5.k^=Q]'%&>KbVG];9(u0neYW0&A.g;\tSX5ra+oZJ<%tYCuTAb8'"60!Z*QM;GB\%SU:WHX*MNjDVMO<\B=rBB=S=5?t0[%=.tm[0)Mm$Do?h7riL!TGls2/H5VfDBd9kTV"=cR9_:)Z#Z`ZVC_rB>\$oO$:tb<u!mLim"o=(.`Sa?T0*g*mTmT\^jgKe'pUs+:%pGpb3js,jXn8^a=&UZFK#=2k3#bqNpRu4`@:HaJ6,Ki$[<Tu./]XkEs1fjAG-%5Gsg!j'+9`9FJeC8A;)og^YC>XEK#mGsh]+Cm-%&#&4D@O[OfA?)>u[8\r(EHp.GBo>-(kikp#K_gV)nq)?CnDHs@ELH1@g1K!M=\JKE`nGFCk?GR0bO]N27m=W;.Q&iqMsXsu*;4<+%_X^/U*f_=*?\ArY<AT"ThX]XGgP`sg,B?ru%r0]i,a>f!N(D-gAgCFG^aP=to>!fU4L_j8d14Iq,0g(0F+&&#hcp\aSsIrmMGIJQ%%ef>BO#Qq5qXrP@rAl@$\Gi#50/8#CI$<O8Hjs[Xe2#6s5OW+-CT.]=FM`r0)ocIffg'Gkca$'WF`sesXKu&h3FpH0R:Am+dU_*Z%q/aj]CrA>OCF-o9S*;8DOM&?f/ls:0>X^<egiLcM_?X"n2D5BQ7m8@cT(.(dZ-V=,9/6Dp=&XdkMdpA80<Fo3+^o.b?5E7<6Ar_B%l;D!9YEjK$O'h1/TuLhS<%m<$EAs<XMeD@r6*VE41#hfYW[t9T-?^YgIGC#AM=lI"4=rZdV.QAL4f_Z-o'3>"a_J&C!IqP)IrHj/%DfZAudPY+f?3Pc#iUMW-\[U0f%[%,a\_`>f.E4[?8bF+E30hr'nnMY0]VD'ol^R17^'*b-fj*9626K\42DU1sYZX'")cq@!ZXFQW%;@EKfdQu?@$H_*t1mM8/7>n.W>dSOV^CopLbf(nBn;3X>jHHj:YEuSbRW9A&I'-d?DM<;;P$?\AQ/L5U<\JASS1bn!FnS7QHYrMM%]=jIZh/+5SXCep`Xq*hpgE!&q]Ftc&)`ueEh7K6<:+j;VA_'a@h2\APerP%,@r[oDM%p)@DlhB%FQ20S]1/=BDN&hOE`J$)e1Rck%V\Q>*=P7LQ-.J,E.ripE\r$=&XtS2eQ9u&ZAE7Eh:WBs#G-]K`mjG04h=K.Eje.d"O,nUdrSpEoFa$]DV`KloL%P64[ZO<5X24G]%XZ)h0<a/XnQ&DPH-G!Mb1IlcO/5nUtpNF4h_6$utXPE8VK1@W<m[_+?\GI6QG4ujH+M!i]G8kmqp%7raCUI<gXq_JUZghGm.=65:%:1g-Jh<o`2^`Df\lb:_pTif(aYFk.8#D(p)hSIe9rV6I>6n6h^URqoBh5f>^".*-Zk6`a0eQi(Nk34S@HI!,2NC<?AG\1oM:Pl%E%-m[F07r]u+F*&T%NfI;4\#JE/@4$;j\nAP5S&N4tnT2:HP3;,!0;%(2*TS==p\bco?$1+\AB`#V@l<1On=NZI;XcNISnCfBpa>n0%>ZorED&o27(Y89@Zbl/,BrQ'$*:+BQMmoCS;V]qVju3@^`EL#[3a42.qp#g5#9.=-L"OLM[hrtPMt^HBq-e^Kn@Z?&I_#e3$GqDp%,$q=A?!JoZ`J\VV4+/RFh*#$bLB>lH>2ui7'ma,JY>TRWV5q3I::^(57eM)&T%ge.Y&0QXX`Q7@_cD,b2[=`trha^Cg:e#6Q+aXu%^N"[K>O$%^H1)s#$i[d%d73Bgm%f`T1Q,!'?I0tTrNZ+.H>gm*B+L-2Zh-UC^rd2LbBiA,-tERDaYqmu]YE]t[A@^(<niJ%?YJ&r%HpJ]^o-^BuBg,lbYFOcKh:9qf=ZPc>0DN_E*d^gD&$fA->,sed:<H8>dQ5,LlG>_0lM7RJK\fBl:TOEMF1HUEEB0sUW\M6-F*tE>%>ZcHR6'gi=o-`p=4hoi7Y;[EVXs)R)UW1F/`f8A0b!G[q,j!5&Vo!;Lp!fsP[i4OPZdLg/`T9SXWM;=0djIcZC;B,:`QQhU/%/So%[I1TLIX<B6Y-cY.ltsAIc>8naEhmXAn*q3+]sPK+iL"+^-XV+Cm$Jsbrdt/QH/'1-0=';@f?6\VDCfgPhL/LkGC)W*<W0]"@5?(f%EaDqCn>+-84er/"$B?>ZDkN+#?;B=Hc8M-o;Y`5_SptIL)J]BL<9D#G-H@hD5*uHN-FF>34NGh+X$!tCro3=6Ucji-ZYc#o?*gB*%bb&bKetH.MLYcpp@=*<V#gX?rq\G*P"*q4ePi&GaO8(uKi=E>6UZd(dGiEu/Hs`&d1pOFS*9TJ6j4C>$"<JEIGB`9<_'"40O_Co9%qQbZnB((dI=U6iaS@aCep53[<MI!!2>e=tA4:?)YPb!sYZ%/@-NL.j2/sMXjr%7?!,5,5^FEJYl2la:Z9Laddl)CMA<2=7":QG,n%?4c$mBj@eJGE4`^Q:>C8YdfXl@Fmp)/6ghlVB<q(^l".rq`i>Cj7N:%W(BZDEB\ltE>*08)glt2=b80io<rmK=O;<'CR2>V:A^mB%qi8G3T;'#Gn32sf(;WWnh$EY<Q(2_g/7`d_hPIo,I>lfI]@$$Z-VdrU7@<;[]DeB5&lZs>:0!dZU_EG*>p"3;DqqhWUg#YG6??HB%qlYE$$qeSiZe[jb=oT/lk+$eb'/f0YV\<]J*'^#LEFP4_/im</lp?)u?!:Sged&<T>;M`:X5nWR#e['q0=8["]=6Y&rbJkthq*/o%AmFTXg3"L:_5kUfhHTf0^=KFqTCnSEfsKr$UV6-i.ZaYLg7=\8%j9M"B+!Wh]bA:N+7G&9Gl2_G.](73mnE(E'4FmJkbW>fs(MWP%`B*bu%k+9P?e7Hl!D-)5IZET(?#P(9o^O$*mD0W%Ls>9gTB$;^&+@oL0>K!R[sU]e;bMNo6B<rBlh6Z*n8ofLp4._ABgb`D62R`t%7b_F[8McDPp0[F,Yf$0O+PkL*Z(J>i1!!4:c-t05ZX<J[EY&\*Ae`Kl&&8.;iPVlKEo(`a(EJj&#.cU@)4T1(ClFrucu.d.)BtB_%/j$-dGE'n4IF^.#\W/`7.Kra.?-of>1$!cOFOA_\S5*WVG4E6J;o>O9]RKS11K,q/o[,iV5\\`:*%$U(h7S-<-r)DdTM9ULqT`]S%Y]II)'AC+O>)@!\C]"&#EB"Qrm^DC"[C19Dj'<%o,Rl?R>E[;*dZSMnG.,#2.-td2DH@<Xh*G2hUq&k3&*^E]@="oN<,IUtMFHtY%X0KpW:+t0[i78_BZ"VG;[?:1[M;$fX0"*4mKqtu]>u!g4/%&GGjXO=cSt*su2rs;\Id6/M+^BfSi[lt<Me<FrH>$OR%5KA@kp#ZI%>e*u+VlIsil-7M>A@3nZTA85AMoj'9j?]>])gAR37cl>3d>P@uWAX\u'A0Ed(]8qhR7@P.;UrAe)>Dc92l_^\5?X>VfeIY4/uQj.%mQ%_dZZ8A/JLU>VpU,>]Y*P]"S'IK/.o/h.6J0neF1B^LK*B$d'F9uQAaq%-X:#Qdc+'BQ%OI.d*cZ\t/<eQgX4uh7^3[.kef&dE%K[SCUSW:oLl^HTdQ6%uDqu'-]l/,VMG=/ilGcn:KN:RS"UAK(^_(S7'mpbg1H)2803fL5bXkPF;Co_N-*VNT1mJ"nWD=WQ:?gpa#%_apqG+CFh].hH%9'2:LEU(gkor39dUds$p\;oKg!-$pm4[cO<1+5/i\gh^pUh]:s)]BoiT[\ZtGMW@7<OA=NNVsQks."s8'4Kmf_%p<IlL>1Y[!1Z$K$(IsVW`]`R?TIfl+dUH6"f:hTUVKK:lOZoH%agLacm>S[:ZCndq9PAc7]uHmlC0O_'(L*BVb1"a$OlUJud,/h0%Zpk(l`;X]WGG>JKJZVj=dKK[c]nt5@@5[K8$IZ?S</qbn:SCa1rST]<Be)g_WH<<h\X.WpNYh$CIQYAE5)^:<*i'mEn#h&bVK/6A%I,#SJ=[]Z@9MOspUX#*9Uq:7Im)i"%$gA#W-ZlBm6ef?="dKYm]\lRMYbCZAE4MTtFh@<&@H6idLIarJNNNE$>?qU_9_JB2/&qs?%o%iFA'eFO9i/`W$#(]IJaX3C'E<H3nAIR;=[T#"ld:.S[?JOu[?F03V,TV9A"b54u,-2&nloAOn?h.oMWp6"fE[R6U9;gD+'!o-;%d_"<m7aH!ALD-BJ(c!>F)h6LQM7.8U+#CE)%jJ">PH<0>:Bda4Sm)Hij86c'-<]/+)"sV%aWrC=.q1WuOMPh/.;`@LqNgugXm<o3%dC8dX%L[`QKmoQGD>85jl=?+Fi\T,E$hO%-?fI@0C9>8*=Y-Oe-n64Mi(,]Z1TO*BB1Q\f_`)inkf`CRW/BjZb:Qi<Va4:c_pI!6%otES&m2#%*%sRu_e_U3lV%kXGm\eWqX[%Va:gMb<il+9k(-=0][7jaa\QnWBL7%W#O<'naRX)h_QDKR6OSM.9QQ+8op&JWS1c9$8%QZ#oF?lldXiht&HWY=hhgB7&V,06\TeO]VrWmG)A4&!/4rukF-Q]I?@k9<"M100`?ebI;cQk)1$A0-?Z3["TADHhlB-'hlm[A8lX%)e5JZd<ZOtkcU=[/!dYpM^K=FYV2>0gKP:dmTLu$N0=U3k!bMDlJQ&'SCpSo6#mcUWNETXHLW]O:Ghg6#g2FEZp&&4a&j'ck;jiG%fBkBV+OE`u5Eu@m^fKIeCB&$AKr`C6J8$_cN3+DA>)q<=R$uRp+Ab_b%A2Q.W9-Yj]<sd%J^JrKSIFHDSANfTMP;4KNl#tfcKQL8%ZQCqp/+p1Ua5i"-p)B9]2&eS&S/h/f7Nk\RA<J#(B/!2U0WQur'c@0Z^LWHajk#.I2@4;@'[gLLB#i;F^ONm&87t$RcV<3:8rA!<%ZamSkia;fKkOlu[h914o8B[Bnh@]-n#i^OT#VAD0E8Fli=YN\\rFXgHdhk.phWQ?;(SWoLo%4of/ON[$e)EhBKE?I2;e=d-re+,q%.E43P\G#'T</jl=[Edb[':D;b9fQRf_a-(&^WBHL)\/;u)-`<^+Hs7=`Z'(U4r\-=6LN+lfV$k=$qfS9A-X,d>cO$4fHZq3E8n!r%@dtJ.i<!sJ.A__hOPKjF<kHfs_XbleU<,ZjeRg6);&d(TCWV(%L.%r]WcSY7`XYV]p(\_Vae4m8RQ`De-Xa`^Gg#QTnTOi;>!%8=%nt>Tk@Dn)e#OP3DAK)$V?2s<pKI((mEl9;W'E;\,TjM&a7@CeIPWlk;ZX$^YaUq9-U4S_7OqVcM:D*aJ^46S$3DqY6KnSP1+g"#n%(VH0':!(fK>UI`TQM*lk0MYH#,R=d,`S>+eFEjo;U^hR>"m7:j#<dOi/tBlgrG3u)b,kogmkusVe_dWqMUUK3q4[t%Di2m2j('?p%0oQiQ[Dj$c)(7s_j-2TV%67TU4,qFmqkpFlmcrh:*Q5q1]57E'iWS7OCM%5Y`bt6ImolDl:.g&k^5WPBLWKA'_u#i(7Mg79J=XgQ%fq!SRWh/hilULjX<&4EBV"$@h/`+.4$r'EL(AuHgBV_=m)U5K>j2[S;e&=]&G`pXQeX!rSna.e64P>1JjjT*DP7*H2,:e^)2"*n>%JL4TlIAb:U=rl/r[SsSQE/+pB_J_Y*TQ[u2XG<sAlc/YLL*`m?5)nYJ%8cpmAs<RRKlP6X^IQoeKCV2W*os9F>KZ2taJ>V@H(4*p%BE@2gRZL[2irAQ4h_A!9TcYP2TLpX(popltG-BsVUuQ0LiHBpmQee6XK=<Ls'WPYWHe?B&<:qfLbNPcrM@3J5F9Rh$Q!FbC<GK&3%2jYJIes2c9^K^ABdd=jqk>tlF-2l)rV=bcr0'DpA-i"V+En*4V')]S25CRWP37"CP(&Q!Ag!+(tD@B-_-?i;ON,n!G2$`Q\!HLc_%DnR*`mG3O&>I3`A+Ml,bU2_$%coteWXk=/b[+m#Igm3/+@os"E2CbgU"%p]W+h+XFeIK[qhAH.I*Z;YY27C2?4->`RcFNXb%oAL#%d=\Jg80@0Sn\1(EL#'lbaCVEq`Ql+GOTCT[<a``-W,bmY"74Z8]f.'#<_pN0_C5-sFA_D$+$+3e(-PlY3/V7:fNaA9#Pk9BnP$QH%!B-B?ju15sD"b_5lhn&=Z/A]Q)7)@qA(Vr:d9aN3c<RMYhH<^'J,M-m'OOV#"MHL3of=FOX1&;%S-e>Id7d0Fk!Ig(GH7ooFHPZH%]$369D^+pP-i=+XCeOYX<91D!-;P?b>uX[)bd<R7Bb6L^gj(f;eG<`5B(L(4?a&eiO3#Y=27_PmQ=W?8[R>6/>bZAR%:3j%n2M$n%`rl;Z=FJmrLK:7O_de\u%TQ)(ni\M.NJhEo>2:^Z@N1XOB33Sle(e4\/bk1ChH[[Up.4'NhecdW!Q`aeAWYel1o5DVF!R9;Ho]#u%0J7KE4Brj80:t1E7<!?19Bc\YI@$rL;q2&$HHePl`5PjV-=+nUK.k(fX"miL2o))dMfNb7kWE1q`Gc]piRa:N%)f_cFV)lkY2=(5%pIZ/GI^'6#EJ-:#*Gqp2`oL/D5e0&$4@JN$0*gUIT3EH!RMVSLd76,l<eIn[lI7$EhYETD!tdm_<a9q\B*+qKHuY&rjg*[?MkPX>%.3F6Wbna4]I;)qZgDe17Z"QX=?^#*\Tj.Rr<_glhM+@b\UJ`O(^IGaDV\o)Q-'QiT7_G,:fL/[..1E]ZCrA5l:RX[Z%L_l#Mobn9%<r):j(/='JITh[n^X`j$0555Cp0nsY^F&>=Qb1A7jS@(T3g;2q,&\C]RoHhDRSO2*>lU)ImsSM]*m@2&YeQB#pMMd8.gWS:(]d&e%OJ2tQnS5)d]+a7b:*^/)OKgk3MF;mF=]ICXl#&D39E#1Gm`fifrOOd+H./01`T<p_k/"N3!;]$kl2.B-RFE?do5hC5/gXO#$iZ.'%&:Y?H(72^Eb-I3OG+5h<<0g_KW"HIfhG-n/4^TNR^Om(PQG!D_Q<Ger_jVa>XkJT/MfDl_Xf90IU'3q3R#*6T#W,5?K&QE,E>Y9a%nW5'a1h)s/SI9hDWQd!/d=n0*XRu6#_U[Z!hU\g5iegVabT#jo&@obW)VH?+5LQEMh+9=7^#;/#4q?-smt2>5=rhaj_(+<:9^jOh%NuqW3'uutO#=k%YV5:=TpFK]a!O2.8NS;JQ;Bp!Aej[VO*U[61K,Zj,T2J[3^R6RR)LaR<f\OciS*`XB%Xk$(+FW%fgGhg.hkgkn%2V2ZA`gmg\R5A+WA2`GFMmbl(!ath^ldAf\^7CA`*ANi0Rf6C^VjS%sDsgBJQ:=aWfu54=bOGbC\MhN9AR\@5!G(%>A\>'Z/>TL_%fLFt1jm\>8%!NCU\,9t`8<Z]W.,Wd+=#'aMm[M1KBI8gX`RXhPOY;p@*u6X2NW@)\6EeB'`3h:&McLYt=/,bRm,>qFJhJ!s^O*61%E$Y5@.#>7CMoF[[5YCXOf9i`R(BTH"FJ)^H6US`)A/<Wu]-\/@Kc@ap3(b?\i.BM=RpE6Kq\;em&)q4"Gh&3B]sgmrg=mM&]8Ag(%^>G#X!0e4bdL*Uq]DgVJ"n\WGE$4mrR6-LZCl*fhA<.A`A1;\hMB(5,*Ep',XdPU-i0jdWOPkmn,1\$/NDWt5T3GN=df,Yu;J-;F%LW`*;(.S]/.ii]Bm7sLH#or<3:*C9V4h:7ENFoh"l;VK+a@V;t6u,YFE^WO)^!<st.S'JlN,laQC3&t-3$0d^cFDI97I6nW/Y`Pg%/(&qd2PnXXTjO?1!??#oScZqB.llMAijN>(75`]?l&rRnSq:$K^:6gOO4hK?/%"Y^d'erpU5tk?99?O>fXH@XR:G'dU(eV?o`9`U%\,$LVGP9,OaM`HiF]U1ObCbhH&-`H^F<K%UjQ$H?'i;\t7afQ"do/Grb#V:6WVo()KA3&%\o/:$C+U&:V>JG=Y<DIU!2B#8_/&J@%#hB>m]=nX;h-0_eo`70c\]$VSnc#3-A8cWM?`XKj('maZ`JpYidNJ.+ca?Tipu,i][8W@!oRt-[j#X)cn2$%CE"84c<->b3PPPO_%Xis-gZ9C1(EPGNVC%PHfNVcNQpObdcjh_8W49Pe=()L"P9U3:N=H=uE]fmJVJ:K8Q?,h3,bJhuIrnVWfhn3;9$&lh#NrliTC'Vu'%mCKZ%3aR!a)V_9R>j^oi*r:*>9Pd-NNc2p/A>)g-@j_J+E6YY,?%MOsG'C-Tibc8+N*iAqij/*kH4:=MD6nt'RbB2`,\\H\"[C[l%9\+,?T/6"bXKup!)joZ^5tQB7e^IJXWARSS`d1eEjO8GO\sc>(bEE(*!%YdF6/SKk%m&V7'!k"dQG8`DO*g2\e0%Mp,u5ZC=:(l\%mJ%k"cXJTULi.sL!9HY12)'!'6*W1+\3[6je`k1b64@JW_2_MR;Dj6;[-e`Y(7-W0S]+CLgnV7T*,IT5B&mr@AM]ZZ]1YE'06+*k%EL&9dI.+0<*8>pKh+s:goi"t0gO$P6&"Q4",DXHT!p>?UZ0I!H@)0YtT@?$WgO[^a#>Fd+F+R*-Y)[NMJNiAJVKA--XM[Xn>Kcfp%!9DBPVe`8[Dj><?5`n.0FT,O)':4gNkN%U=I1MGFq!*Fr>!#_Amm<gloOe'U1A(qWX2Dp46)8QD5I_1Q,O+5#J<b5%Y^!>kn*ri3%?e^WR*nJUq?I1IoVjKAL\F&g8*g=!XAd*ClQ*DbK46T5IEV$`MNi+t!;g66Hcad7C1&r9jgA0]`rin<V"QJ=Vbf[(QZe$+m7?AWt%/4EJ6+eRs<\_1=^QV2*/4@O5*m9%`di\Cl?!TUT4YtFb]*/i[/#Ou8$IXnN+!ZC]X=GrYg4YrNHm=c(hUTs%==[I"=Meq[]G/ln_%?YII1mEWLRj=@J6N(kF>//1gB=%A40,=T8glM7L47C4T!P$5K]_Hcj)IG+ucBm=Ps@(h4obKhVL.GQ9<?1]IF=i^nQM\,<KQ$0EQ%l=]ptLV<E+P384&4mY2#o,>>mp>r!Y6JHtLTId.hf7T-,1cho](`i.BVt9DSD'h\uq/TnV&$O=Jj$E8QD`mH$D>gStJ@p?bm&d%9%7_@(7ocrSG2s'D8a^j-8:X81sJ)`CA(:@tG)h2As>I^S@08-1X2Y:>[UG]j]b2Or.j.245FWI[>*Baa?^R08TX&\ZfM&rd)Z(;2H%EV+\G*S.Sp%Ndc_M3(3fK2qA!U@7cG51KANYH;Ec#E-<^<#!nU<ddNJ/%2ZZ/&C9HKLd-PM[p--B!fZY.1<54raF^qrg+9eO0%@@%)39Th>\P?H;"9_a\b6)M6\#,qYH=C-;kQ5epAo644tmLtI5_#-/,W[\4E:.Cq/]uKYW@:@Uu9kp!YaNT[0=R=$JbXb5PF'q#s^^<%/E8b_gtXWU$FW*'?j0Da81Mh>X>"CB@2RD@6Dtk97?ms'b="a!;*6jh8kMJd,S>$]#i(P*X<;Qr<our".DcJ*kkP7HZ5DP#Pt*5E%;.PMN9^H-I.#_daeT4/677CcN@9Jj?N52KMa[?sL0kF@82DS))PQ\d4H%[pb<@4K!C.*Yf+cMEM,/]O,,pjfdU4c>qU.C/4AhQJt%NjGC1JcgkV&M"HT'G4l,:0s#,4;%l4AKoJ=#ZM@c9LTR*-:_1Z9#s8L"DhO!L.E;:I0r4d12Om*lr.G'8;RCnKlm-Zo2c<"&5*AX%q$=#./=i.P_A/2j"<<"Z#[^PnE)kmBSB*^!KEHUTOU/#G[\0j(Hu]@%Y>D17as(E)+pe)S%`iTr+eu(MQ=gMu(m/B%()mic\0B?'%I?OhW$r^U[1+u0.pAJr.K^GHXa[=\c\q;-l*,]5P+;8(CM=?dd/0^(W\a]b][<a`/I9,FiLqp7I5;*'rR$ndW\VMLDZ*DZ2/1T!c%cBR?c]IX=WOsq]M;_jaKb=+Zh:m).k#ajXcN._11@-oR,<L,'\$`ert"OL!G!OGd4VBD"2<DRXd5Zq,RRBlr#"$-[S"9T9"@,X^T%OGA]1;0Z6<0ND^2:O.LV7:%1*5V;72JT3eXWA:VJe1:b[6(rN1BGO6r#"2IS/YL$aN?s;h!u.u09OTD'3<B;JQ>(-%)Ge;4:mIC2%`'mP-L(QCOVD(GN"UYoOI1FA"=:5deb#&AZ?Y_h4V[=+bj5M18<<]^*VB!&l"HnroM)(S;AI@E#Q*[:*#o62K3SnYSW1l\RZ:MJ-%]nhUN;C,>:0O@2-=#^Dk7hfWHZn=I2T`WPZ'N:,3J\i[0`S#e00WJ["<*Z+gg00.uM,:ENE'$R@]RhXIJZMDD&5EM4J_aS:1eM=^%T#,"MBXOe$,fRV7-/#"si)jd[]HW6!5"^cfa)Q^M7i<Sq=dYi_,3?>QMk\0!QDG^k/SD=^#)d:TAlR&b0/TpJ!7m7N8^MHM!Pf[X%X^NZ;e43oK@<c#d<7++UlB1+]$7QQrLo^d5<aD<f*2!]WFGe2][M490RHhI:M`)V,=`P)#YZ^!?%$e;PMqh3/<FQ7CN1S0oMa9f3%6X%BZ#3":<3U06O%TXlgO!MMh$OVitW+<^W@]s2,"J3$#UkT%@ceBH%7E#ll0u_^+"ch:@&@6&NYFo&A:9p2gn5#k/"LU\]Bdkb/%f*_@Oa[-/h^s_?RE<9+"YQ2ucLi3L`DTrf[KM;?P.+g4V<%Ss5W[`]OS4mQJK:s?d+N"i2!Z9Q'$c]FkN\*Ut+g?j;Sg:m8!Qk_K%BIPf]bVE9`j9o7)Osj7r,hoG4KrQF!H,UgoAJp1G1A8:h"AYZI9>U9oQ^pOp$@i2qF7o[C]Hf`[Q$@dpc3[IW172iC[$N#"XGl\&%@P(H.L,c,4]Y3a[ns676<GgPnH%H8R_(s@eg-_:F3,p?q!<scc3P`"=/-J+hN@`dcb8-!K,>f;VP\aQ@M&J&c-S(+@c0'nd!Z9Pt%_/^A"B>G\jOXNmma+O;P5jSh`TO9(]e9_Hpid&q'Z"1rY%,r4l_F-4$<bkGCX`8kg<bp&Fa`_'&d6^[/5X];%A3+]1JdAKPH'Jja%,D-[<O_74?&iq)76P8<1g0-`ZfoqZack$f2Ou81J.m/ej"I?;t*RDo.V')Y"8X)Z6Q-.QPNNrBo/8U&CBF)T\<joprnfgl.L;6ql%D0[QSOZ!ECXDMdhdrTVE:/icRABE76$-W`dF.B!u%`;U'1-otsPKbnj2>U_;@N'JoR@54b)bPrBdUF-%i=lY(@>eOP0oXXd7D4g8%.*II5A-L6s>G-E\2*dIE49_*f8K2+kHUbZMBroN^QkDcf(Vk8m[=TDQ?IV@V4lpqrPuZ5[BTD2V*l1RO'IL)Z($m&Ylnp!VMQK/o%#q^-S=fjt6!\sP]%L)-d^h8OtVe*HFH'Yp?Nm*[E%:J+!'mnJ&<WL@JJn7VAZRu%V;&/c[\8!=MVjJSMgR(<(6=CMO+4+t9+HiPO%M\U)A.FFLkboEViH_aoaS3sPe-1]hHS2)IN>TcP]/h\V?rKAW86:HetYb2cbd#fGQVEn0QA:t_jAM$T<Za2Pm<[F5L.Wm[*:=j)<%\PHGQJu*o-9YH$tW)V@#2AAliBOO6/7=#)dbpaE%k,A--_8HU%8\GS?'.K0$n=CscTEHaL"H\Ll_^,\O72<./#bu'rhLV:68\E;6%4A@sP%t\2G/)\h)O_"T>KZ`g51/UHIU2pR<b`d$3STpaM;rh>K&Q=JLQ6buWB+\^,VrD1I/DGd%"c%XSK]c>T"tTu#THH&nob=M:%9'&n"<6Uq65o<c_OtWgDQio^`QEl1`K>9b8Ge-EKio(IRfb/3V0ei,[*=(/aAU7@Jc5YdT`p-EcLhjkT;AP#\(rS"0e;/un#Xjsk%"%s&N4^IV@M-!66V:*"F-9bMNZ/J=5<0+G#)3rVUSkGp'NgDHF,Lg[imGT4@'bMjgVi[lM9.ERQUYlu\"ubDa3!p<!B:(G_[LQ+>%?qD==d5lq`49b8FN/`s#Q=];'1<3=7XC@']E-+9!Z,T%p/-ur[2Y",89)uju;5*&*TFKOUK_lCb<+#l_67Q.C&\:h2A>19Ea@/Wf%0Sr1<<M;.ne$`A0+SH&8HOQ,=#/3GK_)<Wq/D:Gn_5*PgI1W9](<6[p/KTUtL09n,BYbOm:)'Re^]\'s9Hq#4-R=f8JJA3k&<R`_%;-9ae+P!3gGmX[nZnVdi9p@6.5Ukd0XR[.(8toe]&.BIQq$g<0FQ.8a8<sr8N3sh07ZF-'JK>lgT85s5+F[N<As5!0_jh:i-%nc.%WW[QR40aB+#/\6>?e5V,_l=*Jg0(lfOXR+#=EWS2Q#K-h75X#R2LqhNo2e>=:J'3\X0_pCL-Q@=nl,Vj$5O[o0#1ZQ"]A$'m1:=N%#i%f]O*:ce+F";)72d*Q=S!`Q.$)Z3XAAr`4=!,L"ZmhlQp@`0:aL+Eh3]#n!+NrDMusJU8nTgu9OGo["l?Cq#[i7#6O3?'\s,Y5%7Zt7e=L]T\#^U;jS.T-t0G6m`85_jeF9E#^8H=O>[nMr&+BotWNaW)]W.*!2PQk8=r%Ql91"C3i-)HE@#/I1;8@;*TmA(N/;QL$N%931`dL6NSh'gj.VBV9;O8j^LC$k:-D/2e)gASB&G^j(UA=0io2U;E&sJ<n%^De)EP4`AT7dK?(q`Kq)I3b?Nb>8/R0B\FR2J>J&V%WCYHVQ)2(.$BhfA3KCm7cje4IX^r!A4_I%qRA4h4+Hj#Ya7,SVM,Z_W:gdiE=";L`A^hkMRM/5:8F?^m@l5"7--d*3Bn7`BO/bY#%&.O?/__S$Lp]cFD>,/DSFI5Y+$;!#>EaO_k<LuT+YeE,_"A8`II%U.lMQJ/5[aGr2b!q55LD`alFp>!RZ4gbO(%(LV<Z2^-<r-L*%%sgs6AdlQD3Z1TMAHcAMA7nS<)^@%-K*49%['E2lUghm6<9.SM!YsB`AlL=Qj_+gLOTc\jQB<ld*.fTh!g_<f@E<1"02u1T7.4)X%[OZG^,mFDST&^`GKXi"h[oKZA.m=q)\I\#Ti+D2!@5(O@M>%*H@r07P\k-`LWKIpAL>J:Fko][qE;htREM@-sc8^r>g&QbZ0>/?O%fG^eU<l%jn0XQoH6k_/jkQcNURFY5K[P]NLO6R[oi$%_=79bOFN2H2=c$g'14=OA]**"NrPP:ACSYW(hN"H3<Wf+\9(7TQ,mo[:H%l@M0/VI0uc;XHa3Of0'HBI^8D!91+i-\RusKn+4_(?FC4:SE`G>"*(aPHD9`W`UQ2OX4cNqm.ao#S^8H#i<q2=>QJt=?uhZ0S*);%Qn$gd9pV+t>/8tc<0/lU=>6=gW+,/6*e[IoU'*`,Q;iSMWXPXPNj76Pag/$#/8rk([5&7rC$4i>PKX,:&GKBl6?6t[+F2tF#T,XI%+FQ#2?oW^:mVnHn.@)_73jjjFWleEt@9>g^0ocpHW!1ro+Nm>WWD\i=hHGgea'!S>(Tc[=l]@WG/M`&(],_7H@F0!JiK>cUJ"^Ic%C(&?'<)4Y#\\)ldJU*J6*98h&&ZI]8V@c^4XK[696jthM>cKR,Bp>h-VH4@+_N</rL17/+MWgo#g6YAC',^sC"b_O8Oj$C!"X5YI%<='Em$creq-N]Jc"<gr#K<]'oAckl2IA!p2M3FZD@hBMuC@F(mOr]Efos$];D=NcXRjCBF"!.Qs"RZl>+J]/R2+T$$RE-5DO_lG4%$#TeWP:k%s'oE83ctMI\B]^1p^bBH>73R;>,Sbq[KZRaja[Ec]ku#<J&(.UPb(p`7=s9QtONGWi/-@:KSkM5!S6r*5Jn5YCs,j"s%(*?;,eFpuu_:W]@`aF6bLf#a!&0XkZTQ^_:ap?[ZMV<sS&]rHgSuERI&iP>5B.7U^!CSC?YTl8u3sYjr$cE1aJ3jja^ar#&*C\'.%"p5GfGZ1@&-u9H]V#Y%q6cPdP(`1[95pVTom1JlJ\cCd;!Ro&UCT2!9:sW7L#E&@+Za)jhOi>Hld9M6ukbu%n.[)/2Tlo=MjpDG2%N'S!fZBmk<#M'iiNA?`[\Kj$t(l>H#[>a7.kT9/qP0Hl2Z9V['#_B(?m(O)p$tU#!Tb+Fm&IT,F5O^jIlOcXApr44@_4h1&+\gX0%L(^IR^9J#:n-8,"i1^c/i"[s]YW?>:qBCd%KLJAs22>#0?NH+<^2PU>!?iC,A1N!0,AB#M3:mD0%Er):aj(CLP_>D)ehC^>'%pYi%8VR##q;ga%ET78@?3rqg841L"^<BtQK;j`]m;QhFqN*B7+a_uWL3g-R;CI<If>&-6+pgJ#0sMmcJ=p5f\1dU=?oSHSfY]:a'l0OP%$.Ce3neQo\cP-__`Z&?lJFtjS0t=bZ?kV.)O;P>rF?9u+,\\T%!LFOPZ04phN$B:SGSEF%'aeEs=H^\&)MI@NN$(t[SnpM3Lhp3-%(kZ%!"9uG-!_$83^_t$2r)>7KN,mE'-tG,/6kW=9#h4ac#un]'$k$,`g`fQgN"CkX$kad.'NVGI6QtAW2,nO%7A>Z.p)%fBi6_m7%i+TSTH?#NC-0Ws8$4N>S%+\RWLGrc9!lQ6S/FJa!fb41A1I+qQdJ>jhQtXo*j8d?$/tD)6ckW+a5b'9k4N-2:8W[AdPYds<fF_)e%H,:&B,0O1U]PXna;Gl"W[7""+%j)(E>"]\p@c<JHKKH(79(q7)$OW=mNi>Q[CJ\V[W'i`Z=i9I%$&ldu2/+_-BV"(D!$9h3=ign8%<JDg#'+Y^`i#i[D9\(q;=Wo(jKQ2sF;AbIaogu0FJj>l_N*]YlB*=>,Ta?Wu*.d,9=Ir,!`2(iK4\<*A5-S+UUs],k#n*j\U__?(%@;94:"VLuJ&#?d4TX`U7]Fnf8/3IEu=>Z+1(+>=AWCdj69TmI09WT2neq/\q(Ih\DPW::h;si[tC"-Z*6cY*E.?(?)dg:u_^-rI(%0IW]0*5M[kQ>#,MJE/tO82d\lDj%ntbG\u73=8.YQ?Z'oaL8J+=J8IkdhF>V':>d4^1$hnPS%;&XH-eN.RlTaoj\u-32tcNRN_Rq%#btV=,%a^skn.bj*dsbdMaSp/.$W?sKSgmlC/#k;j)#6\I*]+=4I1psYNVa[J44Pn!jQ9<Zsu\(>=&IL-11l$"`KfH4?^YU4G=,e%c3dsp=:'%a!^ije5;@m]GE4G?Vai9`1)5fNAZQOX%k3.B,E0N6R.s`6lsn\$0M\Kg)832'Ar8hs#"!d%WXlB"i,s9,TEHqQr<Q&)%WjVjN8S$:VUcoG'&JKa=NZ94*YcOK/Oi&XM5L!)n_HO3rJFucu/(),[J0&tB%[CFbVud-UfdJ(CO:3Xl$:p1re.:TB'Pkeqr3Wk8%JSs7i[@eMe,DdSK09J;s*g31hUCl`MG^b3_(Md"jh3^PX:Q5l#LbW*V0Lh`CLER:5&\LB<!mo,H[*0YT)P=rNGW]Ce02U+_qI<*f%Pk6>"LWcH"P3e;KElLFt"IUS/+9IaP$51G-#<Ea=6BcEdK+-#bJH_)16H12\Q&DnT!lbssQ&s5kl<7nN8s_,Jq/Al7#UV6tCs=15%,$'Zh5]3mH*8DhcR2/X2L$*,G^tXDG4j@Pl$=jr:7r^t_"r62uU1coF,*iQE,&adV8[QcI66rI[8>'QT&J]M=kjX7B!n@^9U&GDc%&]U["SB(DW[@k%#N2cbX,_[(7M`@a;CuKDZ*:a'8p$LCTjLDK?G]W'TW#&$e+DK"NqlV6WluFu_\)RQ3Q.4s4akW<+%u="(+=SjT%>@!"-5ADMjjKYeO$%[m]$EX83.l_0Vh_%5!L6b'S&iZ'%?]`B(_q&$IW!4I3dtW%_#X6sg\'7bsFJ`SsEM4&R`nA.>hUWQ46LCah%J$nZP\Ab`>UT^"A%Po)d@BE,]+G";cFKqQ(+s6oHe^`jE@?7g.]E+9<K"p2Sdk[Nu@7.+97jmG`aUl*r_JH)8rn0NPDu;0L3SSjX%-C#_P-tt`Z'7)M]gIT(M[\9!13tA>ZH3nuZmR/\l,=CmN`[PqbT*bFVYCcto,\6uOMfaWWS3D\PeodUaK+(%i@)aU!M[O2BWMECD%FOD+^2">1BKt[^5<ES7FNH8sXj,CgQ"n\NWkA&3`\m-a>phA<!f.Z%XnO^p?>hu]o_S^m,kc@hgi'O`eKbj:r_m83a5G&oc=>p.*%PJA$,[_c,>7Qn[Hlf,7+$jI48?35pJ\dADrA8Od=!a\7cV"PA8QreIWi',aW\S2'5-ZP+De:gBt&KX]6QOb0CP'BP8G.p_4q=Sg5%M'MZO+'6llk1!3cQstNd\MZ/`pp]uX_72W4Gbp-(8$#b1kOahq2]o_D(!$<DFiZ%:](&7>8_U"A517btjnBntb2#38r#4K'R"j5.%c$CVQ``Ki$!h>JYnM9m2N94IeMhg6R]8)S?r68FAT:[+7n8hK1H[bYn2b6lgN'mSA;F<Afg''\\e!#)r`(V^ro5;f(?@l2ZVQgU1%ig*mW-L:#:2as_@BFQT0G'E]jTic`.T)7iO1aN"&5ItPOi1hs/r6#WuADSFNjnh5P!04qDSilEhCKs"n`JrZ9ouTRD:5g-oPE3TU%=EH&>r>9HnKclrBf1s3..,tfRm@-`gU-&:?"4R3eh;%bq<1hWeo3`a`hm/W>f6(ThRn)r=h;+D65()UU#SdB`qd[H/V/0)d_id%f%F[MOLMK3#?XbP'B%#QfoWJ>TG/kgZ-DWVgeksP%8Vlnc;]uE5_bOM?=n02T$W)Ir3<9CCAo(gBr;ZL1LF>;[.(`f0gomsr`[^Obc%S&^UO6lt7[p>NPC*>*:I5$g2jZ%Q<ZY,L,%=:*E:+mP.!+AP%-5>kNZ89V@iBqG9Y6'p/:/'Y%akMHWc[%!ZQcW#*ofq6823l0G4%+eS-^k'2+!Ukch$<;3"4TB&7bL64n*P^O&*l-nu+rWMJCiDXZ;Y%CcVbV3H0&%(X5>rfAp$3FYV^U^.M0STJ3.":I(celW9-Pf]X%Dq;(uLOC28o<6Jk.6bG`B4ru,N,=VOZm-/jdFqeq[T17f:=%2+)N3a/6ropMjN!"dZGd@egOd4h:2nhrr6:K#qNn$KWrS2kr#"!c%DuNJMYoo4#UW;SHQ;GeomRD%&RC+p!:CLe(3_$c$4GSRJKCp@dKthW/;RVVr;ZP4E$9p;VP8N`Mm(n4G0tab=J39&N50PJ2d&fNS%A_aX>SLf6Jh$R`qS=W7B$B&MCV+kbt5J((Gm,>c`93^Z<+7iWW?K2CCiPB"Wcf#;U&Co,]I['N.Rp0o%U#I?*!!%\F07b6%6J[gt%A_Gb]H?^PW`R3MYGQ/uRBfrtg((%,+O%b9<m_?Z628(EDf*fElfab!1>d1=\Y;J602:F;^`Ha;dHg>Pb:='2Up7:[9\,!P>N@-M5%nB`=Pb^J'eZ,=23Se#D-lZe,9ehsW5DJ<6jC\fDGRO3ht92-s2)OeBbpgBPB&+;Cu;NY9la2e,O27"qhEaiMN6F(Vq3g*6$6o(r#%?)':`,$^'5+FgV_j.JW1%0H=UZKt7l[Qd-VH#:^2I"SmcV?5eB%bYJ"MNO*Ypt"q1DX@TQ0kn<FRh<nt$[_%2-):@SgT=BMe_&f[%1?(Jm`NFQs1&s!/U\W&3KS&`?m12H"I%&$EFmlj!D9^QEANdp%QVahLHmL#W]MeSEg"\XSf8q]q+e^$+E\IlV-PLsH2dE\,-LC<t%DdfS2?bL4t&3q`<Gl<XRWR+n(_BkZ_Ql9k.!DmroC`Gk@d]uT;/S#.uik+cQkm7J&:/N$(m5Q8lb100Fm.C82!a&eDbZV,:H_t+i%1><%QD9sqh7VUUA[r'%3X2oKDF60b0;,'I3BE!<=pVA-_>fpdSm!r*=]0D%)[haTa&2e/95g(j85BPjSF*SPu^:s.oF7k_N7=OOE%+Db!EU*%'=p_@k:bRa^Ia,JH-m7^lc3!YZmdZ&d)"$#UT%%+!+GQ1a<_oY%:eqMid$B($A*!5Ze0W73uK0tkbO89#ZRK>^<DOm2G%On!>TEf*a4;ZP'Z7g#IJ"?3.Nek<15/,(MViD^Mp>Ll5WkV]2VD""VG$DNs/#BM+D(p[i2)Qt%?%quRAItTIg&eNkT4b"-6onT\d%qq+MPq3CASVg]:J4$RlL+H21R:\mD>?*D:.c!T\Ml>L&$3LQ2qp"gUF`k!O4a#j6_B@_ToFo=<n8L@((@b@QqS`A[[<,kK3C(&/H%YYInDCU5S*^]aXJWFg-I)tX%8qf59:g0L"5H<H3.pRsb1q&V)TU$Sao`_Lqfg+rQLc)A8+.][nA^$^pN]B-B$mUq#s!(U=47<^rD%[[&<-UAja/$`DDr$Rf+PD#e<R2B0F@\pIL(#E/2OI^3VXm_#$l"WlO<#3<9tq?Y]Tn`T)BCYRroN<QNjnhsA9Z&`EWValotJA:c;%a`KS>\b(o5+6VE%kX54Jk^:s(5o*"dEGf29CgVHWe+q^;gm9jQef$)^.PI#X'-U&;@_Daaf^V:kEjg;=1Q6cc:MHH3I'X/kGrk]Q%lgD<eeQ5i9%55i9.NQ!gI\"ca(S5>#d!7PM*m54?S!J>dZU`]!LAg']qfOUU1@e/m^&H9;-R4hB)$ZMDE"e9%(qiZ[6!/)kTD\/]%C&O8_*Ic(<ALiPV2g6"(Btf[3o#G:9HN-O&eeJ$ig0l)Na/SNj9dTUt'cf2gOi>fS>D.08?CBO6&h4.nOVG\O7Y+CUC*q$UXk.!T%GeN1gq]KETC7@3i?+7=g-68$AmV^>X][KrB-l6`=*RLa2/LPu(A#.<2m'u<YFZP/YJ=&gJOFH?)il\cB[io0Sfk7I'#,0t(lA\st%X7%nA7$+NK6+tam`SL*UIf1<Y'l_$*/75o2pO'@S^LT5THqY@iW4mO+)7PPhTPQ6\&>[/&pr-B;pC2t5hCGf?9:/?ol*e%]_lE>o%_TA&Ia_;NM_.Yc<GP`0_Sc)deINI]qd2J'7<p5e)cJAGWT7u7-Nc9lh1&S=75Y=@0elR,rci@oaZ=jl;WC*e]*<%tE_;Hj%GcN$"%m5EY9N>6[Jk7FZ=RiRVqncsX/_E5?rq[N-fZ>I4Z"a(/?4jWSho(gCM9:8Na"HAsXH]F46i+6G0!FO4.qjPX*`X6:3-jl@N5[m.U%c/DS:bScEO[o=q:V6"5(bL/a6HbkoC)$1@DdlNtsh^OuA?:[AAH6J_8opUO$.aaT/3jM9p*uH0.FViklXLj2=UcCW-YP]6chB8e:%D?E-IXKlmqDab55S/>?_;H885m#j4SfH7[[:FkaJV13Q!o.26>o1rY;VMnnJ62#d8"'7YgEFY6tdJs'5A_mK;G]mG^I9=shFo@I3%flAL%;$N,:4rbE1*56I749]uU)[s-/h31KqJs6)"kTc(E7%4cE8G=Ttnr\s8Vdi?pM't`$N"MdD?5Y--isXURGfEPK:k\0aDFED/%,+/UqkVPniM.ZRId$MB][Z7cN;K.lbEVUF?T,m#Zc.%mhJAoh?lpit!4s^&"fKW]q\rXsuf>!`Of5If<ql.E=)>5%O>lWsNnf4i!%]=`%KoD@,>QdL33I8!XjcAGI<D\%\`L0IJ4q*&GQ!sA]9*1a5PX=Am>.J/7-W0GTI64u>1^ce)4$bRU:HpKg#a,j?"r<1fThn5.R%*asQMPJ(VB&P\a@caeI8=5[MLlekk\Fi;`4n_NR@n)Z\MO)-LnL6(Su\1V1dF'<?TT1e"J0(bks@rSBq1#+HO!V4-0NirH.n1SD>%T#BlD,(q?1kqcMB7n:)rHV:VcV,)R;(mprOHSNh>Q'6@3gi[9+--+[[aIMGEh*]Hi89pA!-]8qQVhW8Kb*k1M;GTfUN_:PrhMmuk%/HjBiW''M%b5=erdm&,T:d)8f#P^jqiYu^'W4-m2]G#rNofaq-[<u7L6s1I8pITu<O#UPo(C]O@N1T-6LJ&("rL>6:o+H_!-VI[)%c.*8oqSQAAB7VQdOXM$Sb,F3NT)NHVHXe`;:X?HHoX1f/"e"K.HM0"a6g<rDiI:=L[0_\pV2UEFLN$gS+&g;nl'UkMgQlW];>]J\%2]o=RlOZOMYUi69J=',BoH;u71G':J6q7L[/cZb=BNncNG.eFrRsIdCU_>$$1qHNMU!^]!1ggS%RIB8M2Yn2!E00H%[Pu2Mi8ZS>%AljCsV6_>9?V^5f^Z8MKk@$]lrm6oP;q\`=g@9+,3BW!pJNn;=a'W)#3d.<0_FlNXERuuA:]LEaR0isHLI1f'QcWQm%s^[$.iDOa%>Hn@hh.1I+4ElL=]8Go*&7uIX"donRULJ[I/00Nq.FXN2=aKa)5TL:Y>u%0:\W6W"b!tuDk,J*+>r+Y$o4Y=[%u81N2#AP+MV!!?%!=.S.hgGX0K#U!-^0a95VU&m%iZMDVm:phMHO.Y@Et#J?PV?mSO;l@,Id"?d<#;\Wh+/S;R1A+Rf[(#$ApPQ)U/j&?.H(`&0Uo`C%cS(,2]YaQEEA5B5@tQ($=e!GVqq7bDPZ_tDL"L0lpbddsJ>X^6V^pbV;j7&<\Ks8W5lP=,/II_MFF?WO,c"'[VA76c>o.[r+?cKC%IpB*mB&<J0/aF5!ck9OiD>EUj2)oTbY?\Q\qo4FEAFpKle4gZk8^`0%Zb(RaJ>?nN]a<6c_cO9\2;0;QS"Fu/hs@@>J<[(#:[cQ#%1DOkZ(P15*05L1*cNt6MnACY5isUubJ-,o^M.j/`g?;?R/IID^Rs$-W7YYno[Gp.#CUXAa6aJcR"CF>rENJc%5oo5QK%N@='NbFT%6'*O+P9r0pQH1dK=a".BXNTM4HOIlHpZspOqe*)s`D1M+0D#0;S9;Q4L4meBY!SQe1Un-h&:Z6#fTnB"Gp)K]hD;rJPdTI1AFAQ7%0-%;,[[I-:@3pP^[&[UX4_^1uoWfMZ[sX"!rgIi\rUY*M#TmAsePNW\4?5dt#Vq/#EF`sL2Zj[gh2E7#)Ujdb<q&G!c7TtBdQ_f(%!XBaML\ZHQBhh[`;C\"VHYFBRYAs([+IUJnk&lDiUB'03&#aV:U,2nCT>j&U/U6+@B<S/sHqKkd#rqj;YFMk6IpC!9+]Ifd%eQoN%]8?i$]hDnA62ELO@lFGeqEn=BI5e<6f>#CY;#[1[)u1301\'OG4VGXu#LYXAb?A8&IL?tpr7*5I.*6D?Qb&j,"P:,ORj%A:d]LS8%30eZ89j[35PjoBUb$n>QB@OgB42I?@8iomBHATBfh:L*.La@c!H[ZgH#+:'I$)^31#dX'F$IWLbO9>.P]p98(j9,GSGI&Nf8F6co%^Qgk>%QXJ%/G>SpdL[;gh/*QBI7IoS$:;r'+&K54<u@@KIb,0T(H5RIJ@fC9,(9^<I/"[a%r^%(0$rX$j3OoC3NZ%ZaNW6Jl8*u]%T9a?1^b@Qar%W.okhUZ_EOag8o4aeKoNZ#0if_]^Tm9'l!\tg$ZC;>]<]CO[(0H"n$Bt.IOM6oPIPU1;B>"gMRX.WT3`.4($T*;S%rl(_D&N"Zj"J[VCj3nirK5Bn]!O>99"Bef$F-.0R)]%P-cZM_6;)O?5cU52N0ub<Hnp%b9Il_GV>6BQ9KW4N@Dq(B!\B1tPVjI6o%>=rJ+0)a\"6YZVic6T]\O7(b+mL"HgnjaTLR%*3S(_kiakqO9%FX`77\QPDf(YBC>o5t;,S22*,W8Ve_A0<]`V4P$hd4r#j+;9,8%[B^Vba]RMVhn041rN3]R$DR9*#`^\2%8c3i53hI2:D(GbI!6t=6UJhm$bI'K]*^r/!bmXb0Q;7i0Uq&"Q!d:]b^LK=.l=NHr1o=]%KRGB(WH\hE-@b='S&Z!DRBlbWmd5:\e-`@:rqj1O!qQ>$6,28(G3q!Si'=^fP/Gf1Hlo[/IJsYb84=Yj<*h,T^4,N")^J^Vqd$$\%6`K=GQfWM[i!R)ZG%T8RPIla!K1hsQZCG59B@dN6nN5tm[n]>UOc3K_^P[S0;5<Jelg`fkCbPanX%&fWm4GU\e]lQr[AX%PI&;HB%1@3AkX7$7g-9R'-WR-r4Na9(4ad!uID@Smf%+.jVGg<S;Z&X>(3r=b5P10gkMtQtVYU%RGI!(E:'AqHorh=5ciI/*-IU=nQ3.b:0%/NI?-MFPZ2Vr(^*E2bGoo=Db`bKBle=fP`[VUMBK2:Z@@q4"tmW,r.n;)5a#S94#:X\'AAU/i/Q6(c;3<*knG.@kQ5k.A1Wk[M&c%U8Gei7FjOOGn@[2N5KpA!?R>^3d$9=6,1!ObqcsCl2k34So`KlP+S+cO'V>^s7`Fo4K[DYM<(.:.FeN@$>L8]2uE'9EtD`-#G&lo%JFK=\I!@!CgbgpKXCUq9b(M&pV9??&/Z_@sX\1R:_+A_%E)oi"+:AM'$l=F\HC1me'KI)R/hMm?lnj,5\94+8IlDrI;tLH(A\73k%.+U!k*r54>eh-,k`4L@9gOXWq-AfpRHn*-W=jA\!4U0[b*\ng4lgW#d#@u9a:iJdW'_-pgEQZ^,;;>b`62fm6`2:1Fq041QUeEKJ%fVO3=L"C$dJ,L:U&\CfKfmVtp)Y4+@OC'ca$&F^#*>sMt[O$\+eqMs'J7m?_@H">;D[QTcR7.UDh>p1%>sq=/j"t:eVe&G#9"@p&%XZMgt?^otep$4kahg.epAgA\"5@nX?%PCDH.7=43ju0?DPEeuO6<p_-O+pRqpEMKDT&+PR1]pPAQhMI.^k1fHW+`KpV_$hgoWu!.%8V;-*]N_U+r$FPaT=Qdpo_0Ps^scLi]4OU99]ZM/qj^eo!;Q&0of6\\-TV.7A1E7).%9hCAgluj8Jn-/]2D.p>7HWh(P",8_<4q[%*riWW8+B[%KnW>/9[G=sI10XA`IQfUDuqd0msq4=>d'+jl^&SR$6_F\$D4_k(6('V:43Je0/i3`Jo;SoQ0YCjMWX>(5^U)fb%F(&%^KbE77m[u.g$DIIe/uE1?#.l>MHS&#gjn:8QN!j6(YS'JoUnj1ViPjCes&cmOd+.tIsoW=qX.$a(peK0c('7)0$IH>&KLZ8DX.r@%%'?jqHrp%^?:F/R:bC6g7YYr/3Zt:/D'`dY1p?-=TYh9@$-`oE39f2\lE6%O5+PQlF(L5Gcl[N6%'nt\A.U:K];k(EOYLDuS*LmT%&@6B>2p>\6$.(it#2-&+$GR2Ti%Y]m=;+T]9?VEhQ#@="(%UO,DB4]jlnbYN/B(9ZFb<R]0QI#_jYu),;o^jT(SM3C9Hf/opq'N2%C<dM=4u'8oq?/C1C>:Lqb3u+4\Ea9NFELT\,(`Kj"aNgVEMDB&&4)FK/<bBV39<ftFoCZ+Ff.-+8/@E^U6(N6"u6sL,AULG*P\n^%I.;<SOO8[1JEgoIG6>[gc,cRYbP@4P,)?Fgf79Z3"!-N4Z,.[TaKd^o\d&rcS#dl47)[,rRd3p%oHAMG-4(KT1$S=N'dpss'X9Y)%pQq[;NpdKug-KsrpsR!g!rK"-/tG-`;R4W%nj,c60RQT>>`qf)&/"S8NA5B?A?3:`=1:S7:(K%ceohZ#+d'6E1hD393Q,n8a[#HR%5-Y6F*7.1M1)YL:C>DH<_=I.gqZCt_W^[!jV`b6?29]OIb#N8gk_23.D*'8:;0"3u)UKUs%Fs1Ee=IDMf^.N?Q*C<u*80ku"H9D3%GA"iV(b$Vb$aMn[;8>4CV=b,A:W9tLI3mPV=2ffKTSXWlbCf)8e]3%Ikb5Mp+mVaJ&0,Rtp%(1(O""EAP[^Jke.al7F:b5627_R)%drILI5\DN]*\cSH98-kfdFaE6WZ%/G+";HtR8G-LP7O092$mP":Je>.s+gtt>3HtJU4?WN(Lfi6.$447me:!;<TQrNPn<WqA;O#\%,6)/PODKd"'!@kO1d4sb5Q?lZ40-MG;Bb7(_$X1i,@Qn,,n-`?7Ar9RWP5i*IBg<a7PgcaOP6P=!`"!K=5m?-ij,!"hl)SOStE&+%&Sn:CF3Ei3:1G]$$[S=KUQ,<UojaoZnELb&K!d%9.Z<&AC\a`!SUdHq-:\4dW4gH6&1WM_CIHo75edc*(p-VVX`+`,##i0=,W]<:%$Z`d-MbZ.Y@8-lu1mFDc@$3k/A_K+@[S-!V>RoF,<Cl>2>gcPAZA+1U;;sg)U*4'Z\V,FB"VRuo9=;RfB%+LCiYBUBSSb"l53-FZ%[hKDpA4hd!EK_MNf3P-D74.O"c)!aMUl8<m$ro&g.t'n^I@:cuTJ:D($.9JlQcnj#JHY.[Qn;`P(?pq"^pFC=X>^nDjV5pESf3Np%gSpf%(+i?6ZMgFh5R5>7<G9/s/s#g*rgQ@5bG5;Ek5qJ0oOm7_P\c^PXU23sRBU[A(0I?O6DKH`\6(jq!g3NYF.J0^%;SOT?sF#G%o8f\AV\3;<XAg8Z&k-5,#EkcY[M>T)V,cEEZ(pSs'sai#NFf7]'+fr>-=e__C$Gr]mg1-cY_Lji`<C8q<NU\&PR^aS\8&^E*eEQh%IL]RWrN3]p=7)A'^eg%QMtZ(=VL+9SZ/]VY,h#?+qL.6>q3E+2Tk$<cidIUor$b9i(eB?;7J5X,Dc(aiRn@_+G*^AXQBd3X+%X8G%nNN!G@VX_o@XVJ#2KRb=Y6q+X-=b?4;Li+*pW;-t5Ni(8dRm`a(?rFU8hY<Q'QF&2D(^f"kWuj23bW&(Xb"7&IB#O55]ARQinhT'%hKtY+k$6p(#&k<O6\3B"YO!s-+(Afe96GP=gS's>TnG=rk#/b%h[8JCP)^q4\E4#aQ^C3HHfGDW(BB\`P<0Yd^G)\tYgi"_[/cj[%%RZrB"XsRH>;(.GZAFai#XHMF8ue)9r-C)mR'I4.,@J[ZX#P3i:e'O'=sC'd=5F%)\on^@p5r&]/0-Z6U+lY@_)D&>P&h%1JeZgu%Z1pb2+00;#A*9R@o(/Y+`aXU(b_1INm.`JULG2UX*jbZ2LpU=D#Jr907n?aD@:$;ur/:I9.A7Rs(+nIB.PF08./O`gdPT.u7DT5*%A1ej*%S)V-:k4LFM,HbG31CTr`)p$e%k>g<?\LYkC"S=oIVR-Q9Db.]M):QnWNXJ%g0<aa>4DY3UJ<P?fE(c3::N_G!kY9ZV8YTF%LKQ&t^e7gPmId01fDi5\[52I!N%Bok>l0SYd7mNcAsc'\$H`L*V6^$@$='48i=]XJ\crh+<;[#$WQ.H7;lA\%f<NLSM,(O[RDu?1%#9biW8u&p0re_^";/`!TJ3"<r$^j6oW4),pf*F$.&s5/tg5G<O3g45JlahT10$.RLI*ObF'Nq=fpJdeXEe%SFJXpiZ0r`)1bf+Qb%O%8;PU_;+e6JJd-]A%AV,O-1C[sh:W'XBM`lTfRbd&L%],C0d&(;=Po7h=L*(]@OY`[RZ0]VL$]!+$LN"@`rP-"^*^j_;VE@RDTc%RZNH7$H7?SU]Il(5i]cN):/b_#GJ$2Td4^^9<Mu#:@_fG1cRrREU3G!6dfLi484V?_8m1dR%u:X>RGi.`a*kJT;0pE!PYU9heHss%fl#Q"FsG0pY7p<ff,.(/81Y9'Q8%fVZq2,NoWuF[$soTJ^V4?L"H@eW]NHjf&1Ze2;iYT8oKGAS>U;n/,`8%*ZK\9?6i=6Y1>A]d%:g#"E6ASKW\_]1BHbR0%<e7?VMVs6h,O#bt!:583P,Gjj<WY0rf4oG\<NV8?e7%-+X;G08@ENa(gJ9nEhL_OIbAXr!VkBCTS$6Vp%qog@F<hPZ:od?U"S7%P_mSD/AVifd2Dr&)K.Ef@]+Bqhi=R1mr&S.[1Y")'u\SIg4Yuoq4KK1RW>f/13$975#[4IPW8#)/FH5.)=%-AdK*XXG(S;of@Mii$ddB.1pJ;<QVG@PB^(JRmJL3.RjRiJ8ouGZAhW\#4V5>"9c@T'eY9_hX)5s04DnACs&_lb09-!//hf;(-J8%Tn(En73@kO"j3$f8YMEgQ-WMU1V<$HR@gR;&$$lt!\(J!L\bhN\,fOc>B*fjq$_g;],e^a9aYE3UcA'M<BJk8\;l9E(S[%1j#<1A%mprJWVsIP1KBnOV+2QEKZgD(_n`eFF(?F22`1\DX?qs@9E7lb02H[0Y`[N5-7C;%fmJ3k^Dce,fKD,2lBZ=/$[e<pWEn_^:AhpH7%.16/h'b]2_Fl?fn7OWMh=mK<+\Q$elMY5r5m"6YYC;onaYeY[Zq,u5p^Y5`$IHIeh><!Po7E>Dm;@TpBhRVRZo*^*e>aZ5;VR-B6%&]XD)\;V?X.>@T;84#C'V!mdQT<7TDU5c8r/T)u(_qW^pX/e!TIYgWI-,#nW_$$3;kt.3opiCI<Bi3t<]R@tD@hJ"rX=lJ4K5@Ol%*9W3:WYW,J]cS7NKWpMXrfSr;;Dt0-ZVP\Y>H#[r=h(.K?M%cjb8i8kqC@V#AupWk]S^T[UCea#('/&XH?tS`>FU'#>.nNQ^JS(J%51i\I9@a4op_kDL7uaDB;"6QDAo7274u-ON)eb.D!CM-Cee:_3MuGg"1c%\3gsR>LM8QD.!Ur=Na4%JsdL-C$JYdiA9s&WPl!h%U%X50p+rouoi^%.K%IJG\PQHQ?(8/\[=nJ$g-_eBgMKmN@A8%O5'Of!LJBl4AoB"lPi9+e-^[c!n(.W;82%GuqpYg4[/UGi7L=r_43%,MI6EQh+QO,\`lofNG#Fk:#1CQtkEB.4I:$B`,Pu\'@>r(Aq1\Zuh+uLpHF>OOhYURN,,W(,;8"!`I\N8GY'/l8t3+Z@J6eP\A(:%p6)@VR>O@;4nr&\Hj&da&ms'EU.e+,514f6_`Wcihc9V@=mNtX#=&%8MtZYr6h)J(/_XsPN9S?cn$I1]7#+l]n/-<NkBIWH-<W!)%G?+%aArI^#17>=qD;dpj1X)0"eY5BWFjaRpF+?FC3:;Nf9nS;lO//JE&Q^V71c3[c-t-6Xd"PutnsPP79;"\V2!PWsel(0F:ft*F%(G/4NhCBF<@d-f?TB>2hV5887mA)!qK1_DjFmmjKCgdO^lQ&bp`u.pDg-gs@HA319NKC!d-7f3e6N8#J%32&>.^gNWAL\>nW;3B`%)1>C[!DT4jC@HBJ(ApO$L<9arI<?h9W-qaS@3?2!l"KP(A?.Z3k-7p%i`!pi%d5:rn-.a^mB<7J0:>=fl0;uN+=MjG?lH]]JOat<%))2TZ[Sa\;01-UsWo$L<DqT&]jM@TW^M5!@LAW,b(L-]4?)dK_1(.X@l@[fX+1fl$!_AH"i*1c,Xn6noI)=p[mu?KLn->`VhJ>JP%g!c0iTN;EL<)2NRh!C-),/"bs#=R6.6njc]E!QPi6O%G),9W9+1:SR4^2]&F$Tn7`kC8JPa,RNrmuGpUCl#3i0+L<.+e.I0Te@TD%'<bC*"J^_>=TKY5Hm(4pIn<R("<?Iucj;)=gA;HX9UV(36b'tIFn8SBAXMSNZIMQs:%;g@qitrQ:=d4_9"GE4U8:d2*T:e;:+2f#%CZ'hoi?(GJOTX-81Tk2A)s.-ZVSG.JM.mGB71>MJKCVhB33JMC$gBG+!6@Z=qWS3mo;!RA&QL?:#oH7uBoE=m"FtWS_LKdD66Sn_%3jkF?jsOp^r:YmoGfg^3,A4!cq>$Sf<aDM*Gjt%.#;="T9j."nZe=L@)C:@a+<1`JP&DVL>3A-e[usM&*a0;,[7@P3r/"NH8W+d/%4hr7_M4u's"0HnM9r:2n9"kt$'$$?`;-gR0NjNb42<7pBLC*4=@i3VY/FZ2HdlRW`H`/;_MF3q"S0+#'B.l6I=9P,Xd"$qNRs^VK%XMubeNS4L`T\tt:#"#EFf[U<A=!&C9n7(o2C$M#k+7^L=O=I\LdT1(c9p(kAn<G/4JYa-rcjGUHm/5303?00[/NJ/pqM9!kn3MC_%+>B[W_U=<\S#7+22;),.1A1WS'8t3/r87Nq^q]^Igegp'e8^`XgO]i"2Tkr#@Lo))oo2ikql@o-2)LJN`t!JuUF*?\R,SrN:T[o[%Ar:,`Pc1^5&p^@HrlH_'2&h=2r.'7:(F=lam3Zr)B03oV7NFheWm$O-hIfDEA+ZS*/mC2#KC%^T9[,P@e]n(/\HoN1UD0]E*^d:m%#_fYEYX`aB!L+L&F#I^OFD*OrB*U#M@\YLL\e[`^<4ArjkGkrpaFb6NCpJDD6[WBF<%IE\AEV+L,UZHCqj1'(8e9Y[nhn,;(2BK?%3Fg44B2Zh@;Fe=jS#_kt]$nu+4#OubNrs<!ThQM,VgV"eStg>/?ZM\-5*hALO9l#?eUlNImtums@QWqgiPl>2)-)k-e4d2%#@Jbq%$),Vc7j$s-6@UUC:+C`A*$%]abSk"^I%r4u_.t5Bl#hh\PcZiC>IN:1h&TF<,M&pN,L8g?gH%<aMuYj?;q0?l-+@<181o"].7(2@%%YG%sZDemKkoEZJ+3"_f?27$*>SOsCgVHc3\hBB*d2?Do<(;8f`fPh(^pOh-aA"S#V3r&^6fkFP2-VR(;\243fV[$rQ\:8dc#%%l%J02GE\@==&;u#)jjVF2W8X&+".SGP;E:1(dIa_MK;57MW7i\&cD(jVP+au\h(4(ceSW1Fig/5;U\lh@$RHuhca#(aSUGBp'@UdRj%[HYJj)IX=12btA/p(qX=`K*mOCln:"3?IW9M6>NF%_G%QgTbpCA#>ZY=NkDu%CT,U-!)nK"27U1@VGYZGi<[W(*tf(Nd!W)cugWr%<XQts*4P\l8:kX\0V"p(,1[DWIVHd::$9cDW45an#thd/Vn9bO<u`OI#rh-uO('BglCW^OP*IY9A/^hBF8@,]6;7CIs&[`c<>aK=%<M%t,QT2I`l`^1;`kjoEQ\#EHXf*=5;m(!o]?"=IWIC)4fH>*SZSR\hh,7f18>IH4+.bj?CbMZC+PiDhH]UJUZ2"Q[`kb9Tdkmb8%&g7@+0&poJki6s_<eG`Oh0FqFDJ)r''iW_mno[2<3ZKpA+gMMnVUeI5X"HlXH>uk,B<1+?B6GBKpG`=VMVGkDft1"9_$W*0Klp@:%22@R>(2]!sb\H0!:,sF_dL"S[\?],AP>2XN.PK-U)Ub@1+1kP5Q(p5B]tS)YHO\n0V.PkM3'M:IYU_KqfF!:QG_X[<=7tYS9E.77%rRPq3l_&u5"i]4\.WX39AX?5<(VUkgpK9&Q7_k<5I[iHUoDqcF$eW4(ktQ:T_\PXZ'rMAMO`m])(t4sCIbf2mo*u4&_cddQXHhkA%!A5<[hkRZhLsq%PJ,Xa7;j(Ds7eM]kJL<hXh44;(Q^5L[PQ?JD%f_=_.FgiH,?$?6Z>g:C"+g)M6c7AaSYO4=qfdFIipVM:-P;W"%fE7Vai?L8d`CZ#.;7^I5I%5`'7^eE3/4sq6qRX4R40hfe7PgiUSHAdH5=K=$-.VU3M27GNWAR4l+B#3T:+2R(Ma^Z^jb=p'm0mRL%#m8ar1qjQp=o22No[LJt]%H/GAUn@g9cVtWkb&uM/j$VQ`NY[tjpB_rcEV8mV=KOph4Ws)O^7PFMl_B<-#l.'"L,r%X:N1@T1/-4%`"?QS0gV+\\UU+Vlr1bJ"Q`-?b$57=>o,jdA?Zk!)ZmaYo]>kZE+oIO;6l(1X\hi7&*P9W3O,>OcgIrJ+Q&"H'239'OLom\0JCSH%KGZV]&Ubnb/pp:n]WaFEX<ZMK;=0BR'6fMtfYK4=<4"@?]hnn4^PQ()Y/2HKUl\:<)r":>.(\*#0_LDuH/+B]R0U$dPsGUAQ,9M)%_`X%KM-pqM>Z"IJI2d>&a&;(;EAk-3%+CXH(ScB?VPdT4IukuD,:n\J[P4Y8)Ho+EIl61+QGkUp/*:bb.j-L@d7/"p%PQqR??UtG%HaUDC-.rR\`pu$Xl/d=r6c]_kR3bLZKmd)lHi#4Jjl:5cqsBcYCM+0_oKj>CcJ;frFqM(MdN=VERrNagPsNV.b)o4H!*L!,1Nr)2%nV/AIedIrY*ZRHfgXCJ"7YkS@h\!hW1G.@;XZ/iSTVR6H(F%@0f?&3/2S=1c0mbiPl_S=R:b$\sgYuE62#,"L2A0LKBrd?ID]8?4%Y:Z3:Y^5n!40&FQC_;qqDQPPB[)&[bHs-En1!jH?Tkl^dT>ef;B_j-r`i^Cuc8$F,kqqP4KP/$9X$c.l/_I3L*NTHRZ\L>b*2j5j%m0$?;&op7Wb0=ChAZGYQGejh<=*)6IX6(UtV>=O=*4e5N^B]*%'TrU\OoZVkW=I;>gsU$.BWfG))KG!:Mgjod.jYiD&s1<(k\)U>%r+GmJ3[8V6#IgQ,CAh,>SbV="hiA<^;/pS4@#$J&7Q-&SV.tGO\#L;VlX$Pb=91oFW+g#igjF6HY;Uc?SZ"e?GFhB]3GTlGG0j^'%Wapda.;8TQ+fO);9>:%)@5a3,_LYn1%CY!e3;VC^Pnbu>Zd\rb.UUjE].PY'kP(nse3Eu!,"e=Xp:j,mOM$VPrV6PFQ.N%Qbc1>p%\FNgCKZ\H=U.eiCE*Dh/aV_eBZjK,XW'\:th;Nu`[3f.KK>cG&muen*T*9,::I_d(P;)nKI_B89)oi!%IMnC'rnGATD[RLs$]!Z9%2?ANoBF_VZp4tJe,4f\Wfe#(d1rHXV4TQ6/+r#JR\HEf:9_Z.bGr5sa'NF?]!pNO&!m0fF3VD=G9JK5#WK]S'i\sL<p0JuPRUq'q%&;5Z=QaQ,A1ebT,-SZ3U15Q2<E-W3unG<2t)>;016dZNq/m16WCp?5`BaO7j;FATqZ($h1.]/QFSf*uESGqBWB9;q%XqMIG;Ri['%#uQ'drd3o.TS8?a=JF$$:d/R8rJsX(UQZ6l=[d"'@W*.+]7+F:3h'FU3l:kFJ*HsX##H.42^$*9j*-YaDD9R6)4Z*\VejjW,-R0#%1*5+hns^b&pDJiieh$;O+eoSf?O@Bb<(>dEr5S4%FppP,,cE'1W3^2D/ShTKY<$c.>j`a6oo^Jf"0k!c:u@i0iL'eRaSBD(\"TGL%lHc;>?S2l1J62Z`HDA1Gp/=](+OdQME`;YjINNaBqtkf%a6f54<F;[9h]Es-YomcX7u@J1P+mFW,b,e1F_),$KNIDSJ,qt'>Y/a^%-RUqR<gfc=;+^+cC*#iXa?[(5CB,sg*J;\'Xm6'T]Z-?CV1q&1YjS.W<FS@f@LANIGT4'$6.nIC7M6<tUPHF0o0^OP-c>;;S7'c7%d@b';#TAm68:[m/*YR%4\q:'[;Q0B=p.XP`B5aFqO2'e\6i.),8X<*kDNM`reK2HqU2kd5qcVZ\I9Aps#k0mX^a:-jg&Z)sYsZdX%^2<E1XchZ;meEg=VN;__\kufp557:&f\TqQF(ce*Zf0D\e(6^A/\UEi&X#0tX:@%&Ze-<A%:2$*0,.<S57)epT/@)5gu-^_5:+N(%)qEmn&,WDK;%2lG94#($6>^HcJB4iKm'(Sa_kZ!/VN-(9)+ku'DBu+]58$>4G9*[,p0qdJMBD%t%SpQH_'$43:%oZ/?a9Cg=;IqI%j?Z*:^00pnfn1;Z\C>[TDjn[R15/me<fLPT7R)%aB;CP'q,1iIW;+jda+A_S5LQ%e.PObu7W#>PlYrOJ^8fKo7?#tPY,G:MpE=p=%pn8\i3+2<Q2R\ZGBgOpA.i#c4o:Vs'H_;'%=V#f7Au3PsgDYgTTj$Bal*M=P<0A)UBi2?W\-;Gm[WlR*kp"*Ce%C;f;WJSZ+s<b]%'a8V-]ac("V:?R'!.8hO?j7-nZ6pY6,'Da4[a`Gg+X8nj3_4*E';m36Tp2ip@lV86)%oTC5KE=>64s$-q/sh+KODXN<bE#-J`UWM%p9@>31V2#l1A[)7Jo^gk])QLe?pE1BT:>@-QrmIGi8J`nT/+d:HP_Vrd$DP3W8I*jrVPCFqcEN1OsV+I#3>1hAq5IF[]sEZ:Nu>1%+'L;4M(>%i-+a4VdW'N[h/oa!<0JRpXS?o-(D[L_V*Q"S3QclUh6\R$eYH,`13@JWRm#7NCe)(>4"lb'pcPH.Q:\8Ha!$nUnq[th%$ocI>@BktX"S#?Q'Al9b'rDkO*AFqRm`[,adHY<K<$`?JR\gKnF<kuQ8>#&l.N22Ql!HZ2=DOB'LCCsTJ2VWh8K34l`PP+_='tm.%LT?5.QW"?H@S1\cOHuX['d[pY$o5#$=Qoh'7]X))W\O5$[%9Zd_fRgmB2l-0'qEGFB=.L-jd!#m9TCB2N#r#(XT%\9D?+FN"-XbV%(G-Mf'9B@6a:&WMc$o+7#-idEF4p2]!V0N+.VKjG('g7$^TKt8@];Yb]9]6V@'HH[2#geKRUWf3KT,s`2Z?I8\u&Wal$;/PcW_9q%kDb8&C#ld5PRPo3Z"3n1h*:"Er];P0jT'>'DhmE8=,[cFpKn4C4U]B)/g4.OQSK1U*C(!24[^\ENu4ZjbEN$MqiR$.d39?o6'Q_E%h95r]6af(>-]N'Q5fhM[IP_qd%_1!'/BjU.!;_fZo&d5eo_W3&eIao]Q^!#l6P;N0XKd%*;HF*20$tl'AL-usBqt(9P%^:DA32"l%YED\G*OY;[j[YEhj!7>(h2DE7&l(6@+QoOZ^FJ-<lnGMci&Yc7Mg.2(>RoT6D.\ng&2?0?Le+5cW)WRRdogC4cI04b,BW4W2\R&'%7!8[+//S\FXIE[I'YW-B<c<3u08$]gLd[C4EiEk^f9YEROQmf[3:PafaS$SbdIa,'3IXZg$&,^LJU\'*=<9bNUt#S4Enq,HqKSQA%<tRd)Q1>bu;65/AN/$%0d$6/H84/&sA#sh=ApJl.b;\_'7HQJK<[T8l=q=u^fFG(PB$JLBX#q>)5fW:.AA`JB(5"S:%p\@1*d0`:%-TL&8"@)H'YHHYqS?'u5]62bg,&Z4b[6mLa]0*To(*R2t_.(Q=J`3r&`h#%jS)2%c<FW#b`V%;oUj(%?`CG.FZ1g9kLZUlVPI5pm%Y&PS(,_<2gLTar^($qGh^H'Deb25TNm:WQ7G5^ni?>%CRS:&EqrgZ_%0mjJ#_pi(-M;uKVS^'+>d^$M3>K"<e.-EEY0KN%Nd$U#_%PbNX!3UE(FOu5.Oj=L!dl=T^0kBr12&@-"IVB;o5/m:L6Xe/'$*j2kp:RSW=mLHEk\StZ_'7hjph1p._id/XLKUI8TKeThI5h-hZ%\-]4NKs)g2fO%qO!gFr;ab34JLbXp38@AA=>Y#N'Tm3q8;b%!0d4ag.VU)4h,0$a]2k#sKCJIVV;TWmZeRDk/lp4,#B\tDY3@MDi%,di4Z><5]EBFE#W\^o?P5!2Vk\ZK+.4?f&4mZ`AuV6QO536W>0GatfulWt4BGV*8c--,]TDN$>9f(OCC0m,qt45Je3o`m6kXJ,;!%[JjC[c!6l?'VJ(\f-0Ij4k`j5(6J3F[)Q@_'HFZ84K"_m-S[*Y[j"AO5.\ERXrLLG6;"U0Qe2aSfW>!J>:.;tQZ)[TQ<<Y(9n!CM%Eb>0jj(#V;4%L7B]WkbfkjN-;fnUSF[!NtV)C*qC<%H]f/BQKB\f#Xh'_ZnjP!n<66W3d&QPg^_,)`!"Shp=-g2betgGHEuW9k`G%r?TNTDnCa_5p*+tl.lm9ObXgqgI4NS,aBW<el-)<JV4XuR6GoY*EL!H4WUc[8<*aSGLLoA-Zimb$>)e:T"rc98?3m"oYXb9Z@Q)_%Al-N]pN*97Id2p6"e_bP)0RG.8\\d\YQQ%-o\pNI_rb/dXGh`ffsmE%]0/4/W.[qfNFI*A9+leQF7@7\$Oq-/*Qr?Li-a$$9HQu:%&WVLJNbo^qe]ga"L(9%"0".QMgtT+lgUfJ3PW*D10:dpuf&H79.uDP?)j0UO).).fah]MLXlWm$+O9X$JpI)s4,9ZcVE[m:3c*!*%oo#g0-(/M[2.EY?Tp/tSXna;J1([eS2$#;#!ObWq%/TY&hNl\[2H`^H2N:aNCUPN\f22lI-R7Ut;&5AlZ5e2ca2XpZ@oSf@fLDBX%ft'=pqWM9@b2O/`0i[?tAS`/i21C`tE*TqBIL:-=V@S?"lXX84/E>4"48R]oqVOP'G[G*Mas<[JGH_'N(lNL7L1>,])#eCDQq'mn%N]g%][*`V0L<Mltlg,r0f7CsBHS_Q1H8ZS;m.5d$$g8#(OAX`EdUqNJKHS7aZ:B;iOt"QYEB9-tUcS&^42),1q:+V?eq#RhkT(H-%h=k=)Nad&M*S&B%b:)*L&,?A\CT7(CV("!TOC.dr@taOB+KZ>hVcur%7-]0/X`/el`K]8`\I362L1HW=LbKh%PgcrRRb(!?I@'XF%etf?:c#kT'9X8A9RF/c<C9Z<YfYK4O:ZX%U9&t1F>VT.9n2S,Jjc?GmebW5b6_d[=X?PY`:3EPQpU+l`GY]9k"DO-9NI<sF6`Z@#%J$"R)4bG@?;(DXeVoN#.!FUCm>0)Fa)5FB*XWpp'.O0ate7^a,e1<Y'CW\bBjHtEmoddA*:L2W)>Dh0"=*i^C:N^_Zd"0;!al^#d%0sb)mLIKhg.WG`&`Hi5T_n\r]bM?pP`nE>-fkIt)krc"?XW+[?D57UuF+U-X'jG??*t8Cdb0:\\'!3fO)O\BL@pna4/`_B#f1??=%KakA,Pu4$uT5Pk.JuMmUqL&$Qr>@qcj2&d9md;i(>3_:PWcB0c*ZO>oLVVu'>R<;hO87"]kjc]q^.7#G-oi0OCLiJ-h(\Zd0OS/+%E"HG%<p.jG`LoO*;7c!_S)\>5o[*ZG!BdgTXgpF?1O)J*7Qs^qEll$K6SdWr(gP.0b@LCT*+FMtm'G8jedd9r8U@sOq-=1KP.fH3%][o2qN2Tg\`^=C8Dn/p>q9hfU!`"e6op0UHkp^;\*-jDp\TOt;ek?,mWA`[4W2m82V(LGN(n$'DPj[AX2ATu;BU4BXFNA?6NI+9`%nk@t:,PtDH*T_MVES^c\g.OB0#EE=Rm'a)uH>%pnYY3\Q$`"Bdf8r8=lDYFC#hclYo8&gB5>GC-CJ3giAApaG3$#qf@@0iCDAJ+,%H`QfPeh1a'%kHb-U9?tA0ePe'8,G?>XO8Ie&q6-Q%I<X=Ii`BBN='Jq7We.U4+'6:&T8RVe07UO4dM]B_1$t\3gbbD.\[#,kKRKi%+60XV7&7N0cHGNdL[7D/-K;[`,fQ]oHq[m=2JB3$U+7C&=*LF$jG^\IA&-d,@ZT[^'&flg@n/N'/c;S[ffb@J6eXCaLlQUb34.<<%kNq&!D/Gb)\_Qfk01h=SRaPpq"PF+)<j#Anbu4e#1u)-H\BQUY5/K7.grQdrI3`5:l=:/f3&uoafTP*sc*;SY?d2&3i<)gH!RtJ\%lb.UWg:2$1qrV/8b&=HZ_/mcn5P*'Am&aJ2%lJ:CP3co3S>dDE9^CC<05=97rGJ_ZG@V_.1A8P:=Dl:6(%L\q"/ON:5$C"r4#2-J%\/DW#ZRIbnAm6eskrNQBc5uFdT3t#l!pMT0\h8/TSLrTF`XRFV!@s:-e%TFBol73I*(RYT7sCHqGA1'M6dYC4Ps'LSCaEID[d36u%+K`$Q1Q!l0ZD,t]=L1\nQ?=30+aL&W?LaJ4ZTf`tbHQe+V$d5Hg4j?fh[M=W/[V$'\^ToBOGU.EZ@0ET:Sf3XCo:#coeZ%&>U<7[%*Ogc)rFg>N@Gck7d8m^;,O;D)Na9Jr%RQKG1MqIn0Au:M)qWY,B;7N"ble>FVLTdV3:4h8I(^<"'QP2?O\(kXEbc8Cgt3*4*f@'N%'nlEqVA0U\=\]K[32CgJXn9,TbhP_:4Z*^SQTC>-I#M%CLpE(%@%Bdu6ilW@*hr^kVLm+S'(hGu7lt6^>1PIB97m<dB<R"Cp>s*d%*UeBIV]n9JfJM6^;P](GN?^OT`&bJA9HQgA2KFnejbBEhG($&[h<j>,r5F`Nf,;%*@DF:T"qhWa_m4@K$e`@U?PDNU':c5/@?#e-%Eo&i#B@bn?-dkPoq*qZr_O9S!FPkpNFs^_fmT"8p.D''aL]a)FLGP[5;qK\+6_:"tD>;%[H(W^6,`n"d9YkRf(V"24R8PF!r):eI%J$$@L&e_?c>Cl.ImVQq)K!,tYBode.O3TL(O'UV=!XN\[+Rt(JAU:QJFNbZ\lp)4tO]4Q`Xh_e(WeBtuEE2-dmF+,\hlV(UFaOiY%F3C.]4_k7G,nB@E)>l%3X0P"H\nCN&)l3h0=)Ms48).eH\0d=K<U9Uh;UuaMp0&El$i<nH1Wh@e%f[g"ZKFL`-,LMa.K=J^<rPlt%r&`(b47c,BZU6IN,MN]XYMrc(;3(scnW)@O[f(B4+ALk:0CaZ.KOt.GZ*"`bpZBr^pF<?RdbV:Eh/T"gWjN95<?3*hh)F2#ajWO*%n+><gjjEdE]lK0CfsG>aXlZla*A[/.8GFk_@*neQhrY#P<V^*rY-(dq5cn]B4em$$g\VO-KGF;fSagB8lI`#c\6C/"L3U.D^a%PU%eacKtr@Qf]YYUhHMU9'Zm5"Ok91o)AL#.hK`!^W\oeKTZ@e[IGD0oW6l+DdShL0XRUQ+_[]qj&]Y-aDd3HU9-!`C/.;L.n0DKY1Y%FaV#Jg0RJGb.M>ler$Ib[me2*=A^7%0'-?gh)qXcoa:jsEd,Om=8@tW<O;7od\h>6W]'agV5C,$]rf^\3MtUU[XcnkR_sn[?eZ>g%HQf`E`cD,lVZD;]l'=JqluVjQK&R46i@A-5.o2QDQPAY(jG'CE1c3?@@i/.f3@aF$B'IRF/!][/!i(7fQp-DZRqZ>_jiE-'@6$V:%"BbCPNmm@2P#bIZ.*lpR\aaQfmOJNak?'V?(!d#hJ-LW44\+j>51uq>2.u`HLmr>GZHlt'*jT*tNeh#IXOur)2U4DE??WqaQTbQ)%q('4.9%GLr_(OKV>BHt%>X$ZQ2P7^Q/tK^1Q6!NMb16^Meo8(e`-p@6AN\5qhDa5['dfhA+W6u\e2HW=j,hGY7dZNP=jElG=>@.2%Ot?cI:TJIn<0bZ5f\Lau]oZ/nb1"I)m"t_Kll'#^oPrCGY%-/9p`^m\>hE$7#_QW%\kTS\m"9DGJZA1$P[pe!Zj`ttopsdZoSSiT%dZo+1/YUkb_r2MlKDNXM@q;cD?BUlQ219f<jgLW6N5@W4Dk/'#3@*gE;Rk?8!m-<im?$/`.sgBpT$EORl+o?/1!8!b"&3OTlWNHs%]G^ELp?m.g^#L7PJ;#s[bA?D'7"XNFo"hBtcCZ7$;b26Q=aT"gWL#Y%h8hNRMLNh%R#MN#YT9*IK8<"K7RZc_iBfGq*T)#24Qj]!%712[9X*K!AW)5]gcEa&A3jOXe>9-9kSI(%8Ue6T\'-p<*%*Nld9'5Io*7Xjl8A/IU9ssJEb`ET\GPH7!4c\ZtImQ;FA;(]SP8sZ+%-a@$J=B*;?g4!s7E[9pE,qC^+=8;li7O/'iXHbkY//;f:g"Rpi!]ADh%*-9$b-udEmJ"U$!3W.cS1iAGe@7!uZ8N$.]32<1V<uh2%QNu&E[YL<cA0UlQ,#'\9/s:Kb$ml-X6-'B,m:Rl]<@=523<V_234JqaI;f7X8h9R^-\0YRXS;6N6[5"'Vftr8ITcT:qb>pNXUnR/%<aFp2L@`#.lH2,gWIP+i#&eG]Y%FmS8MR;pq_bhf*(0-t2\hR/F?#!l2B`W=5<d=iN&m2K+b$f-<\0ij]J5k$O`tD5//ppc6$<UO%[DmTth9p<:mEG_#i9=Ls4lHY'=a?uDkek_C1o5)/^t%$'F4s0EbdUZbeUbX.6ShJ;13WWMRUn6%,5qMWMA11I(Ve"dnnC5Uf":W:%*m2+g;d6^tPp2XX65dtdrD\DP/?)bjQU%)s8QI@oD(h[Dg(!,SId6bhVFb)$DieKA2:&bFD6pYK;XA-=h+=7""?dZse]F9E6gmDn%0=t46.a*]bR[^$coTSH5+1FbB9tAr<h5MI9C14QfY/SXcHf7rJQ]0=^YuXE,F5KSMdl'[")7:U].46L6A*rO^XSJ1&LJ1QJ6>XC&%"Z`lmK!B`4F&j0,,5!6Q.HLYOLUR<e0ST8XMDVdAb%&>oiOf4K7`bj"4MKLZ:;ee`=TJ"T'ZA!/*luct!HOP(DL7<2>Yb$gQU:3B%>UmUFnpp*UhT%?2n)c-A(6&KPYKSn@$D2Pu.sh%3n*[QD_o6VDjU:L`3&M8D[og9B[tcN<,C):a>1qRs%ao3c^p,Cb2+H7S!6/pB%gZ8iPG7tD)lnU-(!aIKj<3?b,XZc_aI]-cUei@f;XbhuDjRlq&0e.?!n;1nMoVoX_eWdHj2C2\_(#M(`0*4PcEF,]>IDSdPrea%H%+[rC-<rNuKelZ4%T1<_0mD2mseZLC*K.OT!)oN<V)W"=firZGn,"An#Fo$Clk]sB'H5bsKNmX"V_0<pNT_"c,X(=Eg6[.f*XH)OF%[0iu@WSo="%1'QAi`9g$WRe!%QdtA\rU0)rb0@?midDTF/_,W@Z=t$3D/O(pWNc/5$[V%Z/AphfG)JE-W_4j,-@AX,!Dq>+f?0h[%Pr3(ub>iQ,p1akpMsc$(6Q>a/L3J8@9*Ge_PoNj(0#Uo\i=e:c3"g=OpLKn/YXba]H5AlKK92p2fY^k7[-noPKb;rN?E+3O>^!W]%o;QIC^d7._a=0tSGF3M(@gj8B#O-JL.%J^^JQ%m(]KBgF5V\Q(bi/%"Us<A0[%dH?o%4`h38T"aVBVNX`DbJ`63t"-RDVhEN;L<C%=C0,q0CX=4mIl5sT(RZX<h/A63=`AhiS+bmAOkleAmpp=DllA%)9]<o2Z[o^rc[EdgT"`YjMPM^eWe,k\TgTCR=.fXLZLo"7B.W@%oBo!s;fupXS::6*ASJ(6B[R6>*7;Pc<`@7KTD3LUs,gM:]6W'GDM#CgHeO?9PUAu?X%:gWEAP[dTZjA)/LTP!!l\A/5-'F5`gH3e%h2b-mNRH."4c-9\'c)JB/'$:K5"h8d;B&Bg]m=bDO1\e*5gr"@Pb9cl%9_Jq+Bus"3'!+T]]YQdJ0L+^W,!+tC[Q)nc2n9sk.j3W%Wddpna)?6V%q"HnP&*hHaTuPS`?5$OOpIAdT??>\F5f_)X,nkhRs;+Cg>jpBjdSb)etecEHQh^aZuA"7!o`"mS6'\&`i)Eg.bZ^`%fm8P0qKd1sc4:tIea_R`5'p2L4MK%JN'0Sp[A,G'UXs#*C5cpp-QG<ROBR5NkGn9J$B_!G;/'8,+`@Mp**IKXSj$GH_j;M'?I)c5%-lp:h-JU;NY%<rBQG(]r=O%bYdSnh(nfO\eLJJ'd*02>!U8nLZ\roa:e5?Xmi&BW#rq,2I@1(aj>q_f+S&;KoHe'RA2rOhEPm8Pb%onMeAqnif4$G<]%2Nm(K`kl&*?c5_*GV$tr-p+oQGV"i.`a6K8WPke5?$DVG$>-d:Kb"!sZt+!`+nn0+Nn)-q2t(uA/Xu4c1KU\L%-B9LD[XQ,YB9LhtG*s[fCK5['la+&MARLNW6Z%,1?6u_?>huDhZU^3$;R0d<4b'aRH<3BjIWclaRBH>Ln]@-M#[/m@llgPO7jj>)%0oo=Jqn)]/k&Kc&IEYT]`G'i/>f*d3dO7:!rMN`de%9dU+m2(AX9ckZdHk_nqGk?',6SfGCg-VP$p@4?*!jIA0MqOu+>uRG(giYJ%,A@CKUP:I;Y;ul@SU^S76C&:K8diTPb8!>Q=A&Q<X;78rT[0Hsc$C3J!j(bOf>*Om'b]E%&FYRRF'5.c?^YQ&\Cf[RZ?Eck+\R8,%(fH+_P3<r@P2!F6A2:g6(8KM4AAUX+mX@-^8_`ME..u)ZGNCQB"F$.D"6o`cN=aYA'p>mV7M^Q6FI!e6s/85qAV4SU'8k^<X&A*4%FNK_(E*fFI^\pN$V@dC<AZ&m'>)EZR,j_V$LfkMV-G:(*_Tk4FE?="p@k[=VS/RCRf<Oj=?7ON@2ha!5QmF$CK:drdh_^&qrqWM`%h]jNXUJ6\8D"7ZMbLi;Udhj\mAd7gP_V(Q6U81'Z%SJN*lfP#Y[(C0W87gI`hjj'k?l\]+P8tQtMbF]99RGK@Q>g#Br`[HfajqpZ%/'8u-+/sL,0B!Jq3J?Qef:a&_R6hsa#g0MjBuj[;e@-]K7e,>`eM&V0n%c\be&*"0aC?mJR__q%A$EH7)XsG8Xj&=HO(4N&#QN"2%]C$HRmNDZ^9qldc*h6G=e.&KG)_No$f9'6!-ORE/DPWLkQbij62>lf'"Vmgp>BBQ`FZmC_7^#o.q<'2r`pf,5C=PdiX`E8m5ZMW'%gFHJrk,'30%MXK5@ehs<MMIng^`3*U?76.rdR5^4gfKlI!k&B^n:m]Yr=*;V",U,7:\&XJ/8SF?aq0k"<G4d@/DaZ\+GiY5\pHTR%H\JcWZ.1uHe*n><h5>A">\M2*2_cYFN,"LrXaiU*Xd-rpc$@sfK/+Gu=At]E5%E<u-d/TM#@H\0R3!YS#aX#)ac9k6$=8Xm0]/(Z%,N/9/X0,[5A5WDl?-=:q1uR=L"?)7H=e41SPQl9,8rk,/Hk7R3$NDgaUn[rUk4Qa!X#g9U<5(mQ`6O8oSDrLXPp'-^KgXhD5RZ++%**rVJ=r`Ju;`l$n7UAg5hC%T+VpIu@[X=nQ&\EnM:EjEXYq+s`1`_%JPhL.,BKk&$<Jf3LMf`N1o0%@h-"X!W1?sF0*H?74'UI4c%%.\\V4skf(nD)&/40LS^O6L5bXZI*`h,!t[4-snB_]*BpZmF:s0n/o?^77_fTkg!Q4nP5B@//t&l@jt1^(N?/+KhXcSGo&?.*Y`3%8WSO?_SO.A49\(W2OUYXa/:pN]#!"bN<#FIB#O+7PRiM6r(%U80Q%0"2jJPu^22?U\Za?2T`D7L7G>t"$Hh;p7e;8>>kR*,=icC=%.XUZ+kbit_=eNXN<[chA0=ucoQP6]6kR9-"3_J@mF:Vn`bQ.NR[C>kZJ4\1/hj(faX-`2/m%>SUP-Zb\C=:-='&!b`1RC<rOI_AE%ipkXU/uo'-F2lg&2XfV(c-G/sTb$LIG-INLmFGQg$W`fM&*29WLE8rHS;.MoaV8k!fhK&N%A)(J3R#s"pGR[APVdOW2U(22''m1(%g",kDfA3?!)e,KV'TdU*U@cB7(drl)WKQhn+M5PEW$*MkDuS,CB=>;GaC6PG`0SCIX%Y/pK\RpV8uK/C1-V$Bn`B`""\BoZX5KQ6%ONtD.pD#pb\*)=*L$Vt$6_HGCP,]>ui@A8%1K;Q@Ul#13$S(58?g*fD]Z5;);]Gk!b&MO(W*siC`*c97WYL7d^dQq3nLaK?c\%Z3%$_cfo>f93O@JTd_^3df*-5I/N_!GBk(p9cE*W</**d)Ofc\Z3fUd>'Y.jgkUQ5GjpAIIlTTFBM8M2f01=$XrLT%<\J=/f"o<ecrT%Qh(Z9CtFgg8oTB"[D1=j^X)9^Xa,$>gidISDr82BTZ/$Z#"1,Q:pBJ:L:S@%l5.M*?SA3k`5WBf5Ns:68Bq"#K5N%\<K,Yb>"+NT%ON@f/a=bX.Ja>G>]5a!>n+TMHV4knf(p^305(]TQE.Z\\Po9m>^AGt]eH$ffFmI+Dp":K4]U4c4afXuC0-L*sJf@TgQ/sU*-9rkU%"A),]n.`$/;WEeKq:$<o9)uZ8E/n]3fB^iE^&Z!LnX2T<!![-YM,fAqZ"q_hDqb_,3rQ2.Q-O[!/=H:]R2,/U51Oe"TmHRB[LXB.%f_%u&'3qL)(86^(GV:P,AK-.bW^8l)3T$_oVmF9NdtCq6R?Qr+&Vs@:OrQ.oLJ]EJlli!Tj-A,GKu`CU`6uu9]mj#/U4S5.>$)"B%#VjJ&aAF;bna52uD<N7!+&_4+Wk;P'h%R2>C'qb[1@JFXm`6#&*"nYWrYCoF@.G<7^%N_@2a'OS!+7Wl?\($jroi=>c&+7uL2^5L%r_4Dh(,9FTJK\tP2iJ8_Jd?,=MS0/@0mdp?[='Tc=_k_X34;s!l?Bm&*<Wf1hCtC.!A;LJ*l_$PQ&VMQ.%6fScu6u#6mP?7?pbS[%,)AMj/W,Q_8;eG<Up0FrI4V:Q)"C>hs(9$X]?),YGsmh"=C:B"^!qs1dT2TLqqWgY'6`k'O5Fut'?4b2+j-9LeKWbu7)X(iM5PBu%j?RF6bhQjLJ[M<SV:,YhQIPI8mRjUd1Y7,@T.D?R*^e'S7p]l7G2#c/TIH-!0,W,,V+,'U>2QB0'#i?I-2cu>$E5M9KoZhr$%6kH%d]NSL+p_<P5(qcJb">8"*,;gmo<9eUa.[IM4cDiV@DXoZ7g.7VGi3<F-4*Ac\6Wj/.4fP[1dRRHiH9,$Mk,F\dk]HAZ9sW!"*h81%GMjBohbfVmYj<C]`0cd15,Kc"8H1)V@4Eh)7:?]>F^jCF"jjZ>L1B=M.ECW84+jfVYD$gghn=4)0:pC6MGSjdlc7`eI8p8_q//M7%*P`;NRRiTZh6Zj)_`2g"1egY6M_SJ/\C!8j5b+c>LHXF_g]YP_$lre,]Xi-!BZ\K0I((06!_m=^cn.M.:bhef?$Ks]o\];Z2".mb%_3Wuj#cP>pO%i'2hh7%oT)>XFh/]iSgASKgJ[KTmUT-6N+E71p=8$6"@?=-OcOj:sd[4u,go5q%AUO=igVUUa65%)Kit"hire0S-%4;:X,M6_GXZH3p0lHT('fnBcGbm"0IbBjhd*He3f`];P$aJ:C<;0JW%X[D#=[T.'kkuadJLQ!WJM^k5s&P:6H%6a8.Bs-U*s/-Ci%_!LW1Oj!UhAZ&?*UdK7,>^.`T8%YN6T%:'3i^Vtg[HfO^P)craf$asJ7md]tpd-]f+jAc?3HU>G%e`^L(#I3\R3%9g>+1;pYX8Cb%'VN8*>&cAV#P--WCQH:U?eOjg1RY=raJKlG&SodN\Cg=N#FcpB9;%\Bai!PU$'kE5][CZ>iZ1f34ih6^qEc'B8TlW1CHpRH*]&Lk%%M_/mfLa"qM]>^M#kL*&bOuVHd@;rT%PD3PO,3>'C2##!@m@8m)RM5VnC=aUI!%BnB8!V5+SgHDat5e^2Yd4X$o,[$fc3FVZK<+I%g)YN9h`F?m,/ou"QIr1:f]VS:WeFp"Q$U?=h/V7$?3.b49>$N:3sEj_9N?B&#a/!WpDU:-XJhZO@Xti;@a6Zd([r0-,7(FXi]*"/%;CNQ+q_sj$M/_rX]@L(Jb0"XU+nXc>_\OPT1+=0Z?mA9ljr93?R*ak3R`L#+dI5I7Ejcl]E0`ro?i.*Ma`p4+;dj7q7%;5cc:63+%2&CX8_EKQB.NsGG9eumU(Ec,NMhi^XMdIVBiEn?!hgK&MV2g@0+L:1GElb2KB@WA#!JKs"UK6TMp!Kb50JO$_](q_IQ]D'lfQN$i%J^1=81Nt"gDn3]Jm3N*g,M:s#\\mIe&6fi$Ct$4h*&W@XT#WK.%HG`.NdB[J>lO$Q_GJmqbCe9ip*%SMj*VkX(KrO&LjTglgFd#.%0b$[>ZTP:o74)Mr-<"\Pq4d,U6M$SpHi/e+N]o3Nh.9lRg092iW[:bZqK1KZq?N(kb@'J?;M81439I%T&'$'cDD*P@MMhWlgWO]Z%]/qg^5E:o+fEnQT_L^.HQ%Dlc3-s@!OIG@VP(qrgm,D6CR3'BeBaEW((A(a5aoObtRaK.,<n]Ij;EP9\Seii50ktg.5Ohu'a3Z)9%KYQjlTp)&5h)<'-R`4-DUSbR2E^ktkDQAd<]/mPA44aaCU/i^0U"?U#bXjt4Jph<2Z$bZA'CRPfP-ld;Noe.T$3-uFRTDVZOL\C#%W>6D^PcZE]gTCO,FM6r?.H:.Y0h^!tP3q5WocD0InNojfVQ%K30icfM$4IA4/,q$$*P9G'B2rV%.;T^/2<R>f@KgRh??DrFe[/[e%$)nM:ih4&u.sV_fEK1c8[_fa/EeuF5ENKB[5`J#,6<W7GXlRnUUM+qA4pBREa'VbfF463dfc!%7V[a$PE@-+?8cIEn>]_V/8nUS9%6]<g_M/nDl0E!*[6;GpXX]dugBs(Rl8tmMSAYm\TLq.c$P=$VLoEo7pm6DR5_Ug7*A(8pab*Z0=]C,'T)HbGAR]N#3__,]>`X<-G%=RVaBK>jW7n^4^EmL5T$KK%?9e(,o$L=GL.2DtIamNp)W%<2NlRPg^q0QGg%dF"3$TM6/>rFJF3[ZaE5Y.+9\UEj>64^M1\*;sY1%B,M7(+qa/[(#uX<OL-fE_C>sdF)2@CUK[?HUoGleo,pA+Nbk%kCZ3glYebX,(rpU$)=CT'a?V0nIGUFEI*_4XHuqkmWJSE03%s4T%V&:#P7rC%sq$^DPhh3Rp$Bn>u>R**N*MTVB=:#S+XQZj%D0\-#'aps@[2s5Z*P?9,L45k9o;AZ.L5WHJe+s;+@(V6SCi6!2>ETS@%+JL#H[fT[3".ES.j>_@-m0/b.WoUdXF7-'S1E.>EO;ip0c>>>(aW@kp+(+-snJLfhZ2Pj\0?+VAQ%qQ0?>(+Fo/sa2LrG==;nd6b%lA1X9JECemZ,S$sn!@QHc7@uKH%oR@YFLhJ/C9nGMlsp]/84`s.dNC9]JU;%#RQuXZe6+if#bsE/X`S](O?VaGIOU`E6QA$'bslq%jD3>Q=.oncAp(%JfJaBucEFDhARk,@r7NT-VDG\mBfZcFA+$r*I-"(7Xi=DHlMe69ki8'GDf73p.-\*A"->lW@=Tn=@1$t5L_Mfg%XBoC;\<sW7etpt!K9?+scK/"MM2_,pB;]8+5"WDjX\-'N,Vo,JOc)8]L&b<'c%97rL1CW:Reg]^JR2PJ]pgBZZ?LGN[g3*`&U22q%2AlUeLtEI2bH5I:7,c>[r3+niEXFjr/8CHKR"/*dZeonHoO_ke:;,_u<B04W.:cRTQqYj&DR57b$D.09O;X5g:7_&gC"[=b[YFER%+_MJ+oHYHV40<%s(E_4=UI`HK'FYS!WfZ1l,I$ZL.nV'GLB0.t2_g=q0]*^F4WRfGWeRE/^C1d%MJ2`FHTIh;%f&,cN0Z`pOXaY;%C,W"h0!(>kN''UOom+i,E';M)*mTmD<q0BYVCHTTQr_auJ>E2:qm7h)?32^ba45:2;&B06^A>5=+o/:U-K8.Z0@;7E<1H'D;_AjG%;_I.m?KTN"[:=c.dJTd#oB#-<qjXZBG$q;IW<O\9aCY3#Z&m2lT!gc)Phc;[dQDkI:[bkT=(V-7IF.\6%]f_p6Is=Xb\Gr9kpWL3%r@W\pm=NW.5H)@V4arT#iuQmWo^)Il4go4H<6&QtFfXk8YNub>-S8Wt2_g<r0"QoAA&QPBNOI_\NJGsLIFVX_@L,2(Mg6&9g:9&=%UN%?8FOq+9]HDB*=E_i=CPYCSN&dnOh6b&$#kr2eQcG4*FDqLmGPYP8r@GjQG3iA3X>s?9=36m@1.4Kf>8e_*a6Aj#J'DNNd>-+i%^k]]d%H2lPoZc2?:uDeD=%%t@2f>r#d@@c2-?Ios$=`ni4>UB'r`uGUJ2d`5=`K\1fCX:C]H24b<gA!84e^-0X*uIYXm06@X(`6C%c;T@GLD'dCIJ!@6=I+BL#g5F)CniPFeDbW4X]S7u/"_%eG4m4;U)KY@7''VlC4$0>-62u/X7fk6ML;+t<qN,ns-BjY-A.#WG.l^t%$SX9q#/9RlR?&o([*]nT;U=1?TqYkIeB$qj&EX?%5D'W2Gg00pjo*Vh$MDT.R2@fEgE_2KJ3o;cp1f(5KZ+9r76\6@nILXaeb$HR%q2j==Atul=/)>K+Ua+Kceid;OIk@=ZQ/*G^rB]"@9,o6k"$uK]5jc(E"]@]TVTLM;'*MXDDRO,c1`RG;f!C_7"]mjg+?JQ+_t!&[%+J,1OHnYIWig=k0N-'[%<?=HIU`J>NSKnM.*\+LlP8"CFI6#$dF5?8j_MUF/HD)."ZAksWBKDlq<gaXhI$a1Slq3SsIYhH.6*Fp"%\l?sseeHF&K%9[?Cj1+7Duh#Klude-KA>^R#/^HVdRo]n#P(,o$a>P1/<1%G0t;i%T\[+ZaqdReGMR*4T1)JGeil]#jk,%Qk>NAZ%(rK4)fJnP4NXB>:!,q\3^K6j3E1V0#AStRg`_iKKfgk&M_3`C"s%C![*/E86,i:$k\#N3nWkAD>a"0^)1tY&f-[f9>!\oRHps:uq%%,l=3LEl[-]et2\.Mqb'e)olB\Z6Gfkrq3@T.)E?_)XUj?#_M+:0?Rn,?p2Xr/i8EA*_"&!4Pu(>?sY\GkA's!Bm"B\sm(_g%C,t%#NhjQg&Ie^jMY$X]mWODO^HP&6FPV!XugFQ*M/X&.(>pHVG9Z0A,G'<R<Bu;fhSXiHbNr1f9?IiM7bk$AQPq`LHX=!4;(`22oLDg%HNV"M9C8cc,q#DZ;@;#SfOB1Q8=dZ1EVr:g0+WJ?MN:T/)t\(oL%G0'Ah^N'!l4a_:<p\[5\)aW+:73&h/TGV(umN'p)$5gf&]g7%gC"_3kcAFk<PSZ:JG\aulVuMOd=u"E"gP\'4t`=LAoWZ/I/r-p'EMNt>:d'^VfBG2n07=:)kfX:cXVE9d?%n'Slppb&AmP_GHAQ\%o$\mcDN+BBb5Rk_\\qSW`QSCZjmVFDcX<(qWYEO\Ph/>.&&&XWULh\jNfGqSPOo,,g[RV=9^b6^g8V^9N8amO\NaWjTmihg!5G-a%d9>7k`hR/aDPdJlV3nEMWAo;.i:LSn3e0rs&o'm\!_@DqA\Gdq7!K0"nbQk9I;<5nlKK)T<O$jWI.stN]Q5(HgMS39g.(2.qa%MB%?h7=T33@A#6#`@]>59_Xn-S?7!$LeSn=jD"D?2tHoXF#;4.PVKZ=*S,bRPC]m*;o@a*og-DIF3!%F8$]^UR1-23W1`QXj2sbed=i%WbKddP&AZEZOp*W1(*$9r'_`%D?oa2'b*R;VuTC*m&/'5NMi4=?\jSa8JP&VX'Q+0=dkHQdb$5P+K[=$_;jg(r=,?7H=Chb(jh#k%=iI?S6'hd#EG?"knHa,NQ]ntl;NoTZ73sd,"/%Hm265!b0a]F=%^R'0%"/V3AJ@V+(%a^Ri2ueHcIi,d\@&HZ[&=cjM('^a%b!&\%o&+8$0P"MoH(mS&aH$.pTFn5qJ7*i5L4%V/B2u.k0'YU@DFKiA0Qdkse!I!%MUE])O#6hbcLNfJJ07ud1MZp$G_D_&ZIa[@M[3Oi%[o#J;V6InH=2bdu%Lb7,OK]K(F_-1+'-^gt?&.Xh$/,^RJB;JukJ-<A&B3jO+!'m#&Q:QhRJTbJr\<_,>,pq%!K9MR4ST):Dl4Ws%+ub86D&X:t?_Q:;^K,Rp,%IR^)<ZKpYFEiS',+A+62#4mCHa+-4?h-R01R490490o>0^/)'@3!Hg#r%X+IlDno:mqCOSS-W%?ls_%oC=E1S)SA'coVGCSF4HYV#<1G;4Uf3&Q%oF'[@rY'_.Zu\IN?XU*9d!=FdLM2g7G2":-/D)FZ]o<3$\-8.jdXX*0;C?Z2iJc-%6;%:Yms[HDb(@N2q\FOKGV,RUaX2+>]Y!nnBt"/Z\,Z>;^H];+E:kR0HTu0$\SRP>`@<-=phV_$_copsO7?WeD9]aL(e<b_qF5i$d5e%_I]iGfrq",raY:!@ET`mRO4$(.[uG'4@a[*hPaQs%`s`:Y4ALqi[dm?*_1hAQ.c_Y'#5t=kJ5YfNEUkRoIF!DG7X?\Apel+ZjMAD%8;h,"oHGsW;r`jFR9)f%&nJO_a4sCNmc3LrU578+b*j;C1@Gn-Eh4YahPO9klKVIi0Bp]H\b2>/YS(!eIZH30S1#eo7n6fL9H&j.%`W#_N[.SmS&3MDMR(#G[[HFdI2@q/b(maI(0s=I1F^%.2YlO2ZH`??QqPKO-Om3m?K4%C9Bisug($Tn*RiQ*hln8N3=Ig<f,OVZ&%_?;(IH^t:J&8*Ik!tEli'CNpb9SHV?6+Fh?%7Mb&aR>NSD"AYcX*])HZ]6TZos#$?Tt(#'fKr`$JtlS9$3npEji/"4:NXF238nW?%(gh-(iP]C?"+iaq#rtW&ToNM?:UA(3;guhKpYAJC^.rb<KBNKu79g7CNdk3#[;4nZ`/2oNB>(9+"D#!9OXVhD?RSW_3m^[$?8JXW%hm">V)#>qdF:#2[fm3CVCASqJ2*2so6k*_2Y.p\,gi,2mV0]#4VO31<Q;_AB\`9<UGh[FL[4>X]DESqlc-f5:i;1Gi;b1ZFhMg(&%I[\g$CT3M(+J.mMe%MW($)G8G+&jj5(4d4r=Rt%T!:R3S?\GF0<pl,Fm8'<.&uD$W6e(B(amqJqLJ_;^1O\_PMB3jdU9.$(Lb^B,%J](5ZZ"I_tK$9rlS[KtCKIlspee\^5O@6pC.Y[5@XM4suZJ?(YW3C)"#0p+MJ;MTgBL*R+XAplF(&Xe!].aE/5Ik*K?0gqqf<0j5%i]b?EAR0Mu,D3h#'r`dD!J\$aCQYdfNL['3V!_O?4(6ET=8-hU-+Z,R;5opP4&D#9p$;/J=aQK@gQ#f+ljNS!lkkfeZ]rdl9Y2Sk%2$k,(EQ^Bp6_GSg%8).i0*2*df6B^O;oNLO;8B0hRX<::B4b[:7Z8LVH$K8a-=$C/,"(r1XEZ?N`muXHSYo`\SCQ*'!89JUPKH%.%mhLitVT4R-FG/84cD"q6#r8O1\gk]K-C:T\>5u1SV9h@*`l7npGX_5C2&f<Fh;$"#&EsnSSsn]3e62LOh6$KA5B?Z5-tAop[9dn<%_SjL+Zf\ZaNl(lLUMEXdXSGSEa\!J0dVhtZZQ/%>ou["u`[l8iqiL,LKV@;glDR8daa<(H2X`11-fB0T/&f8DlJf2Y`G\H`fPYuY%U%+72<O2q<E@H3=M0c]8g\fkrF&#^_Is:<j+-TK>*#Q[Hl;;>K?EfU'G2-^$GMcUEK2L*5GW1r`")F<62G@g"4_@ph_4Xe(pR&8'%iVo0E169=QW%Ntj?U4UV@5&>FcP(^Fi]P.<S$`gNi^eM1GA.qp/WjiI6:EQG<n=$jVAS>VMAX<bG(i&q,M+,pZbG%P@a-;rnnmr#%Y*EJLBY>JJ=AO/$eCs<#g^)(Q&Il*nd_Tj'r%U_QjYKgm^&`h`CYLF$k<\U?LSUfW1BuuM8eEF.LHX:8e&q'ua7VFOJTKX49,G%R%>IC_QUXZnK/Oj]=8,pX7WPm5GOH$7Zh!$3CIJ&oMPb4?YZk,1@0l)nAnK7GX%*,qM.2?VO^@$aCdD1i>"im7-*8.2&Df@2GM\HNY%87D;ai^F]*2(eqX2r3"k3-`3O.&5SeXq0r'Z\N$I#@b^F+j&'`^R"gPNcO6_KBkQn4X9=eqJA)tZ0\!k%C=ijL$7u4:*IY?<.^t%%8j'eXrB/%;`FtAPV<&=ASt!9*M)#ap$!3Z&]]pFGI.nYh:e"%TqH&_&5#p,<L1*^WbbMMKF[He&#dqPnEbgiH-OWPC8_qpdJI.n-%_u9pHos(?!/s8'b/Ol3!RhLGZEPqPUQ)8Rhg5_BjXTf7g/fB[#c<Yln%:aKCE9K6G\@$qAJVK7K_A_jCihtkEQV!GT#?GTe4>u()%\jY"LbLPWY/\-DF1d<?(1K9,4XOOs4`9#%5q#,RPG701+_jc1I-JI$)h?fence[I3CHG0+MXV':etMXi^3[&(LmOa1kh?h)O&H9C%^][*1KdY8C`Pqt]iZZ#b[BO#`2u&nP1[uF:]f]oU!5RNB00"N5kCWlIIXb5%1'9,,@b>%ur&sG[>![Dpo[j*cXR>C`Vd,kTEqsKC%1dRe0!A5u$]@.1h*!?K"[uFMYpRS$F=LF+6.,fan#+/l97l?KsAmFg>X^$M#Xl\_/hUL$XJ=ngT.V+c>5p36:!p'[t0<eWLlPR]p%F_?@ENf[FUI90T:1uC&0nT5<RoDI(OiS^sK]E/%3?2?,rE\,8o/XqG%E23lS$ib"P9TogKRPAO6G*bGd6>_,="+tbG&+N>!Kim'f%2&f#0G](jnF'0b)%AS5WUPM:KVI$OL=*7HeE%M,EE0mStq4-D9UA0Dq.GN"FF(_&XG\c_U:N:DrbuMQ+*==LLE,r5r"S6*PEp?I9%Dof^&ijASV#sSkSs1%,NpN[RY<[s,2jdV=5jF0\.Dd,.AgE:lNh.LluduHYakb@1)A8A?7T'NImTL_uXY=WjO[U,?BTd+OCRMeC$%4.IPR:Yt+.'I7IUl-1ZkZ;j)X;f'+uA1;c3,2o;[N?>XprRAZIiC]dR)1PKhF#h=\F+@03@7ASF_nCKmk@ViIY-$T4oAW^Y!L(]V%fKfpqc"UmafUdD*qM:-G.!cK+E'8fA!hqrbSlO(qO[uI?N%JWFos[[:LH'e,+c`EfLP.C[hM<4&53F-:X]aMc7Co@?SBW/2&#X`d%k;h_beMXe_a((#rrtieVafFC?9+SB?:0A+O[M2>Z7g1"t4/0TGl_i3L%3Ve(rT_EO2:7&.N`W=Tg4Q[??CcG.+EWD>(scE4_Aj^:%j))2&F)=S.?G<P!8roq*E&c'\CM$[e%Qf/@1_ui]Oa&b)qj*'=+".SCDMC?Q@$g,R(4E;fcH`]2WVHR@=c]Q?C(IRU'aM,6Uj5Xe%e>Ui7QFDe7HC,b-J)D&c-Q_]TNma"=).(ps.`j/;]>6+BiI1=a>*7>sMX1"$GL6UiHo5g^Fd_lig/*%i<S#K+/d/a9j(!qrZ4[g7%N<KS_,qu>0_q'n#GRT5p#9&T>_;T(o@go@Sfb`b4='hne.E;d2KYk;mJ`hpb#rZ4ERC<Wp6s@Z0B6dn#-am7(]5'Q.%BYfV[i8N0%7lVAa)c>nXjHNOrYU00=Qa5LTQmH6f$=Z"dDJ;t#0%A_8KEAoc8HA8W:UNRTPJ)-6=3XlFU\[8Y"MJ!r95QAq>O;W(b9Sl>i3K,t%/;uc!U'A(dDku8bI'fN,9o/e,!4n<djZicu5TaC;.PTiNr*@nN`r+ti7?jrt77Ob'c%16NY-"X9+I=8,?`k;nmmH#<cK%Q0!EtY`%=ueo4iF44-MJIo^,1\QYkfa&`[\Sktf-q*8'RArB\atI#BNV)*8f.E01s]s"Up6&.qHjRchO,N<)j/_O.dN3jg`b^='Z!&!0%I;W%M^s%F><2UM4-]NTJV3!'/mh^^q3feI/4:"jlaV0MWgnBB?!8$LD6eB^$T3!UT6:DQ!WjI.gRCk.;^@J1>\F:HU/G@>lCf:$`oq(G%#+pY_\e2uk]tV!%;U_Hi+.![&/1^o<2*<m.81$7e8U1<?fQ90S")buT;]K<($BG[EhlKsE&\0"OdXhmKR2g<obf[`0/7Y)(X1XBn%46gf-nam9LBJGi5'KGW8`3]l0mtX/B]`GBkSu10Q^8PlY?.92'[<L"De*:E_g.VEMoPKe23/MCGRIWDuDcKPOI`u,6/6%<o+L'HG%X5%2kl*gVl'g@N?4*:IDZ_[Re(;n*p+JhtKEQjZc'7^EIDDnTJNIdMX=bkj,5NhW>S2]N9dtH5mXMOZ`L;9*!^JGY:W9jf98^2*8%*UX\3NZ=9iTr,Ylg::[.FlbirY]MB2\=o8Y;=42[nH_P;2,Xmt?4ksN%\qb6cS0UGiJ>2@j(/(pQ37(186`Hb>,k-`Z*?u,Y,mPq%D]&df%5pD-`Qkd%gQ7o?CeV8j0l"tn!#&TmYK@e3KkJ!0gCe;;AD>aTlUnb^@jRh@h+9")"&)K_N<>^Z[_DgLW=oak]mL.%A<$(u%VJ7?K>6"nXG>tORG$+5&EIHA]"0)QfrZ?8f1RLX9q<0r0U/Kq$FQoP2W(HP#!"Q@c'I*`hbF4`Mp:pi]NNb+`fbMY>L,Pu+KTG:*%4eR3u$+1)?:7uR4bf/#j!=XFYpBJ+,\JX>j-%GL=<rD$#SC*G_dBY'S;@>.eQ\jo!)a`rP/B*iYNM$KNe6:?\PA8RcmNrEr2W$>%%i_RQ8\9\o0r>]0G?P@+(VNQD861q1D!7pLCoRD(8o3bAL?)qD5$0&eYAY#S#R4bsg1+Vr.*pV1j2PP_gQhUIiro.9&6=:pt-.iSA%KAuXoZ3k^TlgZ)3\eQ541<+&c"s.,@jH\=!\EI;J[,E]%/IgqE)U4"q$!Jt=$UrWhbYXD&kefm7&0>2G%_FFSCcphn(gO`jdT7co%=;W3s2cGRrMu;NF8:2jO[;,K/<I*6N/g?8"#jF5K]"c<.-qaU,;Ho4S%:,iNFZTR>:4K@;rjX$_6Qi`oZ1E#:;dVm$l8gjYLJQZ-%5&WEfN!p`XIBmJUo`sN:SV$&,'g^IVIL@euT+jT:D#cA=0]k-R^Kbp!Y[.*ZcP`XuNMeSJS9eXh*JI--W8#^s4F'gqIG&`2(W)$.%$ERZ`9D=r?D45W[2dk2!*_r?UJ_a\HWbjb`UVh91?p\)>IupLi9&&"i`"*hH*D:Hk&>iG$(QRt\Z-FOL8$kNr'YXVLZOf<@E)S:H%aR'G2kcf#<<G$1U/DVIq^YRW&62=P6`d*!<?gT>a8+h6NZEj^hV;//^$i&42ZA"+"Z,9[Q`]!&F&p#FHltXS";Zaam0J)S!4O#pe%SZ%b,c%O*;]=c/($3Hk5*#bcXHu*'2(,t#CpQIh_2e'!h?K-bJ<H:N4=1cX!;,H-p%SicM+c]+.$gYO%Ud>r`>c%cQf%IY&OU\a%%HGQ.nLR3e`IWFM?q(Jk\Am#A:qHt>?.QZp00#S$UD/<,!2@Z0TFAUP?;c6Q,9j(%f>LMWo>_.%,A$P(=L-KJo)4%-Ka8]Qu4?21N%9>5UhQoDB])O1L[!`pi4FHh6?D=`(VT.9TJbs>0le#_Ej@0\+_V-ZhR]jY-9Q+/[]3RK>!=6)rkNmkGeV8Cm=]6[Kj$R?[S'7CCd%fYM:rme]!cV*n]c4qh+rpSUj)GJ8%Ms.Ni2':-F@\LYN6`*MnIW0Z>'kdU%[1BABq2<o_/QpPjl4.2+Q(fK$59]!?s@mBAA:)lE'%c6r>Pg3Z\4+D,>Lcd$;f]A9ks2@4B6qBadlorBZfXccG4h:-%qh4=cFP0^#^H<S*hjNcE#?1b4[Q/9ajB:nS%OeZKBdY;8\.8Qit%dW+#MFn7AqWp1p6a/9p0)7sA,>Nb.qo^RGQo^pNIiUNj4.PCV?5$TSJWIk?X`n-'8j^JN6Yf@h_7p:8<Yfg&e]J^,t3c-hd!8DeW%i*BP&elK+W8V&tWI+iOEDu)-<T#%3?)l37H"q2FDD*$K=<OdGA9$`T32H\g]`1le#j+c#hAgq.[>Hu"ff[O)QC]S2-_nD+WP.QG.%MSWaID.f>.8$F1#E>MXf0X.#RX$O"+8pl<#F1NfW82_"-4iIj;!ib"(L./B0bgCg@*J[#JKGVcNj'@!k^4R^hnr]7ZXnaTc'jZfZ%4DjL3+Md!0`hfL&\.psYiT4o7RQj6:.X"*WOYc5_4[8r.G?H_kmjNNAiLiCa!T(lY3IJ7HlYG(e_jX7&[>HNW++q6eo8<`Di^DG<%.9;kI`"=2SE_#fZ[!X@4isn@VK>Gh5C+V!MhX!l)&5'!jn%/LiF*A6jn`V"&jB`eK#+(e/8,4:E7+Mg^IS?M#N6gn2$kXEY=VLbb%]'Ce6N`!j;'aHH,/ZqU0YD;EO8`\#7,cc?%6un1VU7a.75Q$6_a37lWcgGT)+$X@BLm/SB-]P]c\OIS\/3$?Zd)*39W_H#7oB:%:%<p'],p.:Wpq^U1\?`e()899@`CT!YTnkZ=Q4'1<MZfgV3f_G>LKrh)=/saHfa6+_aN,AHC&1=1'Yas/_i\2'gipB,N(+ldT^2Dmu%LpHCHgfu^2%17^V-[4/4;saiK:)Xs>7eAC:iMfD=[HV81TZQ_Zm\i"^QrtU=\4a+Ho8YRHqbJ!PGit.4!NZq)%LAeaT>hm_gRe!Z%?Y5Xa56%,#%N]5._B,5a]Vg5SIUeSC0%e/`T&5MTW:*ls]-fZt5#AAsJ9aWLr4oaa:$6K"C<G86`]pC3FL@'$hDiu*7Bf53:co_8%Zdg9D:^!?GU$MQE,KhAK2'Ii$cDn^@[!^VVb6%dhb`+`A\IY=oZf]S#s5mdukWC=d53c7_o\eePdL"oDpL-m)MIpYqG@NJ6c@L??%"rGsdR,)S"io")m6_S2X)h!q9UonbJd6uT[L=e`9Rt_j5B2B`jd6-=#H3e7A]6Wp\Mu3WQZFRjd9OpnK8ooZI[aT"Ng^7iJm11$i%3Sal)c#Di=igtOZSID8E1Fni2P&G?AHe*?p@Yk*nOf)7a76)A;G@sdsfiQ/GC41+#Ln+[:Nq-k:UI1Fnn;b-S_D[qq>9@$89_G<H%e8^p536FP8[Y_MUfABHulP!WP]4-.cUrbFbiEjS4AT\P"4mj,dfcolHe@e*`9U9gS1814o5IF/PN=U%iWS8>,`AuS_;ob0P9bXN=%b/%;I#DZe/IrI:uEAknT);tRnb4kbn$b`>3#;8CAKN>71Ee%ft]0!&X\At[toU18;Z];e4T%F!&*-n7*NBq)"_\[NZH6Z?4"VRGD%$($W`L/I*a,-:)U=nc.V/kKQD1hZ,o%?4k$.R+$@>1Os]5jn&4h,T@ADbq$"WbqQLHqZ,VTglTH-?6_dn*Q/*]5po.Pg,*UV*'IV%+Jt.717?=&Tlga%;En05]Aln61^$*7F*^Q0E*eI7:r&pLm*T.u(7Q^"geN:'+&CME<rSk=3[iHia4K<Fk`T51pS1h,?:s_l7)8Qh%m-L+KU0TT)m,S!`RmSJ`aNC,S!lbgr\TSN)XWlKO*qNcB7sBdccZZ-t8nAVf]S-`]\W(PP%u"%DZoGomb$*9alb;2&(%n0mXLlJC%jRT:Ze1r1'!<"t-i8qTH]85Sg,+VI)5m==7HTmS;-QQ&_k(f%7?_it]ra>V>YC5)s)LiF5TlNZA/,j.TV8n,Z:KH2Hdr\8J\Ui.)%8Nfi*gQEsDWi"lomdc%ZT<01SVE!WI.2OCGBB)sQrL<rTIEA7)o]ubsM"X8Cs4e^5akuSM0V..nrNdJ.\%\%n%$!DjW^OSKc/ct/%=+gq8*ne_&o/FNGp4sgZr#`QZ7\fjR`m3%W=I0NdkVc!<1VP3baKMh&,.&GDo1s[d()/ui1&NrpM(BBm?6G92*62^[=@,9$f:SjP%aB,\:&+3!eL$ASfg0UG`qd!uZYV^p6OS/$,a.sS=:_0OrKaPCjDiq*`IJgrPfJSaE$-WC3!!2K/>?Bf2>A/!FHHlDaRc:>sKSZC-%eEI<JK6"O[-AXl5LkBfOj%2BdBc3r*D;E>K^V_7Cc2,2IaO\&F*i?a3$mBu5BNAeu(L5b_\9er7NT/G&gR_foY-A#Mq[k[l2JnH8%OQD3>1m5CjB:G0=VE9`AUq/+h`DfH;3?&)_Zi4@R+d&UY=:ao-LNs.[Qn"[10KBLP9MFfT+*2^f!`,]P7[+Uq6`ue6:<)@d^D\tG%[NtBb<TtlhPAUV>m10Q')I!Bqi3=]_eDU1L,C,Mb,*HP8Wl&qVVo4ZE218.e4u<mE,-C,9ouY2r&/;8!+j`"/DI++S_%M1EA@=Yd%5T/+kSR3V0>M<L2*Z6ii+MNXRqmZo;e^$_2eeBXJ'Ld:ioU;dRBr9j2BqA-/WSU>6%63,?]01oVb.mb=TDHn6iMZZpZqp]1)1W&C%YV$=-%`!0NIlr;.8HV+%k*?#@W!U350<C1-;PX/+&<kI"#pj.?\#Cd]YH2-'+nPl)2Dp8RP:6@6<4LUp=5kK"j0,C^o,AU;ieJ,k%M\EP@?que90H=IZ-W2BB4MZ]++`7pT]r7;Wl"KQXA/0\;;X+^:>-bQ%Kj*l<WCrdT*\L!hVLA%$d^h^\G&\[2cM8A3>86'5Le5%-%Tspi7oj&lc$rJ,V6seorp`OUg\oM"\]f=PteIKf`R";6=`*iRt&pZ[p\./a=PQh.WJ\"%4QbSV+/<&@t4'smG-r)16ou.%dT$YrM%9jOA)mcE_T7j674&s&c0Mn.nYCP#_Cl>P^N*AB%"48%)hjjda8kk8gAn3%7VOU4:X74ot0@?S&.H[/`4S5(S-U]^b$19jj_'T`;S%ZKZd'.o?*WISk\15f61OD%T`pjCk`i#\^bE2tTY7SfT*$OMj7@`1-T%XuJsDgr(oi"BXhYS&AfF"BUIe#BL6(6"*!59rHoNHb,aQ%O3E=hX@G$?JBnRbHpFLH&/[N&@5qAip&eR45F;UacfmJCCn@5Pdh&-'+C`5U%#@m$:i`6!`32qeIL4.XP%+\g5n[d$W0(s:FDt]N%-7K@))(!^h^N=5q*9'7n/cuI/P@7$t_h[(SXchh;%TEaue\b>*]5=!<$V#t0_l=H+_Yiq)m@3ncC`:ZNc+oW4FC`P(#2etp]=dl[%VuVR-.<99q:qd\oJ+F,\3IF[X(j4:O1VLIMU547R_"]*-3F6k&n-hWOAmu?MYBROO@4lnkn5Lfgdn2p_.9_W%"m<lJ9N+^Mftn+l%56nP<Unj)gN\A_]:.g-bg)A5[.1:i*R]a3kdD)+QBdPf<Mqk#t/LP\]LH,CHa]NM&6uaPK%[uE'Ot&W3(a(@/^la>Odp&Z2PpX>I%U"R>qeG:C6#!I,R@Qoj[RDOX.8PaM\!CS[J>8(MtD&S\'NPi.?\aRpCK\T"HbU[=!>A/3UJ.a_Mg:L1I]rCnH%n_*4E6-%k<6tj$%c?0@jlM_8;^Iu>/(i9oSn`RAtbRa<SU^h6..bF6*M]o?+c]*Ak^]D5i+,AlfBT\b$0tt=u`$']&DoH6T77b.tY*ifuY,deS+u(t$%$<c#3V>3D4Y&QW2[];\QC2)m2VmgN?c0lXr84lAZn&V;sYEl2+Fss.(r2+ug#^AJe8m<CE(=W@Wi:rd?J_RGE!l(3&odd5RW!.l_%An]Nu&6bl<pj!HY?rp\sUq#PGG.Uf4])$ch+7u?$9Jp.ka+<JErlNYT(*.Xpn05SnNEX`7(kbbhW>YQEWS55P.&\Em[*s45P*lu:%G3XGF0C*%X.=D8]V]V+&0g.u7Dp+Nr$DFRPnqNeid;lVM-_B'LDo#OoQG2N+aZ42VfnErELL+Bcr7!%I6rm8gQNZP](o<-`noGH=%8"5f(+.a_aGXJ2hTrdMN-eg4`Hg5LA6]kt/lf\=re'b9/0hR%4n`2;PeNCD^']Efb/?H,\CX3pPh=T]OJNJp<BiaFNJd?%ZBPDV2%2KMTL#(Rq-qHT!`GP1",FD`T0_R$.I(+PLoOj[!YetgsffN=m*?e..s&6lC#jO"sUDB,.SSlN/rl[4+=F4N=>pEFi*Y)hSqbOt;S%Mn6`V,KUPe,.h`k_(sr0;h'qtR'o#4,jaPXFBW[3B9m]2m;hVMCD[->]!RGq64)IG)6'm9>Be"3#b^92l/4ue1Mik;cnekj]YYsE%P/frH4=GjO>2(q\gZ_N*?;nL9VLn'9I`sE0\\/D`C7`=7Wi@G3,)2G=,FT%T)eWWK4b51\Z#k'f(he7&gU-6RP0>%a:i-K@7'!-d%L\bAd=p^JJaC<1^b+Coh7"i%X%Rk:1*Pf;6gA\BmDK:7MP(sOFa:4!N,B[m+gJc!p8%MI;PeW$iaN9jGOm!i%?MHlMh82;E+A>U\%JTLVobo:9neX7k/,EdoK*!LBN)E2I*mmQeHGh<-p%S]TcJk+5tg!llHl@4*^,4LIm6S4eaP(Q5I^74=,RX,uBgT=(OFfH\;UlQnh%LC^:b>T,;Qb2bh0CM-qB>.p:*+b-6#Ko64X+QR%/D>G+&ih5C-4$14h?G$&Z>t=2!)0Pik'U*s^SI6Qs+'4>bj)Q^!T/?N."VW%T%5`WtX,e.ON/3bde#J#gIk3.h+%jH0cPIJsT^-@`n>e&\;g\@hE/Q'mN".\,m-[!(,a9eE95gQtWXRK'a+r&]6i+[iWF-V_8`!^1s%p_PBebZ[-UVl>P\@`EXls+,R_EhBIQ8&;o(cB9<n-iRS8q2VALcKgPn%8/*j$=_AiX;Tph&EF.T:oT6gj!TFdU&6fsrbaL6i"$l$%hXD4Xir^ke&_nYNMO*ZaO'F4qem!]cQMt3sd[uuDNbp1p4f`!"ST`_C2H5`j\;$fV=h8O_\+_2f7LK%8WpR!I>H>[4M-X`H$?A`3%*;[e(bd/um9XL#MRT]%HY/VZUm.IdXV#;a=AG,\_ia$Yu[eiChq.Kc.Ihc(UI%=N=l_Yh)G63>WOM0d2I5sWlM^_l?$q;Ipj'tH:%V55u3_(O7NfWK!8']l/VX9f!X_#D;?*i6`crUMU5&!G-YlC1..7!%/*BhWiYb9;?tRm@LWe<5Ssrcjq76XUSpVF#%'8Yk_l/uU$:%;nKIqo%u4E'>_c/(mgn&fcJ,k"[0.h^K0pC(B?3KnLe2ZN+23SX5#`$e>V_&_2bpi9Aug"pMm"pI_\^O>`6n[2(U:!(,R\u+PS3?%.t[VUUJk_P<(r>$]JE5-bD:$qc0NK+<'7Vf_pLcY$NQ>gO<3$/K1L#.JqGNm.$fDTja>PL,OZ&JlY=(5oEm"A5-'T3?t?T[/uaE3%:oL5^r?poght&e!7$[>a)c>Ed>q:0:kn[a.9(;L2BFKKjoXh,"CDM`So5nt(?&_91YV,pTWfa_NIN]jVeBY%;SWhDE.Pg<=!rQQR%]/1(k00uTO(M%AFI-Q?oSP*;Q@B4J]0>VG3-r;JpX-QAAnC6Pr,RRQg-j\r';uLnl1e@qF+Q@412+]"Wc8g?(Q+MffgRqfQn^O)Y%74P-J1[KiCJ^fT\!\A?`r44f7>kEZ!nIF\k4H%_K80XP$%j"H8A%+?2Z1$dZ/@Ta-n-D7NW[/t5+8[KW:Ue<GZCijL3gfOfTBOcl%'-+fb2u;kI_d+!<?j`o0].>H)_Mt[%^snk!6*PB)fJO.rKI0i9WZfWd.<s4eLXC0Q3\j2SO&!E1XF)K350PR3ET31:lRoioaYkZV%hSL/H9(L:Bfr/c;$K=W4ohti[\?=o5'l$G:KAH1#XDs<iZ;!ifi9bSM(^\\OmPfe0%Os0[FB/iZ/C,Rd,<NABYnp#SbRY$F'?%@]%=t;<5Nn,0nZIqB<gd!#<r5O@VU,JM'V%OqYGA+=L#,r98^8O@80X4c3,1e;_4#j;BgKN;J6d8tENH.b"B>q1(-UV#p\dY7OU+KAA%KeMiq+!bKPl17_?*\7O;dX-4(H4Xcg&,Jh11H"fl:srW]BEkhY$SKQ*WCT14fH_jl]0,nm-55[npN2UF7%2p:'<N2$#5seK3'd<O%:CL#d$HOKr=9jj'aFD[hUPJHT.H-J,U/4k0/1sX4]g`J,($Abcb*7\Ql-XG3@utJZSC,4iftq%bY&7D?%2AVG!WQ>R(^L2^YPb3\%@$%<]InqlF7-DSh6Qb[S<Y5Guop=:+D;JmR2FBVPhd6&@O!Jj=fE9I:'SL#Sp3ToiU]_>314R&ok[/^gf,]QTWnJl0.:iFi\7RJD%mRFMA+"RFk%[!0cR092q8OaobX6&pu+HoL+9@g6H$'[d+o\,P/Ea'kY6NGu]A]>*9CShKsH.de#n@2K^_*pE?'Gl]qj`OR/d>o-N%-:^R9#a3\o?m-R^K<F@X;S<Njj"a`"`CIpX$T/cqa)R\kBSKeUc);mqIE^d'<P%Sm7:@Y.SI^:M/G7O%ZtQa1c(OVU4*YANq;_aO%"iV1WPX/.[bj*"G`U[:VS1WOI>@JFW`HAbeR,OlsMQ<,m(*s,(*K2:@`@])+r+`]L:j[:k*)B,<Mg/nZ4@4mGQL0L2"lb"mnopGI%b\qe:Ojtc2=eAqK;r`RsWOH=XRV;R;!jUi<OemAd%KXK#5-k4`POHp"6Je_QiHGABqR[rEOC[.@1-'gp8f/`bD&R3@6^J%omjWek%]LS5cEUT+TI[70[lb\>86)k!Fp"TtV`']a`)7"&".:GZ6@\hsqIK.Ff]&m??;UStGFd[pI_SQ6Ae),Q!W#.*\)PdV@pBmmaiQbNm%f.pXo]13FO\N^dE>A]*TaV'6$;@M&W\@3Ns2(G)RDtWD]p:gQEQ!QG0>3(<DR6SHQ56,p&-i\?I;d"k1H=OS.CZ+M%MXmgLZUiQ"%0_.c.gXDW/C'-8^iUN!RIIb!0<Wc('0]!!mQbq/b/K\S%S.ROKc22i%)e:jN3^_g*E]7q:^"\t^ac:_!R3dcF$JaY9'T;Waek7H/%U,_\QWqr^L2X,mnJMajPgA)CmeX-iip3$/\S/a!jO+"DU)!52u*&++-IBb5s2MXe7^%!9-$Q_Tea.V32D0m8Xbqk!o$A8rXU"fp'%;Z``k$5ieu\)JlXb9jVIe6dMBk>]0mXe5GpmX,P_8LE`4_M)So'LkUjdH2e$b)`j!I"&LoOhbi-GdpV(!COnK$nm0;]ZaLs2MpRc%htH[C(]lUp1-2lB^p2%tQ5$;/QT`f^M.<N3^;6:VAu[A/*V[E*f0D=WTuX[>:c_N*%=QH<\r\NJ&i;N-4"6KZ.9pm"/@08#5eDO=%=Xj>nnAJ'*#Rc"3b_Om)PD>Kj,*N.=Sr7NQLd>0ocu??gNdEm8f?sP"'oY<We^UGeM8-/*L0tG9*Yr@]$u3:a3+A(uIpMqb=2+0D%U/b66YM1CI;_4]NA/&ob,VhlG9psKS``g[iOn:AdIV+o?6UO(D:$s4Ka,bPR8R!_JYT8l'1elNqC,(.S(rn:FWjbBNV/shWefrNe%CO7>;<b/l3$sB(9.M+S.HcM!TF!u"!gPWI3"o4e@'bs8"d@@'Q4l@;(>SJ$WICBlV4df,?11W'Z5tW[:Cp#(!']hh!3_NB.HOb1,%']?SYf<Nf4[?`<@,8]:A^(d_Z[#uF"C:6#5[h2,RfZ_,?/N*?$)sT2dS8Qj::DTCliJIRal]`#%MH&2/HZPn#'VFd8T7c`hq:.e*%A%81VUlBW)b/oGZ,\V5N\lLCm;$aFq_$jCQ$`RU/eka_(g)fl5OJm[#GLHY%rD:4n^ID<CShE_1s25<)hb>Yqk_=bK':LhmD>Np4%ltUAaa&m[oh3Tted9'n<R`Ln]M,S8u8:a(_Q;J4.-%#afC\-ja'e+Ehf736Y$)mR(Wl))@4X@[j2$n@kShlj$m$Ju.T(g?'4/3\4%Lqfl$SlQB>)JlaNrm=HAY].:S`p$bXa9$CUCVZ$3(H]K4%4+F9,G&+IHOC\)29grc[RP-ITK,lmOFW9C@?Dl`]fCofKPc["Ib\%S%s/8]6=\KH5aX!Z:Ftj)Cfqsl7jP'E((Rr;;N%,UY-8'YLS>d:DYAR>ULanI`jHATcKEbSH(5[>OBDUmUbDt5LPPE[&KS)8&e0\Ja%#F3XTWb<Dpg.*.sm]A'=]fY/1_^b=gI$d-f'.^_VL1I?IpL^N$^8@7>;Y^YJ=+N$(&ipnon:R$2^B3E3e-2/W?ejY%:1e=;ppess%,AL,.WEmb\rBSKH!jIc'I6EHc69UZH_<!+4DTq)61=n3??gMq$*Al0_,+q$iUnl#aIP8O#3Gaup3R2Eri)o-O]3[SG3OlKdg@_jP%%)?+0B>3L6GK3iek)jB3(0"J'X^F'c:9Rj.FOLqE+7FDQc<P\En;\J\9d7ljPX>P-hfO6N\a)U3bke,+Rh"+O]5:is(1aW.;MOl)%#n.#qX$r)#pYd]F\)&rl:[60@p$?mFR_Ol)JCgEX,`m3=WkV)[Hg%5J?%#_D67Pr7ghm9D&>ZHXgD%@-4ugLo&$+3O&G:!]P0["i%%*KN$l\Q,u&BJfXN-Ka#&Z^L@^TKC/a>:iCS\*.<RcEhIq!'iu51!B+q./d@mXd88r&#2T^?#eOdiYLf.YlH=_pQDRo%fpsM#&Bd%orq$?"b/<:$!_<49n3$KYI(A0%o7^ZI?J\b.BL:L)ngnqkK[9*4WMY*j7VWY*M-a_?S>j>nZc*.-;0U^+lIsX/[8(B'omLh09=67%AS82B%]N=`U`b^WChD-X9`iSR\iDn=kgJuRi@27R3%9g8[NG/"(h3ZK\Eg]F[8o7)ZEtF2RTm)bg,0&-K2lDCfUW(;npA582RC+Y%.kmJpPLHaRK-o"R_m"8TAs7g%h-<YhZk#bZ_gkWae$V1LiE+VYpN$AZrFlp04tGj1RO2g:9:DCP!,TeLiQhWX>1=t3jnIcaePid`%LX!m8oAA33\97`dY9Wbsl[bg*G732NZto.=dgL[PI6IrN_'0ibA(1T&,/GVYm.u;%/RO&aJ.>*iqnq3.]t=<'V/j>h512&tY'1`.%Y`n[(bt[fkVSZ<qeB5"Vlbc/S6eVk#'L!(Z<GlP7G&,=Sl?HU3#%RKI@^;)VHlj>Ofsso0TBrKHKfJlJ6aP7<(8amo@GApK^mrt6%jp'SZ*SjoMdad3Ops,*Q`5kQ(h0SC98F?`A@YS7LD8WPhh>%h^BKrsq^8bhD^+r%9V+6R68GA6paO1>uM?K?0TjcRjKJH&6J*.f0%kdSF8CQiE[[<Cli/_rlKEd:4".UAZoF,g$CL;n7EA%o"ALiQ@/:^Dnr?60B>(o-aEL(V^PHFK[=R0H$.N])>\F3BZR,NmPJ?YQ:\%)R"nH?J8I3WeeNH`h.Iei&0GR'Ej6.7R\V>p"7<igdG)q"er]K*Fn)%o5!ueC!al%dLc>W^tH((-WiLCob[K_?Ys/):9@OujTN#!%h^!orC(TCI()G!E6@nstPLFp'Pjmadm*^5Hm!FcM_@dUp"dX#@#hG'r(NaKsE5jpp,<X%__lg3+X\D^pdAWECS+A&^*03_c80dH4%5IjB"F69DcW?oie<]J!po"$(/fQq?^jZ>rgl@(B]X8CMu!'Hm-;auShel1<eTLnQ3CKY=h!lAfqrhSVA"6I^((Mp]8(N-\@UlTB$%)I."@T'Es,@aiFlGrXHf1n,?>*NtChGS;SuF]qrj4C?f=[!?T]go\?D8)a?J7WW7ni$ZfPhkS.;0pk=i"Rg:<n$s@R!bUAl)C!7'%3.eQ]1j/=#pShuP-S2@fPFHq7Zl)Gr$,5glW*2.V`8(\ld\:Q!8[f6X$6maDd<JP;2+`b4%<*C9HDad>Idg98\q+_UHk,P09s1%9%cY!]gO%k"`BRr'mGB"JG>Mn8?ZgeIeJWnm@Q'c;W&QH.J%PblDXFFR(H7F*PkBVtg$<nauX]WL^NKEY!5#3-Ve?RBWe.[#WZ)d(d%TL7NNNU?1X8[gMlRt1GUENN^el,FhAUd82ZEiSJ?0pgJMTYJN.fujQQ3KN&!+>3"a+fZiB.A"g)'u@0mS)>:5Q9f-IbQ:0qR^kJT%'[c)A7GG^nHIsPE5@7gWjJ&:RGh&?.rsU,7FEDL,PFnm@eaet\DGSh0M;;iL27?!-<Sq4:jlr?VXm20ZJTIWG2G']RD^iQ#m<[RN%F#Vr2Qk8M_2U_<Zq*Z$;_eJLg^%jX`9iO*e#p'r\D(`Y@-YEp"l:^FLomcq)o*$[MEBGK`a\rDV5GkZ?,(UdP<10VYrKi#NlJG+"%o;bZ5cKpoJS#._R8A#au&`m=jM.1AVY)c(L[eQo2\rl&;kD!NAH_P&6Y7D.;9cHj0htQ]4VRDr1,1f8[G*h!g=IqkeM1f!pDD26h%4TmBN%rfncW4%>L<EGe@7coPBb'/>UQhj4BE[OM_RWJ9L[G18OUk6Kpq::TFb#IB$TAptT_(K1"_m@GUiqTB\!r\bO/:c5l[-b?[%Ap6-C^(MWOH#WT5.JYb&.4TdBp2"&4UA)6Bgok4GSd2]fn'I5q?Y3g,Tf%;3>)1<+\>Hu1Lc?Z2]<5`IcBV&"f6?+j*0/P4[+-d4%Wgps`C.'\O'P_#m].OSQ*g-,,AK=uK5UkHYhF;j:Ed_+3<F;k+LLfU!!?JbBq$Ni-[CL`le<Y75ISao=.<[p]NPA,8#*"kiY]m/"%"ijZOgcRV>;?"2jSS$>/l(p)=FS00"@<@QCpZ(]X9aX\&,Mt:LT-VPLFhd?,*G^hu'W.DPq;NFf$D",)@]*ZQe1.JC6J\'"Ai\Jb%1XeOfpX0;Y<_fJa;WjACMb,&(RAJtA4AQ]?-=q1ErDZo-P\$TDO&ToV&)C(=g>1/RfC"O`b1,k&2OB@>%$qJJDifJC+V?mZRQ:/l%P"`5C>XR(K_*&\-L3I*Mm5jmfC-#l9/Lj#p:/qP)((d5!Qa8EC&R"fX395IqMM:1/C@hcWE**Qt?PC`2-C&4W;ca+,icGY:l\V]C%Y'?6s`gafZL!hX2F;#PC2dIt<IV*fQpGaA1%mOJ^04opeVrj?jgS7cQ=F@HdJXF+6Sk*3;s+0$SfN5HAQ4!8JkOOaYa^gXsQdX9j%":(`>c24AS.^0"3nG;+H[f+=I1*lfA#BsdD@%<Fmno@GEfhV!<%-Ap9YFbr>qW_Ap-"]T":&M-98XsX,^:DDcA8h/#EPaV(5$'I>%APGN@Ut2KjT0`/r\VaCliZ<#th@jgWl1AHLqI]j4!nbH[ra;N4`9,Df(m;0><=l7>h$85h\PR0Eh,dP0<0?RNV@9d?_qO`!;*RcD%f?BTKNu!R['D-^QF`Q]bKf_o>G+X.];1NB,9%^^9;\V^fQ*/qj(U$aNZD$XdRs#2M55l=dWY!hWf<mpoZH_+h>&ajW2/42(6GCF6%^`V[=[o-,*E7RrrEnd4LY-p'rjGopioJ^&<7Xai*1--ROqhh!K"41Yo!:DCFr"Ni7c'S&PjNilZc+':B@!_3#_X`2\%[UWi(Da`p%\'cJcb1@fHVVE)&feQ$EOES/3)`\OE'53OX5br8/?Ik^BrhFVMdu<q#qIK!&VO)GTE9/kN,c:=lpaZBTK2!*F0XBc'okhHsXCB7d%9gH;=A%['1@5!7q2kN6beT7ceDiWNA]WJ@/Odg.>UE&gr@+$*D$K(g(@3Zqbj\WTma&u0sT&;Ru*J`6=9'25#=.]-8@m@-V>[]nf%]0dGY&[^NKnB$RDAo3tIUF9dJ%(d6Z;VI6cO^&M:d5I74j4,\fh1_/)5iP$2@Y*45^R3WF'OI!BF4NKflAg5D1TQG7PrQeS!(@PV%(^j6(-L^(6Lm%XNq=MAcr1M=OD:rcq3P>.`.<2Ep+&^V9ZqZbfj2iG&(gWTYJokjX#D&J\[e19\Woo?qlT.2PVYLc[4,<9o\/4#r%Y%Zs6$/a/H0Bu:IQ=5t>n3NVJ]rQ>mbU6HcGAdr00FO!6_2(@iXhNUq+OTe\]L'O)]R&+J7\qbd[p1_H4RS(l$89<YD\&b"&/%[k%c5_:e(*hod[g+4YG$O:]p'O=MZW)DJ@DrH*?!UW!gYDKEjFQuD2Q:F$gMY'A\CNKN7DEfYa>gK)ktd2%!e57%F\`L\g=pu+%8E,!%fpUcL%BfRAhK%[lr(Us78E)2"Zf&;PG;X-K+PDT0<9BQl$s)]%iT*otFc["WlIEtBU.0C-hE3s*$>[9YF4:F@n]h40nlLTY$*erZ%4TOdrBssf,GlGNZTHao<j*$/-Ou$jri?$GU3mOl=RK3T:@YW<`r?6*@EK""O0'%H3;-155BW4`r*Pfc`.TM7M"7#j&g85g=WVR*T%B6F<#g"0<oCAf7+pVB=GPhdpJ@Ye.1^C\%9g9=,jCW;jn_7mKN#mu]pUB[C!<@=6411?ZMC5k)W%'/TVE2%W!,3l*?/]3'W\5:;!%Dq;nn'MZS>eiLg6&2[JF&m,@tP9*@_.lj6*ka'DHg.&DM=U(f+W7C6!bUnHWWk1)YO!_e%1_mIt+W,rE$b5`qrZoI8pdrf@;Cp*`%hnE%>'C:edkBE[1mi'*8JP9+WJ,l[Z>X.Db74Up'JsgrILhI122-78(CW%3peo?*q)SK:/T4YcE)c=.%78dP5!kP:,HbOgm2<s\[%3lS2cW-&]]Co6(Sih<<O?#^"dW#duiR=4j%g4K(Z,8T78'3O,QgPb(S+EqgLAKk1R)"ik!!>-e_K#.'.fm-R<#&gPp4s66SC*5FE%]tI1q;-/5gPs=NP!hl&4"^R6G%I->#e[$epJW\&i7g6':iF1jn>S_"!7^jtqoeY@S=i>!7f8L($h4L4VG1/<O:L!SmRa**c,WkbJ%pr;k0pVY_kD2$^V:MDTDnQ/(>DA[!@)s>/U$S?B&0MlJ?"(G*"Qe($:b#;<&,jR"j]<p]KE3IJp^7>7DE]9]MjK)e76?1U)an8$U%7&BC"\O.<G21*'jCEe>POalSI9r((kQ`V3f<MIh(a2m@E_5>1\nZ0V<c`1eCIZ?MG0t?KcJ7cHP*f+g-hS8,o*l*V`"`3I4n\oH9%J[kVok5ho6Ipi3^?j:*C.X(Jg'DaGfM;j<C(cPV`S*`r`aB]Z[iKLU(Q<&Kbd5>lrRkFQq/qn;^)Afdrn%?r[8]`U=1_k^M#Xn5B%>qK)t;Eq-G/JTc(iQXBUKN=-J_TD.hFj>OjrmWs[7"kZrGXu6QhnU!flmpdI;@!]tC=ES@Rel)kJO#%b!9E9FY,g0NdkLtpA641Q%E4rFhNOE\.lV7Ut<@Io!"a0>f5J0#"_gAYY2a[==fBQ2[>^G[\X]a#1']sr,l?-!D=M\3IF:qP,?TLlkeK+-rAM7=-K-H]QR.=X>%lHu+N/E7kl=&IORksb3-lGuoK]DI%p9OE4!557M>'/!^J`f"LL6Dt+);7.=K!&)M.)mD5cjAEc.GSHt)`h@4oq1J\j],ikUIJjMY%@/)_Ue6@OLaBD6kdC-?Tc[1UpJQ6NOGh&g%oILjGZ.b+Q]aC=JJ7;%ZR.LRcb?AChTTh?RS*t*9b/cPlhfmsa<J\hoO*A<=SMSS=%3Wbk*9#jK1?et=i#mh%1+5^X#[[acUPTYo>[2FYf`-t-9;mBrmY>5DAKBn;M$rr6\48U)YUADi2)q,$K_6P0mXe;^NPk)A-XIDJU%YD3'f0EdkO2SnbOR9mFDIU2j]1D-[0$;_[_eCWJu2pEja*Z(mHq[C!T0f8i@g'ZI&B'ri8Q*U'DetE6aeQ$D:^1anm8*V9*qXRE!%AifH7^7mY7+k6$WkW7s<$1R]FT:Bgb8u4ZJc#/iGNK!WCHQFsVp3h>C\*)d4N2Yi;`K^Ap*)[en[dlleJ/2F5`/!QGTG1BHb].F9%?idGL$(u)eD3FG/CY=03/`2EJ4s5"J8qD;WM1S1q[iDaU1$2HD1QQGn%qN8V1_,GC]K4j+NR`I3c,2RJ0u(G+"MIpl?=:HHb2dn8%A`=_\=HVM5]t(>U`Dt1k.D%OC6KAYoD6*uaQDdqa^S4f9qIk0"RVBb^$H>@PbYqq[&V'F%3g<u&.6dFH!hho\SPa>R;UU>&JIQ#Z%oEK&Fg+CAZ2+_ccJ,;=B[Ln2"%`a>tb`7q$Xa[B/7sQJZ>XU0\@6]3\00%G2\4Wsc*K\4rC3=5'3iFN-Y:3\XlP*,"eWcSOSNY+o%R3E*3aoO%USap^c*J$p.4sJ!dE8IO,77inFq;0jCII)j$[SF,2e":B&$9$gQ^=O`4/g:8@p"p1-%HW0@WXnNr$-9V[@rTKQD1BUq%`P[oJ<;q6Ic7/'[8!UNrX8!?@g.$s&KsePJeU"!RM!Fo@V3f/]i$Rkd.R*8+hX7rgP`$V)?_f>/[47.fqajP'fA\Lm"0Kmh?Z@`A%P5`C(M9!'+9P7@(LUs3_6Q-m*i?t[N1Ud<kb^;_Dq"j9(NLDl>DENTr4+rECIuFue80]B+O;'oBUQ/h9T3b%sP)g%+_TbU[rTdWB%GZRus\2^n2Vg%c6:QHF&h#TQ*%"?[Uj49=2dDrg!"^P%NZHWG6[-a(gf%SH[I=:Su]f>,7IXKIIPsc[`oDW^6rAJ<=ACDAUO&#_k%6M82oedA2+LUVPfH;ii\"-R/J?befnB=Nh7%#]*W-\q;:qkc2okgnCWS;E?.fIfU6#!"J>Qa!``4cGmap*BIL\HeGo!&:A4c'R/m%J66''oC_<A0Bu9hrQ,YP4rHPPb4.$e!/1&+lhL/7W\!'b\BB5KTA"kJQBUW[b7MVuW3*]r5KhhXB)8cEer938DKTH+WjTeQXW1iS%RP1.l9HZB=MTegg$:eFYrh:s&LV&T:<co6!mA^nPXDZW&3V-N<7/DF#mT$(8V#9;-W:PQWWIgXplZ9:fli;a#/gnY7(-Fi=D"s;n%M/+'5jhn[,cd$[!DgWD:KgcVO5GgIkdt8M\l#S-ek6B<[T_Q_+b.u6faW#B9Sbk1W[3Vp`Jt9fOr+)kY2,k=r>H@7<(.%bYHmsR(%;P+]HF'44KVXjgH-$I'DVT5pVd:gOT,:,e5>.NN>;D?`YlJu8oE=+"PUO+Ud6nmBCdG<J0TLs+*k2NgJjfbi\iXk[YFSSm\4^KN[%82dt%`d$tKWZrIQr%B&u_2H)pl.sOcNq_6;=7&*6@D1?GNspqQ/dn.HD'VXaMbJAi;mYd@BVJ-$,lq`T?ulqK@uHE"d6>U8^,LO*%GBo5LWt];I`!o[=Gji,Ur**E3$Z[*<K5QhFP!HQBGKHJM?erWcp'>qp<*Ckd$B\%)kA;*,,T]Q@mnPnd^?Y^JrOan.EVk@+H+SS8%C,Eo04QDhP_q$<G:U/;6(fegQXIVD6+iX?TUdL5[fODMDa:u+goBQ8ra+Rg(p)<Yl,=[*%f1s[$2nln(WL*["?[YD'J.&m9P[N]K%("XgeJStRD<p?>h8`Ukc\GXJ:iJ(?<+HX\_lMuVDo*rV&J^%bgl(mH_h'3XZC"oOt7=,J&5\n?;ErlKU4ulu+Xs#?`Pal.pY,VQM%X;-.<SEm/4LBNp1@-RX-Dmsq8)b5LpBki#Gfug`1p(^Q>jXlKBp7D2nED<c:(l<B24NCdllRPSDkf\e@!`?OM>RG(L+(Q!TqsoD"%nTm49EGGYtPhYNYKPri$"e_c'/nUL?T*ro<"dS'3dSr.Vf^C<ie4/-,;Y/_:>fBSr:\,r$dOY*V(]aNPgW_=GU>Or^.KY?#\62%.%<@752/\@SW\!_7H^MBi@<f)0:nGir<m2Y.'Aq<B#U`An8\)+ltlR>X@'=q9"6m5^oHju3RIqLp>#nSMRZ(C>LRjo=m@@G8l.GS*'%-HLgV2oh(cKG9E=lWME^=^NB[V8Lar`kSd!?i/co^Sp/P+cG$RX-[F>WOTq]Kf;#>geq-F2H*4$'s>=9lJ?<pGn7$B<Lt(JK'3ab%EOt#mWuFX[SD#D=TA?,MfoWYA=\m+qBIj3mNpT/L,9(5(WD90Jg3gfk9k*e&*R/lGB3%YFef=,1%$_`FlZIsF1>1h&[ChOhYH*Qa%k,ML9Y80ZmB/o4'\A^2Y/YmK_Dg\Sa7#(U.\hF*g[H>_C"aO.HX3**GC.qcYLem]?ko_J_?6j*7m@*tq5KhG=f!npOe2$[t1?Pg#%)Jc_);,$?Tej;fZFdmp&PRXjNBa6:NT"ik^H`ms?qNIYfi1Et'%Gu#!/sOT/NpdY7q1Do15CSRtECa,qcYID!Yjf7.k\690p<c(P%%l.CI?sl4b2<7b-ltF)u^!8RL*o/Jmaq(Cij^%ud[]C-lHEFP9CG^+SeUVJDW],JWL0#TWX)ZClZpt,g5$j@W7=3ZVNGqdhe5r9D%.NN[!oZ@(Z.5"JqY\DaEbW?"7^fj"SWGuV,j<u)mm?tsPQI#8#$E"lHOgY.MaD68KHZ(Q<cuK>\iS)k%LV13bnfC<*'_">QHeap7%H[eCGBJJ+QdtJQ;+$d"JM/[N9o@i@_p\.VAeLlC&H9Z'P*e2P-r)CH]S#1sdL=^&+Q>IAb<f[K\Y]:hW37]+1!`-Ho]M[,*."X'$%L.4+6]PA;n$*;"MqPJ,]$D4&-<Yd=04M&f"7(Na6dXY_-]+/LAm97WRPKcgZ,)nmVGBW<$Id0P`-BJB(GGMVtl%a*>K;I<UT_9K`%Aps5arAD8.eD#m)Nf3?:h9g5-*q-`/-mc,dQ&DlkZZZ%+D*OBU`"\&Y7b&[DRc1/aeTkl+KQ_UTCY^X@"p+KB(*U?E<TR(MgOetk%$>c%n,ejn7ouq5%hnoH3oj6N!G7Q8#RlkFSFPa*jXh$Zr^Ebk$#Lh*'6d$u1r2`.'PA\WF-7YA'G,k^.>M\u/0?FZE8FW\'!Sj(A%l;3oOCrg;hlIaA6UpK?*#HLktFuB4!%C#06@d:'eU/:jc:rHZsEq`1k6NK6o8D;9<JQa?km4Qos*X9d2CX=!cDZl"]8[.lr*4>7#%Q:Gc]+K!=M@^*#%N6gmlS$DKW]_]6deiCJ$`TL+Xo]r,OE:P=3B\h[H!DX-eq<FO$ilO]+5G_#(K"L<H%3sKF@;31G`7/s(0BSYR%Np9)ffdVZ*Ld,DjLGc5g"g2>T8e0J9a51N739()ZUF:[Ram"^^R.hH[Ff!@"K.&CMWcS)K&Ijp3<I_@KqF3sHLH`4\nO>ui+*-u&%%@oPVL<3\tjAZ"&NmZ6fdSHJbrdc2l:_a7!nS6H?<Pg2):mgE^jK%><O.'>:XET1<>=167_-PLCJTY_`-_!h7T,a:_`c6L>YPp)'%>!:]Scm3TQFoig5qKm[)e#g3kGVbB&4MI2J#;,JqQ9-:dqaE&arc:O=;t&muI;oiWC`Z0T#nh;QlEAqX+Vl&JQu$[j'pVM3KTLND%qZR=;OhAIp=''3GHi%RDXropC&dnh%Z_h]^+;5l6U9R/cnYhl`CKfi&M3*e,0J)0tr_YR(nY@LWI!$8d:/TO;U^q,#?->,JpZsWI%M]F>K?qd"hC0@pB;nVqcUJm6PCNFa\@@Z':A-f+#hV.8egjJ&#FY5"`is-+X'Rd1q%pSZe$.jPG=%qj@8(Uu'WbGq[D>SGX3jC8L%QK.M7hM]PtVakOZPtg;DYXs*XN8VJ_I+Kb/%:A!L_MN2NcjYYa/XU+e89sUfl*:[&1+K/o:'c>BNBr))bpoK-RA9%tAi%JFXnLY6%[-Ha(St=qtoosE*=-%ts#J]OXrQKMp/g_$Lfu("C(KQ[`T\N^a.X/3`jHYlT\q'$n^?9q]kH763NjME%ohhq13QD>.A3p38Rn!:\%TArnBA=^$n66#>qpQPP10qJ-SH>W,[I\`.C8RLrcfY`4.N#EA+(s=jD]qQprRTPA!V;uOu$9BjA?(M7dgm1.Td8+X;hUJrLiJq8P%I!(pK.!0I&r+=KFXF[jHjQ;6k5ZT*l;kh<G.<UF31TdAZlf4hB91A*\Hn3BP9`13^B3d!C*7"$:roBUDS_q=l]NjkB_BJ^>]Z"bR%mVBKe;;MtOP$V[7QR(7tq)m.=(LN73BZNmV`InN69BTn;U#[(pB+[bE[F*[lQ*]&)#NYX5lZhWl5:Yhhgrtp9/f!_u&8Ca2QT?DZ%Ef]kVr5iP.Pe6n1K=q*m*tuY_Thb%i+^8gTI^RGlEOnCWXoI<3Vk"c<''*j4?=K%+=aG7)FgLU_Ze#%62;3-YpsNC&D[nt5(6e%T%P01e-4k'rl_V_#d2f*;fC/&fP.&aI/=7LUYbsPoO]lce9>1eSH>HGi0AW&UCV?[NDQ2Vc6b/p"]gFP8>^*M9hJn](iE@j[SFdiF_%$ard!(l`ODZ:W;&D\_PM4$M7NQ6!ZOJte%H^SEN]+C(dXSD+Thk;Q!!%&"ROAiKu:Li2R?Q:QfTeT80K%/#d.j#BW-U\2.A$;JJG%E\+IaS(%bdPC.[^mBV(0Ls[<G-J8m2!%dlG"+8DgeL-9`\WLfn\"f?D*oY:,]8^9S%SrJ.CA%Y9dSIQ[2$tA!Qk!uq;%Sr!Su^LN%H2*Y3?c>;KT!?mfI])CS-]4_P8.L)=\TO/dK=j!E)]"Nk>;Y@5UZeDKci:^)!/p;0oD6)ZHIki3_9W`fJ-s_E*K@t6ILn&sW_2.H%\5,tqXZQJVV\u0413K4-NBDW8=$ukr4Yd&d<i'Wqlo.LJ8I+G^)LI29>\h'ISGAPKFk==Hb;!e+&f!SI]3#Wsm\F]%fGP>5gb@oK%gJXLHnH?!Y?Ymk!%9iU=>+58.QM%iClH0C1baa)82dEk5@Wl1CC)1M^)g;=!<@%n[Lr)&-GpO95l>sr:ek_]7F)ceZK>,t\=.EgG%+5F27U9E'\E6lG!0l*P8[&f(pL9h)AB%6Gll#-!lF-_En\0GaFJAGK+l/O>],5)m<Z<#Fd_,@:cK@:"c)5Ti_`P$KkYurQU(Y\N=%bD4YO`gt2cGs'^d&^-YInDIp6'oHn/;fJ@1J>iQZr16&Ys1%a2Cq!C`6LZlr?&au?"l/@WWQ2]"b4JODmRK-E]s)5L\Z#lJZl)9b%:DTVhKPl!"4(-lEhII@(V?b3M9>Uf*&XE6!%BI<+<dAH-Y%(r<^8Y5<4:IZZjTnY=f:i=P"W7*TP8\;$6P&!0=E"U0h"p_=_dsW6%R$B(eNYk^RP"FuaMcIAXHS`7B93S9Oo.3"(nRuf7L,I)e?u+i*n4A7Igo%h@M;)(unl<*:(:EaXPaLmMIF`0t=.oo#I6NFTZQ0\>%9.U.:['OT;kU6&#ZR,7ms3M"_[2CBSm*-WMfd>:2TT46+Y&Ta3#(o#q<NnU-F.0GLdm`8\Ad=&N7ZF5*$9nq!(8(<e@`@UDEFAdl%_[0@Kh7b4@*#b%)YXAIhE\>/.)s$0B"PN-jEspD2K\O3V*(NAK'3X9J-DnF%[_qh%FpdpJCR[1Lg*Qo@!"#5j_'Fai#T;7uE%'h>%U?59HAM=]VKUC<bi]O9EY*#I?//[8-7SQ73JPs8P<K2FrA(5j!#H6Aao@u+S?M^4A?.YWcE$R1o_R:F[b'?3)Z/(d_Fa0,>95SSY%>BD4Mr8]D7O\I!*Xq[G._8Afp3Au6a&mhQ^5%bVlemWiU!c5OW%!TDXP=FnhP[XB]Vb).f\l4[!X&..1=IjcEfJ4lS^iUMqUg*e`%[29)[?P5fBi1lkYj,t/P`9!s/VP.c19H(3IXhN-)o_OtEQGANBg`lmWU;cAjeVo$'QYS`ba[,FNdM6A:).D:Nq`o7r%84iLO0F[*%r"9TOrK-:@lK26EV%/NgT$tT`]f@B$6f<8Sg`F_$/9f50N0A\s&]_V(b]4K__+\L!U['NE44XEm-'UcIr:NB<]f]pMO0hCr.Rmkg%9]PjdomJ?>SrfhI4uoci1>t=%AQhJ9HTiraZu.C;np.7qF*i,78FNEndP\bZ;'>5>Zlqo<\!-080f(qQo]Xr/8cPA7Q=pIe'P*u@%M;OdV$QUJ-dQXCl<IOq!8,(b$?DpQ4WkI,pD,]45oTJ/j`/.Ds6\PQ`Wt_?&DXn8(07%')$%q2pqlVYANh4VKZBPib2B;k+!\0`%%8kM:d4f4k&[u+2s,"Nj#McGAl=Bbru./086XritM%g=MadAX,H0;7!cG#$gr]_O\:$,oFP>oBdfOCjMj_3gi!D]/5N<P-%5e$4lB%YtAp2MLjg"5:Atm%EKbMG']GGJm::.rm3%)r(:p2Ggj[43_,@[Q<X(I/EOE\!OQ._"uj*f5$"r[NT$cs'ec;0?keIjWE_gE7qtO.%<NT>d-$XRdX?QVi]<4>mWr8`*O_n1;Dl]fF>M=0o.I@,e<3T_)CKbMSd/JAbYR3Y2>?OPojJEJg%AI(q&&0umT4NbbWO=MYpq$,E%o<hPk6(MMP+IFGm!,IS*H<,/OSfAE&c;h%/3Up1F7\GpfL[oUAXYcY@#Tr:jZB]ggT$tUpmB2W*RT0B[PpYJS]NXjjH=Bs+;J!SY%o7rmf?BmLfLq.4f.uKk/.lorlWmm\m3Q#0<oFa+Ke+I%c4fY`)G"^<`CjFhI<%l#`K<s(P2R/9aE?7<[8?.Sf/@M>pGpjnlUU_*E%/3+89dQ.f(q%djMZ><P57+q>%hSl^D'*q94Oj?4.X!i9.E0]>/G-%ju3$g9A?D%#$cF[+%Ajfdfg>g[N5%3j5_Ig-9ma5h'U(lM`%-Tg92'S(!W%%aS*O0E3KqJnkP.<t.on;4@r?g@m9hLm4R.aj,-rYV\7;*`R_?0kR`*0omG;lX#F<)%,_I(Eumcm]<8eAYbfB\:VA%SYrFfhl)IBia]1hd^X*j"9J1qs'D;dgJ@kFVgnQBrS2l$O8nZEnajNlf0B;Us8/^Dq&'*lT0BIMkPt)d:*>V>6,WVn8GYEL8/8AX%6K@m6LC.8KC8[)m,#9$\PM'>5Js-Hu[J:t`[Ku5SD6pQ?/\.oZ>$+!Dr$gt$f5U^_2MNuk;-usCXe_#-P;8H*+D1Z+J2"bPT\pj2%Y@*hF?_fGd-jQR@*a:]Dgj/Rmmuc$AD:CA8c=8qYEVN>86H'HZXiL,Ab#WH7!8kVl)M%</XbFHXKS]DB2t6mP*>B+YbXdE%GKh[9%q(J),)=ku?1ZKG^^Luot)\85EpKljsUlC!Br,+>PpU.EpklOD#r"l?D8_]rG,].o*]=4aTH'_aME>tIp'`])$D!X6)WOQ-MV)H%'%e]sfedIR26=gS.Os7:1/h>d95s6sBFqre"UhuDG\qB,apci;b?oWN^0..kW,k.gokhu7!_r'12HJ,:l`s/UYLn,M3^^\u@Es6"n3%kPp4]rp-3Vf?YiEpWrlH5SX/NRK+mi9,hLuQ\ZKM]3d=O,to,[mCqm<G?14[9E4g!^ZtZm"j`3gQY-k97bL71;ZH%$*RiSj;O2/s%[\H>5W[6qDCgN^l8O+b0qFaqjpa'$gf6dPH0DtN.n*-Nm3)fS%0MCoIedhqEZmHA]F%&u?><e_[0!*mN&Oj]1>D#&B%O.^9?_S(K%-OSA"IY/+5XY]AkWgS>HWkZ80$9`qHfdb[d[O7Gu<is(jrBRir@ks'KDr^ipj56Wu.7t?Ti)fqSI%i"no511ZMN%IW>Ob*6;Bg5%%2?JZWT?3+l?'q5G0s^N-:M$*C.OPq#0P<7qqNUW9UN,7/<PuQ(HW$Am'd1@TIdj9e2!G%=P^W<QN0WaV#P!)P8+IY;2EBg:)E^iS%Zn6l#=I@>HFnL>rs2@^bUJL<S:K#_daVNr_@H5esd'RiGPSf$:r#<U).ZioeY=X=GL_5UEXsX,E08'LiqV@=C+`NjEM6rChL9h)*%^8o(Sr<jtTO&eKt)em0Ge,:NpgGQ%IIFf)b"EoibqULAgFOFu&Jt+_/Jr7-XrG^YL=5tA#c,hRUq<DjC/MN&pI;\j4C^_W[0:jM*%EP;T+I.4cH*!Y8SmdSdhBWSo:\*Vc/Sqqh@-,h;4Pf.e+fc1?dnC/ga+<P'Q;&:mkP&nW3+.H).eN4qp%rJBN&sVd:9B!mXIa?1i%<C1t9%U7cp7s_@m'0GL=7^rtq)"f@m,Q*Wr&`J_p,UQd_AW4@\l*]anXsmG"U:%.@^_3,s6b2HG?u(%[P`q#OHSDkS[QG%,2R;0g%gONJh2u27T3HAYAh?'$8j[F$#^#Z<r?!f]tY?5;pQdWIC,-5\Q'R![d?(m6`@<U0s74S6hIXOph!&OkWA;IV]=uYZrE[>jg?1#5u%EnH(V(esu0'eA?Qie`hR5qaE[bBTS'lfuAO*_B)pod>ruI,l785'qlkT]GZ%3(K#W;qB:Sk^$cK306gdScfTMYY[.LXj3^B%(0YK%QBnjFNIaE7HeKg?R+*@S4N^.MV)q)"-,4\qJRb>>=]$K5/NEDD@olX?3EPQa:a%9O.)(<*htt#qjL>.\8(9d%FIaYLaRr\DrTAnr%!Q+A]Grq8L.HLo>6DV's-#%H73h!BSDuD6,s7i48qBT?T%dmGhP?^*7('I.,1D6`=/c`'up<Jt@,+J@tp'^Gjao`b^K[4Y+n]4nY%3g'kso5%"9G0mMkL23^-iG#.0&SrC?AD66+C#]1<9qe@n60s&;)g-qj;G"=Uc+l6jkg7:)lf,lBX&#=`:[Z,:J_uF++Dc$8`T%Gf%f7<Nlc^E?[B_j6<(t%(1Z\^,94%t9bLI3gpg>^:&Ej16bLBBbgMB)@mLhg/NJkZ6U(!Ut=^4Rjtm_pXW@oLH7;%..N29^TDAA15c%A-9/Sp\8J1XtIJ)Jn>f*Z>@*CID5_L,A9#IAF0ZS#!3)m4Ulo&YPO0JjP$sRjL@`BE4jKMIJ5P8='OMl5@t.q%]WI$XG9<n\@lS1%ok^H3Ut]UpH5EIlXQO=a+rf'*6n)(C&ejP:bLu$)Y@H)rhn^\F&_V=lZP[6e8=d3>]pcS&GP[fY3lgYJX>9:GJJH*]\j.:WF9Lu:%:lH^_NkYeY-SY5jSf!8-\M%IY7h;m"I+*!#IFKWI>Q"g()B#$f$#:,pJVUluep4XgLO86iLF.pnUIGT-e-5a;lN)(%2$ri/D+q[>%4k4`O8)JqY*IKDOZg`[C?$taV-8Gu*"%Z6b)J]fU;ElKr=k)>4+=eat@t8@^MBQnhlr;L?=K0UTgEMtbJERG`Y-^(7=4&qnMT@E.%fF-TC-?nb9L_a;[UaeEl0uO/sZ3n[LDFrXRk7E:a$]30^5Plf`E1k'!J'=O72BKoRq3R`Mci;sFZLD8`DOTW8i*4lq5ZWAjTeM4Z%fLS?J@P^IQ`*Yge\KIbPS3Is&A3?J/N0ae8o3WDNW,ct_&oJ7f?^>p`as+u5nG!3+QOMS1&j`uCoXc4qUn[JK`0eE[BRn'g"jeA^%6pJ9t\7Ic9'L'(MpLUhu@mZ@biVbDK5Q_\#/chh%XI(ou6Y?[/pR;L-oF'#2-TU/J!1Wc$Z1O66P"f\LbP0!h(I!,6VS9c[bq)U%%IJ15f1d(R:L4I8t&eohY,_DX9!F2Br/D0J%Xn.SgNQ=!=Cmpq5[-lV5=rY.XB"q/9;uSFW:0QVDTb.]Zc9Y2Fli9ZQI;EV_cY(.V%r&hFug>F&;M8C-V0O1i]4(jJ&q\M:e;[qQ*84f"pF#Cr%Fm%'Tg_%$aN5s8YJAE@r14G8KqhoDNY(=Pi&\e)S?:-)5S<I82i7r.S%cqSIPra:=OJE23H-?iRI+sA2&,[g=F*"#B`,9fL4":.-%'s-:I[:n^Jj16TVJJUsV#N`*O6tV>tZCB!\dlmifX)I,$W;[u06-=qK%XR3PX36J6,U`6Ig'?jp#1];#0rtW6aH[IOY68\c/4`MbFY*IL.p9jE+i61B8P70IU*<r>3`a#b'<2dJ,nE?B9hinXU5']'G"+Ccl%#$S8K*5(,HA@UR_4A>`_@sZGLH4[ZDX*=09UN!#IBL5#PZb4pg`5OtYDS8'CYK>N*FVk)*ci+$<n"5(*QS8)g,D+i2/jT&;i;TD0%bfgiLoPuF'cYIg_5R>Y$Qq\k>KWMhMEV4Lkpr^J&AsHtI\O"1;SoSJDS,A%o(++>Hct+QIWuXR/2FH/n:@7>"o>A_(K+F*uF*)Rb%!9SO(,f-m5&0/%SfI.S"jOqUWo7rBV7V3SK/<7'`CQS-tUS3Ktqmf:;N::hni[31J8sWcL6RO8@E?$enqtHA#j;s=r57c0\$900d%V:\o[LeV:A^so65;36IP=)QB>1Qk%E&'WY/1+&^3YlTDe2$"%A.]=Pf_J\J-S-8BcWb13p*Ntm\S$8JA>[a8#QGCLGY$?:%=uHc^%_3u`WP9-O`@G9Jt#q3[(SU3+,%Z]A+=h3]>HBimYr#O>I?1Grl\a'A<h4Ua8,R`0h:h-`K]j6X@c!2A1+4l#2P&8&Gj&Bk[7cd\:%/9_:X.iJt^l]hbUh/<!g:';%RJ;)s&@r((Jq^6DDD?,@k.s'BE#b%EjC[/V3kn!]lm0I-![!>TqFMa$rD^0WOI&WVB6=4j?e\qE\%L"Ab&c,$/_`RfB!quLf6E;?:p@.eVa^-+S3de>3H<WnC/Ga3r=iq.8M;'doZ/`OV?I9gH;Aha0;H0hPa\J=B<&VmD2^aTrL-j-A^%>ZPI$3%t6TM^V?5QC690CZNRQq*%]1a]\Gt@,#q?*_t>_hSmdXeO7sj]MfEbZ)sdGFJ>20mjj"GMUCjoL0\-A,VVI;<Ck5b#0THu%<?^On%_Hd_)0-CT*%\=r=[/C2fB0p>Wl@'O4$h&Zo#glgUf\!K3F/f#$3N9cSR83p6K)XLYP*8[s1l(kI5i[7dIq=8=$-lG^HL6t%#b:>#JSior$1`/t,bJ#1j-res/h4I\ZY7hZ_=.G:YA#4Q"&Jj@<`ggXTiTG`+*d8#4oQoU2h+^h!fr:>[dk"H78A"-rj66cqaV[_%+8WNejEIW^7im0J?j(U()<q;N'J,%?O[]s\[256b&4>F%/aFlK"e^t!9gKLsS`@MPNpc':U-Q_h#="YQ5#<P6p.@q"I;j30!C_jq%jQ3g>0NdfF&I[&cbSs7;i^^Q_r9CPXZ3MaMnXPW;qsiM/>cJ0'6L_sV#Mr7>9<-a4gHAQb..CtRe\L35dW1mgO4PD@rejDU#q<lb%OMD7G]22=Sa#;jqC0_hUX"IW3WZ\dIa_P&THVde@bet][R%EA:NQU-Q`!48_L7gLWF9I(;`iIbe7>TJrGNFcUN[g3R&5'i-p!j>g%[gV#_N)rUc\E#94CSkp'-q;(D9gaO)JLF$SQ:%W4).h:A<AmbTd>IkhLYNS:PB&(q6KrO$@$d:#l%kB9/4a0Snl5`TOn_NJ&O--X%O+46ukUYiXoUNeLWYd9aE%s0=?ecuuAKl[K&XEVZLNK`JON*VT3*IU@ZbhY1p&V!0XNV1s<5AM5od<tqFZ?.go/E9UkIa$GZ@tcI%BN.t;E<I'["tG!?%e\([P;%&oM$Wse%+e#&J\gZbPQ^%ZJ9aDo36XbR6pb#2H<*?j3#ICZ&8+(Gqu":5\$2<M$KJ([1U8sa6f@2M%F\EQZ.n<B_:+j)2Bl>ue70-C0.ZbeiXqSf(BF&WE[R">;S>1j6dq<p-aT_`],l6QO$s.ScP(IRK/P)L$-S9/0=9i\Ofr69,Bn(.T%5&[`(?D#j%1*70YrUh%7'-tYKml4'Y7<#QZY?.\+SHms\5\@r>dl'W(Km7rCi/h!"&?Vbjf9T.:IL@Qb<(;j>6=#SFK/31cCM+R9%En4S#SI>Dl)8fOR`Km_=*F2#NH#TTJahP*Dd,jB*+)oD8RN$)@hVSQ@.)^\f>5^a-daG`aL8_U&G8'53#_^-UPBMbRc,%n??eM:=%H^fL-a]lr6GJD'Y@GaeZ=h]>SEHJ0"Z+rEbID5jX-2BJ--j9+VG*k&6eca"5Z*X/s+siZR%n@R\f$PoCX,>RmCU=m)TAuPlg`J1f%8,,kkCYh9h/Uj$D"MgI\jmb&WE^sjZZ5?,qX6!^77f@8:#EAfLJPlc>DeRUREFlEg^j"J/5A.ec^@bgeU9T'b?Z>s3a&%MNOg*Od%4WQ&G+#E5sad'2gK00'd(L1-K_0KdtVF?]7W0g=ch=rk['7T%q$O_;oa*ucDbCBl\g5j@%$$P>@VuW;nDYMZ10Gd(A4u%TFdgeU2%)s=*E<XXHdPV-IcE!:u"]Y$;LGtBN#$gCn1YG,((jK'd"mWr/D'oM4Dp9C[Ac%CPq5?6r.1OOfIe&unl#-k*@W$__N%!c!S%-e;=%hZCC(NnkanZ1=-Kh*N3gA:*[<4/MPu4d#UE28ueTYB4/,*8hj>-&+tE[b_L7;iW6@Fuao*;nAGl)Q1ccp%-DL=9Dc*L'Qn,jAQlX%pU1U@jZY8S/\0Y8(mBNn"i%PWA2'FVnqfBCeX\_+PP!,_U@<?i\a\-u^3]$*:=ijjJ-:'CW[R2GUW%5k!m(J<]sCF[WBT!3Pm0d)%pU/d*q3uU4c"r6H@,51M6G;]qCG[U@K>R^<<4NIpCY\m^l]JeH;2V7UMXp6$Z>I"UrpK%tKS7ne;b&f?G!:?$%`b34c$/TF&0D$"%@V+J>TG9J"X2DCq0)Uosqor[Q[Pp3))hb2<p>GDF`o[WbjHJE"J0,tS@:T;<7VEcK]u'XYf3GJ$5[&uoKsRA+WPk\5o9-.u>mBh+%c;R%%kf6P/goQ,Yl]^ZXd%_(:4a=B02>C.9&Fho0Dk*r3n"*8B[ioZ.Z=O\tO:j69Y2j?eH$q\-$lcg1>R@CD!P5heEcKfO1?l,3%es=#<j:E5%8ct7ioY-l2`it0]_I+[g#A%l^XXjsKW4I^#L>fd!s8H+AqbNm_.*[9!I]8eC5>AFBQ?MhFrU^"jipdAOG-VeTFa7M*%=G(p08gUC\@!kee9MhZAr<K`Qn0cTrjG$!G7@+V9X1p\dNl$+Je?EjZ4siae(n<BNiaNPa?hfI&;GZX/i^/f(XPb;?8GFVHO]bQ6%Y1dA1n]g&u2ZFt`VEB3hj7R_tf@0uXi60\CL-*'IOgS#a4iYGs'nii@+po_L1BXf](*2ANmSj?$Mj\f1/DNf2'l7[\`j*I)pi9:b%D;24p)J+*&!DH2W8#'>$"Y41_Y&`/AF/!aM:-G`ki(L]TZn`6FBs^>G^k$`L7SN=NSFrRmW%!MTa&]\:`.+ICh#,ELP&Vn21B:h"%FIW9f5A1n_.\I>:H+#dX9jKL?hnp;lj67;1USSRNHt.5fOVa<Y@j\OMs3FjpOqq6fD_o&FrhXf15O`uKAcE[p6H^7ER_%[O`>a7A%Sq'!*D-l00oXXGUoaGT/i$U-L\`%m]2P5'N$FLEEGZs]!fh'ja:G1_oVK.Gf%!HmFUBe<iRj2/Nf[<CF+o8.LI2[#M0'N$N(M@g#%@Zb2'En8to)1[.kS=1P[:7"pXj6*V)]5f\JZri*g*%Dsd)X9b=QNn(maq*D$<C#2uA5R^9X3uM:^N*S4[^dE^Yc@1u3R6+b.]^jP%nQHi$EqVoRkaYs.Xp'AF[P/gPU1_0FWs7TN\X_p;`h\Rq%,9RYfdciII8Wn#6F7#U_8Vk#eX,6]>cULp#6;W75Pat@]9s[oW$^eG%Y[.;rU@0SVASQR9Uuad%]8l\]*YgWG](E+=7DDcn1e*Cc>'GWS<E4hA$6RQ6h_%I@jZ?tWgXj#CnFq84Tu=\oQ=Xh%$hZ^A+F^eb%"0^4<&pa\h'PNiu45hXl#UFn^\=Dk4kaIYXPbO@].j!fR,h:aCTsdMUKfq_D@CUdkFsQ2R^_.+eLjgO;7$U%5/c9H$_*R\8/llk1%9aN*HB(&3Z/6j./B/bi>!Kp#60nIUZeS@K_3E9d\1`D`1Hm3<0e*Z<m<<-DB(PIt%cf;utk.,aBH:f?J(KEY%+p&(J5a;n8@pjB,%!kgj0?:SAdr*1*OEMu;id;0rH1W4A"Ft$H'<D5Ou`p-Od=&U$"5V(n0JkL^\jP7L)@B?Z8I7Alra!JG?6@k=%l2FCb05e8#Mt<qe%MK0IG.FmGaaCU9*Dn8dq&uB^>_L9m/*g[A%j.Aqs=M]%Z=jjCeY&qrCLKI(Tclt[:+H)@;-KMDem0.P0Ir*/W;lG(^6dccb.,S!`%i%UM`4(OOI*Glt8%O5OrO(<lB#8@mmIuWDf+?NK_m1qtkJIo/!I<?@A%g@a68i+T-ps!#U%"HIVfB%IA!e8\U3/nNO1^\t$\N(9=%`!PW<,%?Q>"jO%OCKnKh5'BR)%,1R.W9;Xq?Huiu1of&Z\%WjS/^f.<"d20&*FnPPcmS.g?t.iJ)jU&134GQ)<H5PKE)qD=-\jAC%e4Y?=e35#J_]V`)DUFgRgibdYdAbhRl!\]r@FAO-Y.@0rBm!nnM8uVl.fP!YD0st>'k/Pehmtj/'$8E770&1Id5&Ve(g9bBL8L-,%TioZ<`A>f30NT'[N03ij<DUC;`?@`C)[g>a^e9hk.'M]R+a>"N`fX:7DYe"D/ta9u(6+>n8rr"V>D62"U#ZLZYT96)ls%Vs*3"\u%hYV\cSiE;23D4:6VbWa.+cJNTNl8jD^h>h0p>Yd7a;$Gr:@PjV?SI=&2=Iim$aqJ%<>X70!TGJrZ\,(\$S!ecekf<8(d)_i5HL25%6!DW_if%U*OR87spr@K^6rB`V)KD9H2[k*ie5JXG_C7]!8ZRT*]JOI$KWMaETKD%R2TDJXiR6d0:=lSU?tLsX;6DF/ojX!NlKqC<%#/\k\:d^@t24\5Q@`(cUm'7;9R0(<Yhi)N%r4E_[qfiHSl)X!85a_D5h%<*SM[&MAe<1Y14Ok7a4fFY6=je&PXV4%m21Bh^Y<L2U%U=?@^E^jaLEp_DtbE@"<i!l5ek[O-Ok)uCEZXcd@;QJnYSiil2P&NB3XH7[>\mrq*:>5,DLs7Bnck/^$[H7eE3OUYi7hm2M"3%uF%7mdMW(9A%Y,JtO@%`kW&]=X-!*\%g:kb?NODQQanG1]e):4TpI]X-AiYHcn3FNmE+R8NXV4(!lJ4H!I.6n:'%+;Po;\ui1??/-V*%81MQs+9d<oS)g%oIH'jt]X2Iq(Cn*i*eLhj]80O)eBI#@eO6q?IN1.b$r-P'qKZR+6*ike>0e/?3U3:,!0CDTS=Ic6M+e_iJ<Ut,%(6Q7f)5AsZ,mA%]dlQ<N+9VVf/TbA%$R3sS/H@j/.bj@eofu)c]=a!?2&V?U3H5rC%bG3LNk!OUkR3hGgO--mHWp@IV4GkK,Xi8t%T>9nLQan4V<HnB`@C8Ws,JaE+BI$&R,h@mnaCsJ&M(c/h_g5*`g[:[$bkfH(N/1_?gC!UZhU<.].\oR[6T(FuA4/RA`Lbqa1N^kF%*'RsigE_R9Gq%T8CA4IAJ4$3-QZf9/-rn8NR%VZ$r%da2G"9+sK7X95Q-jD^Xjn^%SqK27_e1&u[mbGa['Jj09`u=J:9[i?6OKc(%,Pn36e4ElKf/c_\?-B)\-2RNKhd(:4.NKMKaNrqaYlgksb<H[YX!?ZLk@*cH<)-ToqZ83?/Nq?_:NikO"$J%BeE^EbgJkk%jmlbQ%<*KlZ1HH&r;5+>!M@U@n@#F$<fnU$"=]e`UWA8Bt'1CC)fU(8GU"b\aqJo@jgh!aRLb8p1j'&[1.F!7!+L]m(J<T$(mZW_Mn]L44%3bkH`&PMuWpB\lro6#0R_92oPp-g-B#"e&M1s;U.$VC//ODbO+Yq!#_ajh?-Ud4j>c&ZM_h:meW.u1Stk1.8's3JEZif>MXoiP)$%aTh<e<Qi9.c\.$f/a=f^!kF4AIT6TGpL2_;?C[mnb-VaoJC8#B(P^Km08,=e$!:^=)RgY;fE)1U7!*9NeAHi&Wp7KA%;`*@#:2F/%JhEl?"Et4X`!`8n5Bt<G/XdMVk>F^PFfBXV8k:N.B&j`KJC9Rq@LWU(b!iZ<b)<Ph=``gm<5uKg8?XXX7Csq^cXqhKNBqHR48BgO%'!)hMEp/ZA&;Vfa:SCB,6OoQa=+ma4*CkQl68P%5E8-cX9L6]t@&Vc:nDXp'?=)F3KE'BWKZRRC#7e+L5tlVM#?qRVK)oggX76C-%mGOc)Rm=L+_/l"ITskoD?qQG=(cc.F,TCc.+9Q_TY,KJ>40q)VB<Z2*h"<+4n&_Ci;1_4,9.78YI#5>J%+SbTff^KSebna(r\]]'%.!:NF9g!rN-/Yd)S*mHikln(WN^6A3-,//D>T3%DVXUHm&P\0U/ld)Tg"<EkD)o*k*g_HPJHS9lh$6%*-m$?G](2=tJP6)>L2.pe%3WJj$p?NE7`'W^aQj$8D*aBFVpc6KCP%W<u9-XY4_AB#V.^J+[!6.12QsDQe-*$paZYOVioZi9S<q`cqk_fO+Of?js8h!.\2A\)]%Flp%;9Q6FD2RbOO0PZ7FF:l^4,NmI`CT&U5"bUV8RbN)lCVNm@DR,[/6-ois[jgQJp@ZlJTX(^Y*V`G0RV_&@HEo$)51r8NH6fIT%@=50+ki3=L>%la[kVq`/2=GiCm_L'AB:[@Di@r'6)IH^i&4ek)lU#W]Upo.HH2Z9%:r!V3K["aD0dWlM.&l`0!8"[s#I)K_*#'$?%bq3SnZ3[H7I-<K_TW,QfL?qcX&,Q<$CN!@YolBehofQesZ5fdH]o2e4$ttQTX)><qhsJ)]\KBN+5+XR4dH,J<HKf>G4q?n)UQU7;%n&faH7HA'YeSsS]:u[oD;R^/?\$<tQ.>gBCACc@F5%9@95-upA\j^-5PW+4H:e:oMLLbgd2a)GUeu.sYNo0e;Is_4nqs"%SEd`=_%3$*Q55@&`KT)\TWEd`1Y3PSl1kN?J4[P*-drc37p?=*X1FM/Z#5(*2s=)PLKIm5"3s7F4H^S.\cVZ~>%AI9_PrivateDataEnd